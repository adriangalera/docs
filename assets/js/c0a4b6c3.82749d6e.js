"use strict";(self.webpackChunkhacking=self.webpackChunkhacking||[]).push([[41],{422:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var s=i(5893),t=i(1151);const a={slug:"/linux-useful-commands",pagination_next:null,pagination_prev:null},r=void 0,c={id:"Linux/Useful commands",title:"Useful commands",description:"Environment variables by variable",source:"@site/docs/Linux/Useful commands.md",sourceDirName:"Linux",slug:"/linux-useful-commands",permalink:"/docs/linux-useful-commands",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/linux-useful-commands",pagination_next:null,pagination_prev:null},sidebar:"tutorialSidebar"},l={},o=[{value:"Environment variables by variable",id:"environment-variables-by-variable",level:2},{value:"Check if there are git changes in script",id:"check-if-there-are-git-changes-in-script",level:2},{value:"See strings in binary file",id:"see-strings-in-binary-file",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"environment-variables-by-variable",children:"Environment variables by variable"}),"\n",(0,s.jsx)(n.p,{children:"Imagine we need to access the contents of an environment variable, but its name is stored in another variable."}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'DEV_AWS_ACCESS_KEY_ID="1234-dev"\nRD_AWS_ACCESS_KEY_ID="abcd-prd"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This could happen for instance while configuring multiple AWS in a CI system."}),"\n",(0,s.jsxs)(n.p,{children:['Let\'s continue with the example, the CI system provide a variable called "stage", which can be ',(0,s.jsx)(n.code,{children:"dev"})," or ",(0,s.jsx)(n.code,{children:"prd"}),"; then we want to prepend the content of this variable to get the credentials to the proper account:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'CUR_ENV=`echo ${stage} | tr a-z A-Z`\nENV_ACCESS_KEY="${CUR_ENV}_AWS_ACCESS_KEY_ID"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now the magic comes, if this the shell is based in ",(0,s.jsx)(n.code,{children:"bash"}),', we could the technique called as "variable indirection", like this:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ACTUAL_KEY=echo ${!ENV_ACCESS_KEY}\n"})}),"\n",(0,s.jsx)(n.p,{children:"However, this will not work on all the shells, a more general solution could be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"eval ACTUAL_KEY=\\$$ENV_ACCESS_KEY\n"})}),"\n",(0,s.jsxs)(n.p,{children:["However, there might be security implications by using ",(0,s.jsx)(n.code,{children:"eval"})]}),"\n",(0,s.jsx)(n.h2,{id:"check-if-there-are-git-changes-in-script",children:"Check if there are git changes in script"}),"\n",(0,s.jsx)(n.p,{children:"In a CI pipeline, you might want to check if there are changes to create an automatic commit, etc."}),"\n",(0,s.jsx)(n.p,{children:"You can do that by running the following snippet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'git diff-index --quiet HEAD\nANY_CHANGE=$?\n[ $ANY_CHANGE -ne 0 ] && echo "Do something with the change"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"see-strings-in-binary-file",children:"See strings in binary file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"strings login.php.swp\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>r});var s=i(7294);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);